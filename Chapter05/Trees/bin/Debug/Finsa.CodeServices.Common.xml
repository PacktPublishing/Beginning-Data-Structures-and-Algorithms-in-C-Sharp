<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Finsa.CodeServices.Common</name>
    </assembly>
    <members>
        <member name="T:Finsa.CodeServices.Common.GTuple">
            <summary>
              Contains helper methods to make it easier to create new tuples.
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple.MaxItemCount">
            <summary>
              The maximum number of items a tuple can hold.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple.ToGTuple``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
              Creates a new tuple built from given sequence of arguments.
            </summary>
            <param name="items">The sequence of elements from which the tuple will be built.</param>
            <returns> A new tuple built from given sequence of arguments.</returns>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="items"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="items"/> contains more than 21 elements.
            </exception>
            <remarks> 
              Since tuples can have no more than 21 items, given sequence
              must not contain more than 21 elements.
            </remarks>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple.CreateFromEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
              Creates a new tuple built from given sequence of arguments.
            </summary>
            <param name="items">The sequence of elements from which the tuple will be built.</param>
            <returns> A new tuple built from given sequence of arguments.</returns>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="items"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="items"/> contains more than 21 elements.
            </exception>
            <remarks> 
              Since tuples can have no more than 21 items, given sequence
              must not contain more than 21 elements.
            </remarks>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple.Create``2(``0,``1)">
            <summary>
              Creates a new tuple built from given arguments.
            </summary>
            <param name="item1">Item 1.</param>
            <param name="item2">Item 2.</param>
            <returns>A new tuple built from given arguments.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple.Create``3(``0,``1,``2)">
            <summary>
              Creates a new tuple built from given arguments.
            </summary>
            <param name="item1">Item 1.</param>
            <param name="item2">Item 2.</param>
            <param name="item3">Item 3.</param>
            <returns>A new tuple built from given arguments.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple.Create``4(``0,``1,``2,``3)">
            <summary>
              Creates a new tuple built from given arguments.
            </summary>
            <param name="item1">Item 1.</param>
            <param name="item2">Item 2.</param>
            <param name="item3">Item 3.</param>
            <param name="item4">Item 4.</param>
            <returns>A new tuple built from given arguments.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple.Create``5(``0,``1,``2,``3,``4)">
            <summary>
              Creates a new tuple built from given arguments.
            </summary>
            <param name="item1">Item 1.</param>
            <param name="item2">Item 2.</param>
            <param name="item3">Item 3.</param>
            <param name="item4">Item 4.</param>
            <param name="item5">Item 5.</param>
            <returns>A new tuple built from given arguments.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple.Create``6(``0,``1,``2,``3,``4,``5)">
            <summary>
              Creates a new tuple built from given arguments.
            </summary>
            <param name="item1">Item 1.</param>
            <param name="item2">Item 2.</param>
            <param name="item3">Item 3.</param>
            <param name="item4">Item 4.</param>
            <param name="item5">Item 5.</param>
            <param name="item6">Item 6.</param>
            <returns>A new tuple built from given arguments.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple.Create``7(``0,``1,``2,``3,``4,``5,``6)">
            <summary>
              Creates a new tuple built from given arguments.
            </summary>
            <param name="item1">Item 1.</param>
            <param name="item2">Item 2.</param>
            <param name="item3">Item 3.</param>
            <param name="item4">Item 4.</param>
            <param name="item5">Item 5.</param>
            <param name="item6">Item 6.</param>
            <param name="item7">Item 7.</param>
            <returns>A new tuple built from given arguments.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
              Creates a new tuple built from given arguments.
            </summary>
            <param name="item1">Item 1.</param>
            <param name="item2">Item 2.</param>
            <param name="item3">Item 3.</param>
            <param name="item4">Item 4.</param>
            <param name="item5">Item 5.</param>
            <param name="item6">Item 6.</param>
            <param name="item7">Item 7.</param>
            <param name="item8">Item 8.</param>
            <returns>A new tuple built from given arguments.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple.Create``9(``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
              Creates a new tuple built from given arguments.
            </summary>
            <param name="item1">Item 1.</param>
            <param name="item2">Item 2.</param>
            <param name="item3">Item 3.</param>
            <param name="item4">Item 4.</param>
            <param name="item5">Item 5.</param>
            <param name="item6">Item 6.</param>
            <param name="item7">Item 7.</param>
            <param name="item8">Item 8.</param>
            <param name="item9">Item 9.</param>
            <returns>A new tuple built from given arguments.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple.Create``10(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
              Creates a new tuple built from given arguments.
            </summary>
            <param name="item1">Item 1.</param>
            <param name="item2">Item 2.</param>
            <param name="item3">Item 3.</param>
            <param name="item4">Item 4.</param>
            <param name="item5">Item 5.</param>
            <param name="item6">Item 6.</param>
            <param name="item7">Item 7.</param>
            <param name="item8">Item 8.</param>
            <param name="item9">Item 9.</param>
            <param name="item10">Item 10.</param>
            <returns>A new tuple built from given arguments.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple.Create``11(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
              Creates a new tuple built from given arguments.
            </summary>
            <param name="item1">Item 1.</param>
            <param name="item2">Item 2.</param>
            <param name="item3">Item 3.</param>
            <param name="item4">Item 4.</param>
            <param name="item5">Item 5.</param>
            <param name="item6">Item 6.</param>
            <param name="item7">Item 7.</param>
            <param name="item8">Item 8.</param>
            <param name="item9">Item 9.</param>
            <param name="item10">Item 10.</param>
            <param name="item11">Item 11.</param>
            <returns>A new tuple built from given arguments.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple.Create``12(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
              Creates a new tuple built from given arguments.
            </summary>
            <param name="item1">Item 1.</param>
            <param name="item2">Item 2.</param>
            <param name="item3">Item 3.</param>
            <param name="item4">Item 4.</param>
            <param name="item5">Item 5.</param>
            <param name="item6">Item 6.</param>
            <param name="item7">Item 7.</param>
            <param name="item8">Item 8.</param>
            <param name="item9">Item 9.</param>
            <param name="item10">Item 10.</param>
            <param name="item11">Item 11.</param>
            <param name="item12">Item 12.</param>
            <returns>A new tuple built from given arguments.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple.Create``13(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12)">
            <summary>
              Creates a new tuple built from given arguments.
            </summary>
            <param name="item1">Item 1.</param>
            <param name="item2">Item 2.</param>
            <param name="item3">Item 3.</param>
            <param name="item4">Item 4.</param>
            <param name="item5">Item 5.</param>
            <param name="item6">Item 6.</param>
            <param name="item7">Item 7.</param>
            <param name="item8">Item 8.</param>
            <param name="item9">Item 9.</param>
            <param name="item10">Item 10.</param>
            <param name="item11">Item 11.</param>
            <param name="item12">Item 12.</param>
            <param name="item13">Item 13.</param>
            <returns>A new tuple built from given arguments.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple.Create``14(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13)">
            <summary>
              Creates a new tuple built from given arguments.
            </summary>
            <param name="item1">Item 1.</param>
            <param name="item2">Item 2.</param>
            <param name="item3">Item 3.</param>
            <param name="item4">Item 4.</param>
            <param name="item5">Item 5.</param>
            <param name="item6">Item 6.</param>
            <param name="item7">Item 7.</param>
            <param name="item8">Item 8.</param>
            <param name="item9">Item 9.</param>
            <param name="item10">Item 10.</param>
            <param name="item11">Item 11.</param>
            <param name="item12">Item 12.</param>
            <param name="item13">Item 13.</param>
            <param name="item14">Item 14.</param>
            <returns>A new tuple built from given arguments.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple.Create``15(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14)">
            <summary>
              Creates a new tuple built from given arguments.
            </summary>
            <param name="item1">Item 1.</param>
            <param name="item2">Item 2.</param>
            <param name="item3">Item 3.</param>
            <param name="item4">Item 4.</param>
            <param name="item5">Item 5.</param>
            <param name="item6">Item 6.</param>
            <param name="item7">Item 7.</param>
            <param name="item8">Item 8.</param>
            <param name="item9">Item 9.</param>
            <param name="item10">Item 10.</param>
            <param name="item11">Item 11.</param>
            <param name="item12">Item 12.</param>
            <param name="item13">Item 13.</param>
            <param name="item14">Item 14.</param>
            <param name="item15">Item 15.</param>
            <returns>A new tuple built from given arguments.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple.Create``16(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15)">
            <summary>
              Creates a new tuple built from given arguments.
            </summary>
            <param name="item1">Item 1.</param>
            <param name="item2">Item 2.</param>
            <param name="item3">Item 3.</param>
            <param name="item4">Item 4.</param>
            <param name="item5">Item 5.</param>
            <param name="item6">Item 6.</param>
            <param name="item7">Item 7.</param>
            <param name="item8">Item 8.</param>
            <param name="item9">Item 9.</param>
            <param name="item10">Item 10.</param>
            <param name="item11">Item 11.</param>
            <param name="item12">Item 12.</param>
            <param name="item13">Item 13.</param>
            <param name="item14">Item 14.</param>
            <param name="item15">Item 15.</param>
            <param name="item16">Item 16.</param>
            <returns>A new tuple built from given arguments.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple.Create``17(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16)">
            <summary>
              Creates a new tuple built from given arguments.
            </summary>
            <param name="item1">Item 1.</param>
            <param name="item2">Item 2.</param>
            <param name="item3">Item 3.</param>
            <param name="item4">Item 4.</param>
            <param name="item5">Item 5.</param>
            <param name="item6">Item 6.</param>
            <param name="item7">Item 7.</param>
            <param name="item8">Item 8.</param>
            <param name="item9">Item 9.</param>
            <param name="item10">Item 10.</param>
            <param name="item11">Item 11.</param>
            <param name="item12">Item 12.</param>
            <param name="item13">Item 13.</param>
            <param name="item14">Item 14.</param>
            <param name="item15">Item 15.</param>
            <param name="item16">Item 16.</param>
            <param name="item17">Item 17.</param>
            <returns>A new tuple built from given arguments.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple.Create``18(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17)">
            <summary>
              Creates a new tuple built from given arguments.
            </summary>
            <param name="item1">Item 1.</param>
            <param name="item2">Item 2.</param>
            <param name="item3">Item 3.</param>
            <param name="item4">Item 4.</param>
            <param name="item5">Item 5.</param>
            <param name="item6">Item 6.</param>
            <param name="item7">Item 7.</param>
            <param name="item8">Item 8.</param>
            <param name="item9">Item 9.</param>
            <param name="item10">Item 10.</param>
            <param name="item11">Item 11.</param>
            <param name="item12">Item 12.</param>
            <param name="item13">Item 13.</param>
            <param name="item14">Item 14.</param>
            <param name="item15">Item 15.</param>
            <param name="item16">Item 16.</param>
            <param name="item17">Item 17.</param>
            <param name="item18">Item 18.</param>
            <returns>A new tuple built from given arguments.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple.Create``19(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18)">
            <summary>
              Creates a new tuple built from given arguments.
            </summary>
            <param name="item1">Item 1.</param>
            <param name="item2">Item 2.</param>
            <param name="item3">Item 3.</param>
            <param name="item4">Item 4.</param>
            <param name="item5">Item 5.</param>
            <param name="item6">Item 6.</param>
            <param name="item7">Item 7.</param>
            <param name="item8">Item 8.</param>
            <param name="item9">Item 9.</param>
            <param name="item10">Item 10.</param>
            <param name="item11">Item 11.</param>
            <param name="item12">Item 12.</param>
            <param name="item13">Item 13.</param>
            <param name="item14">Item 14.</param>
            <param name="item15">Item 15.</param>
            <param name="item16">Item 16.</param>
            <param name="item17">Item 17.</param>
            <param name="item18">Item 18.</param>
            <param name="item19">Item 19.</param>
            <returns>A new tuple built from given arguments.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple.Create``20(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18,``19)">
            <summary>
              Creates a new tuple built from given arguments.
            </summary>
            <param name="item1">Item 1.</param>
            <param name="item2">Item 2.</param>
            <param name="item3">Item 3.</param>
            <param name="item4">Item 4.</param>
            <param name="item5">Item 5.</param>
            <param name="item6">Item 6.</param>
            <param name="item7">Item 7.</param>
            <param name="item8">Item 8.</param>
            <param name="item9">Item 9.</param>
            <param name="item10">Item 10.</param>
            <param name="item11">Item 11.</param>
            <param name="item12">Item 12.</param>
            <param name="item13">Item 13.</param>
            <param name="item14">Item 14.</param>
            <param name="item15">Item 15.</param>
            <param name="item16">Item 16.</param>
            <param name="item17">Item 17.</param>
            <param name="item18">Item 18.</param>
            <param name="item19">Item 19.</param>
            <param name="item20">Item 20.</param>
            <returns>A new tuple built from given arguments.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple.Create``21(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18,``19,``20)">
            <summary>
              Creates a new tuple built from given arguments.
            </summary>
            <param name="item1">Item 1.</param>
            <param name="item2">Item 2.</param>
            <param name="item3">Item 3.</param>
            <param name="item4">Item 4.</param>
            <param name="item5">Item 5.</param>
            <param name="item6">Item 6.</param>
            <param name="item7">Item 7.</param>
            <param name="item8">Item 8.</param>
            <param name="item9">Item 9.</param>
            <param name="item10">Item 10.</param>
            <param name="item11">Item 11.</param>
            <param name="item12">Item 12.</param>
            <param name="item13">Item 13.</param>
            <param name="item14">Item 14.</param>
            <param name="item15">Item 15.</param>
            <param name="item16">Item 16.</param>
            <param name="item17">Item 17.</param>
            <param name="item18">Item 18.</param>
            <param name="item19">Item 19.</param>
            <param name="item20">Item 20.</param>
            <param name="item21">Item 21.</param>
            <returns>A new tuple built from given arguments.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple.Create``1(``0)">
            <summary>
              Creates a new tuple built from given arguments.
            </summary>
            <param name="item1">Item 1.</param>
            <returns>A new tuple built from given arguments.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple.Create``1(``0,``0)">
            <summary>
              Creates a new tuple built from given arguments.
            </summary>
            <param name="item1">Item 1.</param>
            <param name="item2">Item 2.</param>
            <returns>A new tuple built from given arguments.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple.Create``1(``0,``0,``0)">
            <summary>
              Creates a new tuple built from given arguments.
            </summary>
            <param name="item1">Item 1.</param>
            <param name="item2">Item 2.</param>
            <param name="item3">Item 3.</param>
            <returns>A new tuple built from given arguments.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple.Create``1(``0,``0,``0,``0)">
            <summary>
              Creates a new tuple built from given arguments.
            </summary>
            <param name="item1">Item 1.</param>
            <param name="item2">Item 2.</param>
            <param name="item3">Item 3.</param>
            <param name="item4">Item 4.</param>
            <returns>A new tuple built from given arguments.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple.Create``1(``0,``0,``0,``0,``0)">
            <summary>
              Creates a new tuple built from given arguments.
            </summary>
            <param name="item1">Item 1.</param>
            <param name="item2">Item 2.</param>
            <param name="item3">Item 3.</param>
            <param name="item4">Item 4.</param>
            <param name="item5">Item 5.</param>
            <returns>A new tuple built from given arguments.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple.Create``1(``0,``0,``0,``0,``0,``0)">
            <summary>
              Creates a new tuple built from given arguments.
            </summary>
            <param name="item1">Item 1.</param>
            <param name="item2">Item 2.</param>
            <param name="item3">Item 3.</param>
            <param name="item4">Item 4.</param>
            <param name="item5">Item 5.</param>
            <param name="item6">Item 6.</param>
            <returns>A new tuple built from given arguments.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple.Create``1(``0,``0,``0,``0,``0,``0,``0)">
            <summary>
              Creates a new tuple built from given arguments.
            </summary>
            <param name="item1">Item 1.</param>
            <param name="item2">Item 2.</param>
            <param name="item3">Item 3.</param>
            <param name="item4">Item 4.</param>
            <param name="item5">Item 5.</param>
            <param name="item6">Item 6.</param>
            <param name="item7">Item 7.</param>
            <returns>A new tuple built from given arguments.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple.Create``1(``0,``0,``0,``0,``0,``0,``0,``0)">
            <summary>
              Creates a new tuple built from given arguments.
            </summary>
            <param name="item1">Item 1.</param>
            <param name="item2">Item 2.</param>
            <param name="item3">Item 3.</param>
            <param name="item4">Item 4.</param>
            <param name="item5">Item 5.</param>
            <param name="item6">Item 6.</param>
            <param name="item7">Item 7.</param>
            <param name="item8">Item 8.</param>
            <returns>A new tuple built from given arguments.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple.Create``1(``0,``0,``0,``0,``0,``0,``0,``0,``0)">
            <summary>
              Creates a new tuple built from given arguments.
            </summary>
            <param name="item1">Item 1.</param>
            <param name="item2">Item 2.</param>
            <param name="item3">Item 3.</param>
            <param name="item4">Item 4.</param>
            <param name="item5">Item 5.</param>
            <param name="item6">Item 6.</param>
            <param name="item7">Item 7.</param>
            <param name="item8">Item 8.</param>
            <param name="item9">Item 9.</param>
            <returns>A new tuple built from given arguments.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple.Create``1(``0,``0,``0,``0,``0,``0,``0,``0,``0,``0)">
            <summary>
              Creates a new tuple built from given arguments.
            </summary>
            <param name="item1">Item 1.</param>
            <param name="item2">Item 2.</param>
            <param name="item3">Item 3.</param>
            <param name="item4">Item 4.</param>
            <param name="item5">Item 5.</param>
            <param name="item6">Item 6.</param>
            <param name="item7">Item 7.</param>
            <param name="item8">Item 8.</param>
            <param name="item9">Item 9.</param>
            <param name="item10">Item 10.</param>
            <returns>A new tuple built from given arguments.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple.Create``1(``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0)">
            <summary>
              Creates a new tuple built from given arguments.
            </summary>
            <param name="item1">Item 1.</param>
            <param name="item2">Item 2.</param>
            <param name="item3">Item 3.</param>
            <param name="item4">Item 4.</param>
            <param name="item5">Item 5.</param>
            <param name="item6">Item 6.</param>
            <param name="item7">Item 7.</param>
            <param name="item8">Item 8.</param>
            <param name="item9">Item 9.</param>
            <param name="item10">Item 10.</param>
            <param name="item11">Item 11.</param>
            <returns>A new tuple built from given arguments.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple.Create``1(``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0)">
            <summary>
              Creates a new tuple built from given arguments.
            </summary>
            <param name="item1">Item 1.</param>
            <param name="item2">Item 2.</param>
            <param name="item3">Item 3.</param>
            <param name="item4">Item 4.</param>
            <param name="item5">Item 5.</param>
            <param name="item6">Item 6.</param>
            <param name="item7">Item 7.</param>
            <param name="item8">Item 8.</param>
            <param name="item9">Item 9.</param>
            <param name="item10">Item 10.</param>
            <param name="item11">Item 11.</param>
            <param name="item12">Item 12.</param>
            <returns>A new tuple built from given arguments.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple.Create``1(``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0)">
            <summary>
              Creates a new tuple built from given arguments.
            </summary>
            <param name="item1">Item 1.</param>
            <param name="item2">Item 2.</param>
            <param name="item3">Item 3.</param>
            <param name="item4">Item 4.</param>
            <param name="item5">Item 5.</param>
            <param name="item6">Item 6.</param>
            <param name="item7">Item 7.</param>
            <param name="item8">Item 8.</param>
            <param name="item9">Item 9.</param>
            <param name="item10">Item 10.</param>
            <param name="item11">Item 11.</param>
            <param name="item12">Item 12.</param>
            <param name="item13">Item 13.</param>
            <returns>A new tuple built from given arguments.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple.Create``1(``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0)">
            <summary>
              Creates a new tuple built from given arguments.
            </summary>
            <param name="item1">Item 1.</param>
            <param name="item2">Item 2.</param>
            <param name="item3">Item 3.</param>
            <param name="item4">Item 4.</param>
            <param name="item5">Item 5.</param>
            <param name="item6">Item 6.</param>
            <param name="item7">Item 7.</param>
            <param name="item8">Item 8.</param>
            <param name="item9">Item 9.</param>
            <param name="item10">Item 10.</param>
            <param name="item11">Item 11.</param>
            <param name="item12">Item 12.</param>
            <param name="item13">Item 13.</param>
            <param name="item14">Item 14.</param>
            <returns>A new tuple built from given arguments.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple.Create``1(``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0)">
            <summary>
              Creates a new tuple built from given arguments.
            </summary>
            <param name="item1">Item 1.</param>
            <param name="item2">Item 2.</param>
            <param name="item3">Item 3.</param>
            <param name="item4">Item 4.</param>
            <param name="item5">Item 5.</param>
            <param name="item6">Item 6.</param>
            <param name="item7">Item 7.</param>
            <param name="item8">Item 8.</param>
            <param name="item9">Item 9.</param>
            <param name="item10">Item 10.</param>
            <param name="item11">Item 11.</param>
            <param name="item12">Item 12.</param>
            <param name="item13">Item 13.</param>
            <param name="item14">Item 14.</param>
            <param name="item15">Item 15.</param>
            <returns>A new tuple built from given arguments.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple.Create``1(``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0)">
            <summary>
              Creates a new tuple built from given arguments.
            </summary>
            <param name="item1">Item 1.</param>
            <param name="item2">Item 2.</param>
            <param name="item3">Item 3.</param>
            <param name="item4">Item 4.</param>
            <param name="item5">Item 5.</param>
            <param name="item6">Item 6.</param>
            <param name="item7">Item 7.</param>
            <param name="item8">Item 8.</param>
            <param name="item9">Item 9.</param>
            <param name="item10">Item 10.</param>
            <param name="item11">Item 11.</param>
            <param name="item12">Item 12.</param>
            <param name="item13">Item 13.</param>
            <param name="item14">Item 14.</param>
            <param name="item15">Item 15.</param>
            <param name="item16">Item 16.</param>
            <returns>A new tuple built from given arguments.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple.Create``1(``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0)">
            <summary>
              Creates a new tuple built from given arguments.
            </summary>
            <param name="item1">Item 1.</param>
            <param name="item2">Item 2.</param>
            <param name="item3">Item 3.</param>
            <param name="item4">Item 4.</param>
            <param name="item5">Item 5.</param>
            <param name="item6">Item 6.</param>
            <param name="item7">Item 7.</param>
            <param name="item8">Item 8.</param>
            <param name="item9">Item 9.</param>
            <param name="item10">Item 10.</param>
            <param name="item11">Item 11.</param>
            <param name="item12">Item 12.</param>
            <param name="item13">Item 13.</param>
            <param name="item14">Item 14.</param>
            <param name="item15">Item 15.</param>
            <param name="item16">Item 16.</param>
            <param name="item17">Item 17.</param>
            <returns>A new tuple built from given arguments.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple.Create``1(``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0)">
            <summary>
              Creates a new tuple built from given arguments.
            </summary>
            <param name="item1">Item 1.</param>
            <param name="item2">Item 2.</param>
            <param name="item3">Item 3.</param>
            <param name="item4">Item 4.</param>
            <param name="item5">Item 5.</param>
            <param name="item6">Item 6.</param>
            <param name="item7">Item 7.</param>
            <param name="item8">Item 8.</param>
            <param name="item9">Item 9.</param>
            <param name="item10">Item 10.</param>
            <param name="item11">Item 11.</param>
            <param name="item12">Item 12.</param>
            <param name="item13">Item 13.</param>
            <param name="item14">Item 14.</param>
            <param name="item15">Item 15.</param>
            <param name="item16">Item 16.</param>
            <param name="item17">Item 17.</param>
            <param name="item18">Item 18.</param>
            <returns>A new tuple built from given arguments.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple.Create``1(``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0)">
            <summary>
              Creates a new tuple built from given arguments.
            </summary>
            <param name="item1">Item 1.</param>
            <param name="item2">Item 2.</param>
            <param name="item3">Item 3.</param>
            <param name="item4">Item 4.</param>
            <param name="item5">Item 5.</param>
            <param name="item6">Item 6.</param>
            <param name="item7">Item 7.</param>
            <param name="item8">Item 8.</param>
            <param name="item9">Item 9.</param>
            <param name="item10">Item 10.</param>
            <param name="item11">Item 11.</param>
            <param name="item12">Item 12.</param>
            <param name="item13">Item 13.</param>
            <param name="item14">Item 14.</param>
            <param name="item15">Item 15.</param>
            <param name="item16">Item 16.</param>
            <param name="item17">Item 17.</param>
            <param name="item18">Item 18.</param>
            <param name="item19">Item 19.</param>
            <returns>A new tuple built from given arguments.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple.Create``1(``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0)">
            <summary>
              Creates a new tuple built from given arguments.
            </summary>
            <param name="item1">Item 1.</param>
            <param name="item2">Item 2.</param>
            <param name="item3">Item 3.</param>
            <param name="item4">Item 4.</param>
            <param name="item5">Item 5.</param>
            <param name="item6">Item 6.</param>
            <param name="item7">Item 7.</param>
            <param name="item8">Item 8.</param>
            <param name="item9">Item 9.</param>
            <param name="item10">Item 10.</param>
            <param name="item11">Item 11.</param>
            <param name="item12">Item 12.</param>
            <param name="item13">Item 13.</param>
            <param name="item14">Item 14.</param>
            <param name="item15">Item 15.</param>
            <param name="item16">Item 16.</param>
            <param name="item17">Item 17.</param>
            <param name="item18">Item 18.</param>
            <param name="item19">Item 19.</param>
            <param name="item20">Item 20.</param>
            <returns>A new tuple built from given arguments.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple.Create``1(``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0)">
            <summary>
              Creates a new tuple built from given arguments.
            </summary>
            <param name="item1">Item 1.</param>
            <param name="item2">Item 2.</param>
            <param name="item3">Item 3.</param>
            <param name="item4">Item 4.</param>
            <param name="item5">Item 5.</param>
            <param name="item6">Item 6.</param>
            <param name="item7">Item 7.</param>
            <param name="item8">Item 8.</param>
            <param name="item9">Item 9.</param>
            <param name="item10">Item 10.</param>
            <param name="item11">Item 11.</param>
            <param name="item12">Item 12.</param>
            <param name="item13">Item 13.</param>
            <param name="item14">Item 14.</param>
            <param name="item15">Item 15.</param>
            <param name="item16">Item 16.</param>
            <param name="item17">Item 17.</param>
            <param name="item18">Item 18.</param>
            <param name="item19">Item 19.</param>
            <param name="item20">Item 20.</param>
            <param name="item21">Item 21.</param>
            <returns>A new tuple built from given arguments.</returns>
        </member>
        <member name="T:Finsa.CodeServices.Common.ITuple">
            <summary>
              Represents a simple tuple where items have different types.
            </summary>
        </member>
        <member name="T:Finsa.CodeServices.Common.ITuple`1">
            <summary>
              Represents a simple tuple where items have the same type,
              or a common ancestor which is not necessarily <see cref="T:System.Object"/>.
            </summary>
        </member>
        <member name="T:Finsa.CodeServices.Common.AbstractGTuple`1">
            <summary>
              Base class for tuples where items have different types.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.AbstractGTuple`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.AbstractGTuple`1.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.AbstractGTuple`1.Add(System.Object)">
            <summary>
              Not implemented, it is not possible to add an item to the tuple.
            </summary>
            <param name="item">Ignored.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.AbstractGTuple`1.Clear">
            <summary>
              Not implemented, it is not possible to "clear" the tuple.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.AbstractGTuple`1.Contains(System.Object)">
            <summary>
              Determines whether the tuple contains a specific value.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>True if item is found in the tuple; otherwise, false.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.AbstractGTuple`1.CopyTo(System.Object[],System.Int32)">
            <summary>
              Copies the elements of the tuple to an <see cref="T:System.Array"/>,
              starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
              The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied
              from the tuple. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.AbstractGTuple`1.Remove(System.Object)">
            <summary>
              Not implemented, it is not possible to remove an item from the tuple.
            </summary>
            <param name="item">Ignored.</param>
        </member>
        <member name="P:Finsa.CodeServices.Common.AbstractGTuple`1.Count">
            <summary>
              The number of elements contained in the tuple.
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.AbstractGTuple`1.IsReadOnly">
            <summary>
              Tuples can be modified, therefore this property always returns false.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.AbstractGTuple`1.IndexOf(System.Object)">
            <summary>
              Determines the index of a specific item in the tuple.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>The index of item if found in the tuple; otherwise, -1.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.AbstractGTuple`1.Insert(System.Int32,System.Object)">
            <summary>
              Not implemented, it is not possible to add an item to the tuple.
            </summary>
            <param name="index">Ignored.</param>
            <param name="item">Ignored.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.AbstractGTuple`1.RemoveAt(System.Int32)">
            <summary>
              Not implemented, it is not possible to remove an item from the tuple.
            </summary>
            <param name="index">Ignored.</param>
        </member>
        <member name="P:Finsa.CodeServices.Common.AbstractGTuple`1.Item(System.Int32)">
            <summary>
              Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="T:Finsa.CodeServices.Common.AbstractGTuple`2">
            <summary>
              Base class for tuples where items have the same type,
              or a common ancestor which is not <see cref="T:System.Object"/>.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.AbstractGTuple`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.AbstractGTuple`2.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.AbstractGTuple`2.Add(`1)">
            <summary>
              Not implemented, it is not possible to add an item to the tuple.
            </summary>
            <param name="item">Ignored.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.AbstractGTuple`2.Clear">
            <summary>
              Not implemented, it is not possible to "clear" the tuple.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.AbstractGTuple`2.Contains(`1)">
            <summary>
              Determines whether the tuple contains a specific value.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>True if item is found in the tuple; otherwise, false.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.AbstractGTuple`2.CopyTo(`1[],System.Int32)">
            <summary>
              Copies the elements of the tuple to an <see cref="T:System.Array"/>,
              starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
              The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied
              from the tuple. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.AbstractGTuple`2.Remove(`1)">
            <summary>
              Not implemented, it is not possible to remove an item from the tuple.
            </summary>
            <param name="item">Ignored.</param>
        </member>
        <member name="P:Finsa.CodeServices.Common.AbstractGTuple`2.Count">
            <summary>
              The number of elements contained in the tuple.
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.AbstractGTuple`2.IsReadOnly">
            <summary>
              Tuples can be modified, therefore this property always returns false.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.AbstractGTuple`2.IndexOf(`1)">
            <summary>
              Determines the index of a specific item in the tuple.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>The index of item if found in the tuple; otherwise, -1.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.AbstractGTuple`2.Insert(System.Int32,`1)">
            <summary>
              Not implemented, it is not possible to add an item to the tuple.
            </summary>
            <param name="index">Ignored.</param>
            <param name="item">Ignored.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.AbstractGTuple`2.RemoveAt(System.Int32)">
            <summary>
              Not implemented, it is not possible to remove an item from the tuple.
            </summary>
            <param name="index">Ignored.</param>
        </member>
        <member name="P:Finsa.CodeServices.Common.AbstractGTuple`2.Item(System.Int32)">
            <summary>
              Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="T:Finsa.CodeServices.Common.GTuple0`1">
            <summary>
              Represents an empty tuple.
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple0`1.Instance">
            <summary>
              Static instance of the empty tuple.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple0`1.GetFormattingMembers">
            <summary>
              Gets members used to implement ToString.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple0`1.GetIdentifyingMembers">
            <summary>
              Gets members used to implement Equals.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple0`1.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple0`1.Contains(`0)">
            <summary>
              Determines whether the tuple contains a specific value.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>True if item is found in the tuple; otherwise, false.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple0`1.CopyTo(`0[],System.Int32)">
            <summary>
              Copies the elements of the tuple to an <see cref="T:System.Array"/>,
              starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
              The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied
              from the tuple. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple0`1.Count">
            <summary>
              The number of elements contained in the tuple.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple0`1.IndexOf(`0)">
            <summary>
              Determines the index of a specific item in the tuple.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>The index of item if found in the tuple; otherwise, -1.</returns>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple0`1.Item(System.Int32)">
            <summary>
              Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="T:Finsa.CodeServices.Common.GTuple1`1">
            <summary>
              Represents a simple tuple.
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple1`1.Item1">
            <summary>
              Gets or sets the item at position 1.
            </summary>
            <value>The item at position 1.</value>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple1`1.GetFormattingMembers">
            <summary>
              Gets members used to implement ToString.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple1`1.GetIdentifyingMembers">
            <summary>
              Gets members used to implement Equals.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple1`1.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple1`1.Contains(`0)">
            <summary>
              Determines whether the tuple contains a specific value.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>True if item is found in the tuple; otherwise, false.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple1`1.CopyTo(`0[],System.Int32)">
            <summary>
              Copies the elements of the tuple to an <see cref="T:System.Array"/>,
              starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
              The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied
              from the tuple. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple1`1.Count">
            <summary>
              The number of elements contained in the tuple.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple1`1.IndexOf(`0)">
            <summary>
              Determines the index of a specific item in the tuple.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>The index of item if found in the tuple; otherwise, -1.</returns>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple1`1.Item(System.Int32)">
            <summary>
              Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="T:Finsa.CodeServices.Common.GTuple2`2">
            <summary>
              Represents a simple tuple.
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple2`2.Item1">
            <summary>
              Gets or sets the item at position 1.
            </summary>
            <value>The item at position 1.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple2`2.Item2">
            <summary>
              Gets or sets the item at position 2.
            </summary>
            <value>The item at position 2.</value>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple2`2.GetFormattingMembers">
            <summary>
              Gets members used to implement ToString.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple2`2.GetIdentifyingMembers">
            <summary>
              Gets members used to implement Equals.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple2`2.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple2`2.Contains(System.Object)">
            <summary>
              Determines whether the tuple contains a specific value.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>True if item is found in the tuple; otherwise, false.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple2`2.CopyTo(System.Object[],System.Int32)">
            <summary>
              Copies the elements of the tuple to an <see cref="T:System.Array"/>,
              starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
              The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied
              from the tuple. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple2`2.Count">
            <summary>
              The number of elements contained in the tuple.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple2`2.IndexOf(System.Object)">
            <summary>
              Determines the index of a specific item in the tuple.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>The index of item if found in the tuple; otherwise, -1.</returns>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple2`2.Item(System.Int32)">
            <summary>
              Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="T:Finsa.CodeServices.Common.GTuple2`1">
            <summary>
              Represents a simple tuple.
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple2`1.Item1">
            <summary>
              Gets or sets the item at position 1.
            </summary>
            <value>The item at position 1.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple2`1.Item2">
            <summary>
              Gets or sets the item at position 2.
            </summary>
            <value>The item at position 2.</value>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple2`1.GetFormattingMembers">
            <summary>
              Gets members used to implement ToString.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple2`1.GetIdentifyingMembers">
            <summary>
              Gets members used to implement Equals.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple2`1.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple2`1.Contains(`0)">
            <summary>
              Determines whether the tuple contains a specific value.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>True if item is found in the tuple; otherwise, false.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple2`1.CopyTo(`0[],System.Int32)">
            <summary>
              Copies the elements of the tuple to an <see cref="T:System.Array"/>,
              starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
              The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied
              from the tuple. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple2`1.Count">
            <summary>
              The number of elements contained in the tuple.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple2`1.IndexOf(`0)">
            <summary>
              Determines the index of a specific item in the tuple.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>The index of item if found in the tuple; otherwise, -1.</returns>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple2`1.Item(System.Int32)">
            <summary>
              Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="T:Finsa.CodeServices.Common.GTuple3`3">
            <summary>
              Represents a simple tuple.
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple3`3.Item1">
            <summary>
              Gets or sets the item at position 1.
            </summary>
            <value>The item at position 1.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple3`3.Item2">
            <summary>
              Gets or sets the item at position 2.
            </summary>
            <value>The item at position 2.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple3`3.Item3">
            <summary>
              Gets or sets the item at position 3.
            </summary>
            <value>The item at position 3.</value>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple3`3.GetFormattingMembers">
            <summary>
              Gets members used to implement ToString.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple3`3.GetIdentifyingMembers">
            <summary>
              Gets members used to implement Equals.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple3`3.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple3`3.Contains(System.Object)">
            <summary>
              Determines whether the tuple contains a specific value.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>True if item is found in the tuple; otherwise, false.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple3`3.CopyTo(System.Object[],System.Int32)">
            <summary>
              Copies the elements of the tuple to an <see cref="T:System.Array"/>,
              starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
              The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied
              from the tuple. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple3`3.Count">
            <summary>
              The number of elements contained in the tuple.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple3`3.IndexOf(System.Object)">
            <summary>
              Determines the index of a specific item in the tuple.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>The index of item if found in the tuple; otherwise, -1.</returns>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple3`3.Item(System.Int32)">
            <summary>
              Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="T:Finsa.CodeServices.Common.GTuple3`1">
            <summary>
              Represents a simple tuple.
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple3`1.Item1">
            <summary>
              Gets or sets the item at position 1.
            </summary>
            <value>The item at position 1.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple3`1.Item2">
            <summary>
              Gets or sets the item at position 2.
            </summary>
            <value>The item at position 2.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple3`1.Item3">
            <summary>
              Gets or sets the item at position 3.
            </summary>
            <value>The item at position 3.</value>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple3`1.GetFormattingMembers">
            <summary>
              Gets members used to implement ToString.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple3`1.GetIdentifyingMembers">
            <summary>
              Gets members used to implement Equals.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple3`1.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple3`1.Contains(`0)">
            <summary>
              Determines whether the tuple contains a specific value.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>True if item is found in the tuple; otherwise, false.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple3`1.CopyTo(`0[],System.Int32)">
            <summary>
              Copies the elements of the tuple to an <see cref="T:System.Array"/>,
              starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
              The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied
              from the tuple. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple3`1.Count">
            <summary>
              The number of elements contained in the tuple.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple3`1.IndexOf(`0)">
            <summary>
              Determines the index of a specific item in the tuple.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>The index of item if found in the tuple; otherwise, -1.</returns>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple3`1.Item(System.Int32)">
            <summary>
              Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="T:Finsa.CodeServices.Common.GTuple4`4">
            <summary>
              Represents a simple tuple.
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple4`4.Item1">
            <summary>
              Gets or sets the item at position 1.
            </summary>
            <value>The item at position 1.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple4`4.Item2">
            <summary>
              Gets or sets the item at position 2.
            </summary>
            <value>The item at position 2.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple4`4.Item3">
            <summary>
              Gets or sets the item at position 3.
            </summary>
            <value>The item at position 3.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple4`4.Item4">
            <summary>
              Gets or sets the item at position 4.
            </summary>
            <value>The item at position 4.</value>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple4`4.GetFormattingMembers">
            <summary>
              Gets members used to implement ToString.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple4`4.GetIdentifyingMembers">
            <summary>
              Gets members used to implement Equals.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple4`4.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple4`4.Contains(System.Object)">
            <summary>
              Determines whether the tuple contains a specific value.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>True if item is found in the tuple; otherwise, false.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple4`4.CopyTo(System.Object[],System.Int32)">
            <summary>
              Copies the elements of the tuple to an <see cref="T:System.Array"/>,
              starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
              The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied
              from the tuple. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple4`4.Count">
            <summary>
              The number of elements contained in the tuple.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple4`4.IndexOf(System.Object)">
            <summary>
              Determines the index of a specific item in the tuple.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>The index of item if found in the tuple; otherwise, -1.</returns>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple4`4.Item(System.Int32)">
            <summary>
              Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="T:Finsa.CodeServices.Common.GTuple4`1">
            <summary>
              Represents a simple tuple.
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple4`1.Item1">
            <summary>
              Gets or sets the item at position 1.
            </summary>
            <value>The item at position 1.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple4`1.Item2">
            <summary>
              Gets or sets the item at position 2.
            </summary>
            <value>The item at position 2.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple4`1.Item3">
            <summary>
              Gets or sets the item at position 3.
            </summary>
            <value>The item at position 3.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple4`1.Item4">
            <summary>
              Gets or sets the item at position 4.
            </summary>
            <value>The item at position 4.</value>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple4`1.GetFormattingMembers">
            <summary>
              Gets members used to implement ToString.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple4`1.GetIdentifyingMembers">
            <summary>
              Gets members used to implement Equals.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple4`1.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple4`1.Contains(`0)">
            <summary>
              Determines whether the tuple contains a specific value.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>True if item is found in the tuple; otherwise, false.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple4`1.CopyTo(`0[],System.Int32)">
            <summary>
              Copies the elements of the tuple to an <see cref="T:System.Array"/>,
              starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
              The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied
              from the tuple. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple4`1.Count">
            <summary>
              The number of elements contained in the tuple.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple4`1.IndexOf(`0)">
            <summary>
              Determines the index of a specific item in the tuple.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>The index of item if found in the tuple; otherwise, -1.</returns>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple4`1.Item(System.Int32)">
            <summary>
              Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="T:Finsa.CodeServices.Common.GTuple5`5">
            <summary>
              Represents a simple tuple.
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple5`5.Item1">
            <summary>
              Gets or sets the item at position 1.
            </summary>
            <value>The item at position 1.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple5`5.Item2">
            <summary>
              Gets or sets the item at position 2.
            </summary>
            <value>The item at position 2.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple5`5.Item3">
            <summary>
              Gets or sets the item at position 3.
            </summary>
            <value>The item at position 3.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple5`5.Item4">
            <summary>
              Gets or sets the item at position 4.
            </summary>
            <value>The item at position 4.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple5`5.Item5">
            <summary>
              Gets or sets the item at position 5.
            </summary>
            <value>The item at position 5.</value>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple5`5.GetFormattingMembers">
            <summary>
              Gets members used to implement ToString.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple5`5.GetIdentifyingMembers">
            <summary>
              Gets members used to implement Equals.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple5`5.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple5`5.Contains(System.Object)">
            <summary>
              Determines whether the tuple contains a specific value.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>True if item is found in the tuple; otherwise, false.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple5`5.CopyTo(System.Object[],System.Int32)">
            <summary>
              Copies the elements of the tuple to an <see cref="T:System.Array"/>,
              starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
              The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied
              from the tuple. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple5`5.Count">
            <summary>
              The number of elements contained in the tuple.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple5`5.IndexOf(System.Object)">
            <summary>
              Determines the index of a specific item in the tuple.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>The index of item if found in the tuple; otherwise, -1.</returns>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple5`5.Item(System.Int32)">
            <summary>
              Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="T:Finsa.CodeServices.Common.GTuple5`1">
            <summary>
              Represents a simple tuple.
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple5`1.Item1">
            <summary>
              Gets or sets the item at position 1.
            </summary>
            <value>The item at position 1.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple5`1.Item2">
            <summary>
              Gets or sets the item at position 2.
            </summary>
            <value>The item at position 2.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple5`1.Item3">
            <summary>
              Gets or sets the item at position 3.
            </summary>
            <value>The item at position 3.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple5`1.Item4">
            <summary>
              Gets or sets the item at position 4.
            </summary>
            <value>The item at position 4.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple5`1.Item5">
            <summary>
              Gets or sets the item at position 5.
            </summary>
            <value>The item at position 5.</value>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple5`1.GetFormattingMembers">
            <summary>
              Gets members used to implement ToString.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple5`1.GetIdentifyingMembers">
            <summary>
              Gets members used to implement Equals.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple5`1.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple5`1.Contains(`0)">
            <summary>
              Determines whether the tuple contains a specific value.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>True if item is found in the tuple; otherwise, false.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple5`1.CopyTo(`0[],System.Int32)">
            <summary>
              Copies the elements of the tuple to an <see cref="T:System.Array"/>,
              starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
              The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied
              from the tuple. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple5`1.Count">
            <summary>
              The number of elements contained in the tuple.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple5`1.IndexOf(`0)">
            <summary>
              Determines the index of a specific item in the tuple.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>The index of item if found in the tuple; otherwise, -1.</returns>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple5`1.Item(System.Int32)">
            <summary>
              Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="T:Finsa.CodeServices.Common.GTuple6`6">
            <summary>
              Represents a simple tuple.
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple6`6.Item1">
            <summary>
              Gets or sets the item at position 1.
            </summary>
            <value>The item at position 1.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple6`6.Item2">
            <summary>
              Gets or sets the item at position 2.
            </summary>
            <value>The item at position 2.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple6`6.Item3">
            <summary>
              Gets or sets the item at position 3.
            </summary>
            <value>The item at position 3.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple6`6.Item4">
            <summary>
              Gets or sets the item at position 4.
            </summary>
            <value>The item at position 4.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple6`6.Item5">
            <summary>
              Gets or sets the item at position 5.
            </summary>
            <value>The item at position 5.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple6`6.Item6">
            <summary>
              Gets or sets the item at position 6.
            </summary>
            <value>The item at position 6.</value>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple6`6.GetFormattingMembers">
            <summary>
              Gets members used to implement ToString.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple6`6.GetIdentifyingMembers">
            <summary>
              Gets members used to implement Equals.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple6`6.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple6`6.Contains(System.Object)">
            <summary>
              Determines whether the tuple contains a specific value.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>True if item is found in the tuple; otherwise, false.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple6`6.CopyTo(System.Object[],System.Int32)">
            <summary>
              Copies the elements of the tuple to an <see cref="T:System.Array"/>,
              starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
              The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied
              from the tuple. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple6`6.Count">
            <summary>
              The number of elements contained in the tuple.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple6`6.IndexOf(System.Object)">
            <summary>
              Determines the index of a specific item in the tuple.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>The index of item if found in the tuple; otherwise, -1.</returns>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple6`6.Item(System.Int32)">
            <summary>
              Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="T:Finsa.CodeServices.Common.GTuple6`1">
            <summary>
              Represents a simple tuple.
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple6`1.Item1">
            <summary>
              Gets or sets the item at position 1.
            </summary>
            <value>The item at position 1.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple6`1.Item2">
            <summary>
              Gets or sets the item at position 2.
            </summary>
            <value>The item at position 2.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple6`1.Item3">
            <summary>
              Gets or sets the item at position 3.
            </summary>
            <value>The item at position 3.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple6`1.Item4">
            <summary>
              Gets or sets the item at position 4.
            </summary>
            <value>The item at position 4.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple6`1.Item5">
            <summary>
              Gets or sets the item at position 5.
            </summary>
            <value>The item at position 5.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple6`1.Item6">
            <summary>
              Gets or sets the item at position 6.
            </summary>
            <value>The item at position 6.</value>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple6`1.GetFormattingMembers">
            <summary>
              Gets members used to implement ToString.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple6`1.GetIdentifyingMembers">
            <summary>
              Gets members used to implement Equals.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple6`1.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple6`1.Contains(`0)">
            <summary>
              Determines whether the tuple contains a specific value.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>True if item is found in the tuple; otherwise, false.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple6`1.CopyTo(`0[],System.Int32)">
            <summary>
              Copies the elements of the tuple to an <see cref="T:System.Array"/>,
              starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
              The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied
              from the tuple. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple6`1.Count">
            <summary>
              The number of elements contained in the tuple.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple6`1.IndexOf(`0)">
            <summary>
              Determines the index of a specific item in the tuple.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>The index of item if found in the tuple; otherwise, -1.</returns>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple6`1.Item(System.Int32)">
            <summary>
              Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="T:Finsa.CodeServices.Common.GTuple7`7">
            <summary>
              Represents a simple tuple.
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple7`7.Item1">
            <summary>
              Gets or sets the item at position 1.
            </summary>
            <value>The item at position 1.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple7`7.Item2">
            <summary>
              Gets or sets the item at position 2.
            </summary>
            <value>The item at position 2.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple7`7.Item3">
            <summary>
              Gets or sets the item at position 3.
            </summary>
            <value>The item at position 3.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple7`7.Item4">
            <summary>
              Gets or sets the item at position 4.
            </summary>
            <value>The item at position 4.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple7`7.Item5">
            <summary>
              Gets or sets the item at position 5.
            </summary>
            <value>The item at position 5.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple7`7.Item6">
            <summary>
              Gets or sets the item at position 6.
            </summary>
            <value>The item at position 6.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple7`7.Item7">
            <summary>
              Gets or sets the item at position 7.
            </summary>
            <value>The item at position 7.</value>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple7`7.GetFormattingMembers">
            <summary>
              Gets members used to implement ToString.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple7`7.GetIdentifyingMembers">
            <summary>
              Gets members used to implement Equals.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple7`7.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple7`7.Contains(System.Object)">
            <summary>
              Determines whether the tuple contains a specific value.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>True if item is found in the tuple; otherwise, false.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple7`7.CopyTo(System.Object[],System.Int32)">
            <summary>
              Copies the elements of the tuple to an <see cref="T:System.Array"/>,
              starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
              The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied
              from the tuple. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple7`7.Count">
            <summary>
              The number of elements contained in the tuple.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple7`7.IndexOf(System.Object)">
            <summary>
              Determines the index of a specific item in the tuple.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>The index of item if found in the tuple; otherwise, -1.</returns>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple7`7.Item(System.Int32)">
            <summary>
              Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="T:Finsa.CodeServices.Common.GTuple7`1">
            <summary>
              Represents a simple tuple.
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple7`1.Item1">
            <summary>
              Gets or sets the item at position 1.
            </summary>
            <value>The item at position 1.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple7`1.Item2">
            <summary>
              Gets or sets the item at position 2.
            </summary>
            <value>The item at position 2.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple7`1.Item3">
            <summary>
              Gets or sets the item at position 3.
            </summary>
            <value>The item at position 3.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple7`1.Item4">
            <summary>
              Gets or sets the item at position 4.
            </summary>
            <value>The item at position 4.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple7`1.Item5">
            <summary>
              Gets or sets the item at position 5.
            </summary>
            <value>The item at position 5.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple7`1.Item6">
            <summary>
              Gets or sets the item at position 6.
            </summary>
            <value>The item at position 6.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple7`1.Item7">
            <summary>
              Gets or sets the item at position 7.
            </summary>
            <value>The item at position 7.</value>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple7`1.GetFormattingMembers">
            <summary>
              Gets members used to implement ToString.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple7`1.GetIdentifyingMembers">
            <summary>
              Gets members used to implement Equals.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple7`1.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple7`1.Contains(`0)">
            <summary>
              Determines whether the tuple contains a specific value.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>True if item is found in the tuple; otherwise, false.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple7`1.CopyTo(`0[],System.Int32)">
            <summary>
              Copies the elements of the tuple to an <see cref="T:System.Array"/>,
              starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
              The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied
              from the tuple. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple7`1.Count">
            <summary>
              The number of elements contained in the tuple.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple7`1.IndexOf(`0)">
            <summary>
              Determines the index of a specific item in the tuple.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>The index of item if found in the tuple; otherwise, -1.</returns>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple7`1.Item(System.Int32)">
            <summary>
              Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="T:Finsa.CodeServices.Common.GTuple8`8">
            <summary>
              Represents a simple tuple.
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple8`8.Item1">
            <summary>
              Gets or sets the item at position 1.
            </summary>
            <value>The item at position 1.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple8`8.Item2">
            <summary>
              Gets or sets the item at position 2.
            </summary>
            <value>The item at position 2.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple8`8.Item3">
            <summary>
              Gets or sets the item at position 3.
            </summary>
            <value>The item at position 3.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple8`8.Item4">
            <summary>
              Gets or sets the item at position 4.
            </summary>
            <value>The item at position 4.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple8`8.Item5">
            <summary>
              Gets or sets the item at position 5.
            </summary>
            <value>The item at position 5.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple8`8.Item6">
            <summary>
              Gets or sets the item at position 6.
            </summary>
            <value>The item at position 6.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple8`8.Item7">
            <summary>
              Gets or sets the item at position 7.
            </summary>
            <value>The item at position 7.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple8`8.Item8">
            <summary>
              Gets or sets the item at position 8.
            </summary>
            <value>The item at position 8.</value>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple8`8.GetFormattingMembers">
            <summary>
              Gets members used to implement ToString.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple8`8.GetIdentifyingMembers">
            <summary>
              Gets members used to implement Equals.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple8`8.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple8`8.Contains(System.Object)">
            <summary>
              Determines whether the tuple contains a specific value.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>True if item is found in the tuple; otherwise, false.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple8`8.CopyTo(System.Object[],System.Int32)">
            <summary>
              Copies the elements of the tuple to an <see cref="T:System.Array"/>,
              starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
              The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied
              from the tuple. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple8`8.Count">
            <summary>
              The number of elements contained in the tuple.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple8`8.IndexOf(System.Object)">
            <summary>
              Determines the index of a specific item in the tuple.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>The index of item if found in the tuple; otherwise, -1.</returns>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple8`8.Item(System.Int32)">
            <summary>
              Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="T:Finsa.CodeServices.Common.GTuple8`1">
            <summary>
              Represents a simple tuple.
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple8`1.Item1">
            <summary>
              Gets or sets the item at position 1.
            </summary>
            <value>The item at position 1.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple8`1.Item2">
            <summary>
              Gets or sets the item at position 2.
            </summary>
            <value>The item at position 2.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple8`1.Item3">
            <summary>
              Gets or sets the item at position 3.
            </summary>
            <value>The item at position 3.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple8`1.Item4">
            <summary>
              Gets or sets the item at position 4.
            </summary>
            <value>The item at position 4.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple8`1.Item5">
            <summary>
              Gets or sets the item at position 5.
            </summary>
            <value>The item at position 5.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple8`1.Item6">
            <summary>
              Gets or sets the item at position 6.
            </summary>
            <value>The item at position 6.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple8`1.Item7">
            <summary>
              Gets or sets the item at position 7.
            </summary>
            <value>The item at position 7.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple8`1.Item8">
            <summary>
              Gets or sets the item at position 8.
            </summary>
            <value>The item at position 8.</value>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple8`1.GetFormattingMembers">
            <summary>
              Gets members used to implement ToString.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple8`1.GetIdentifyingMembers">
            <summary>
              Gets members used to implement Equals.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple8`1.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple8`1.Contains(`0)">
            <summary>
              Determines whether the tuple contains a specific value.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>True if item is found in the tuple; otherwise, false.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple8`1.CopyTo(`0[],System.Int32)">
            <summary>
              Copies the elements of the tuple to an <see cref="T:System.Array"/>,
              starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
              The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied
              from the tuple. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple8`1.Count">
            <summary>
              The number of elements contained in the tuple.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple8`1.IndexOf(`0)">
            <summary>
              Determines the index of a specific item in the tuple.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>The index of item if found in the tuple; otherwise, -1.</returns>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple8`1.Item(System.Int32)">
            <summary>
              Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="T:Finsa.CodeServices.Common.GTuple9`9">
            <summary>
              Represents a simple tuple.
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple9`9.Item1">
            <summary>
              Gets or sets the item at position 1.
            </summary>
            <value>The item at position 1.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple9`9.Item2">
            <summary>
              Gets or sets the item at position 2.
            </summary>
            <value>The item at position 2.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple9`9.Item3">
            <summary>
              Gets or sets the item at position 3.
            </summary>
            <value>The item at position 3.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple9`9.Item4">
            <summary>
              Gets or sets the item at position 4.
            </summary>
            <value>The item at position 4.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple9`9.Item5">
            <summary>
              Gets or sets the item at position 5.
            </summary>
            <value>The item at position 5.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple9`9.Item6">
            <summary>
              Gets or sets the item at position 6.
            </summary>
            <value>The item at position 6.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple9`9.Item7">
            <summary>
              Gets or sets the item at position 7.
            </summary>
            <value>The item at position 7.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple9`9.Item8">
            <summary>
              Gets or sets the item at position 8.
            </summary>
            <value>The item at position 8.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple9`9.Item9">
            <summary>
              Gets or sets the item at position 9.
            </summary>
            <value>The item at position 9.</value>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple9`9.GetFormattingMembers">
            <summary>
              Gets members used to implement ToString.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple9`9.GetIdentifyingMembers">
            <summary>
              Gets members used to implement Equals.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple9`9.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple9`9.Contains(System.Object)">
            <summary>
              Determines whether the tuple contains a specific value.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>True if item is found in the tuple; otherwise, false.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple9`9.CopyTo(System.Object[],System.Int32)">
            <summary>
              Copies the elements of the tuple to an <see cref="T:System.Array"/>,
              starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
              The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied
              from the tuple. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple9`9.Count">
            <summary>
              The number of elements contained in the tuple.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple9`9.IndexOf(System.Object)">
            <summary>
              Determines the index of a specific item in the tuple.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>The index of item if found in the tuple; otherwise, -1.</returns>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple9`9.Item(System.Int32)">
            <summary>
              Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="T:Finsa.CodeServices.Common.GTuple9`1">
            <summary>
              Represents a simple tuple.
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple9`1.Item1">
            <summary>
              Gets or sets the item at position 1.
            </summary>
            <value>The item at position 1.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple9`1.Item2">
            <summary>
              Gets or sets the item at position 2.
            </summary>
            <value>The item at position 2.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple9`1.Item3">
            <summary>
              Gets or sets the item at position 3.
            </summary>
            <value>The item at position 3.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple9`1.Item4">
            <summary>
              Gets or sets the item at position 4.
            </summary>
            <value>The item at position 4.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple9`1.Item5">
            <summary>
              Gets or sets the item at position 5.
            </summary>
            <value>The item at position 5.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple9`1.Item6">
            <summary>
              Gets or sets the item at position 6.
            </summary>
            <value>The item at position 6.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple9`1.Item7">
            <summary>
              Gets or sets the item at position 7.
            </summary>
            <value>The item at position 7.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple9`1.Item8">
            <summary>
              Gets or sets the item at position 8.
            </summary>
            <value>The item at position 8.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple9`1.Item9">
            <summary>
              Gets or sets the item at position 9.
            </summary>
            <value>The item at position 9.</value>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple9`1.GetFormattingMembers">
            <summary>
              Gets members used to implement ToString.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple9`1.GetIdentifyingMembers">
            <summary>
              Gets members used to implement Equals.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple9`1.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple9`1.Contains(`0)">
            <summary>
              Determines whether the tuple contains a specific value.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>True if item is found in the tuple; otherwise, false.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple9`1.CopyTo(`0[],System.Int32)">
            <summary>
              Copies the elements of the tuple to an <see cref="T:System.Array"/>,
              starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
              The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied
              from the tuple. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple9`1.Count">
            <summary>
              The number of elements contained in the tuple.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple9`1.IndexOf(`0)">
            <summary>
              Determines the index of a specific item in the tuple.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>The index of item if found in the tuple; otherwise, -1.</returns>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple9`1.Item(System.Int32)">
            <summary>
              Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="T:Finsa.CodeServices.Common.GTuple10`10">
            <summary>
              Represents a simple tuple.
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple10`10.Item1">
            <summary>
              Gets or sets the item at position 1.
            </summary>
            <value>The item at position 1.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple10`10.Item2">
            <summary>
              Gets or sets the item at position 2.
            </summary>
            <value>The item at position 2.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple10`10.Item3">
            <summary>
              Gets or sets the item at position 3.
            </summary>
            <value>The item at position 3.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple10`10.Item4">
            <summary>
              Gets or sets the item at position 4.
            </summary>
            <value>The item at position 4.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple10`10.Item5">
            <summary>
              Gets or sets the item at position 5.
            </summary>
            <value>The item at position 5.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple10`10.Item6">
            <summary>
              Gets or sets the item at position 6.
            </summary>
            <value>The item at position 6.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple10`10.Item7">
            <summary>
              Gets or sets the item at position 7.
            </summary>
            <value>The item at position 7.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple10`10.Item8">
            <summary>
              Gets or sets the item at position 8.
            </summary>
            <value>The item at position 8.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple10`10.Item9">
            <summary>
              Gets or sets the item at position 9.
            </summary>
            <value>The item at position 9.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple10`10.Item10">
            <summary>
              Gets or sets the item at position 10.
            </summary>
            <value>The item at position 10.</value>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple10`10.GetFormattingMembers">
            <summary>
              Gets members used to implement ToString.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple10`10.GetIdentifyingMembers">
            <summary>
              Gets members used to implement Equals.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple10`10.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple10`10.Contains(System.Object)">
            <summary>
              Determines whether the tuple contains a specific value.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>True if item is found in the tuple; otherwise, false.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple10`10.CopyTo(System.Object[],System.Int32)">
            <summary>
              Copies the elements of the tuple to an <see cref="T:System.Array"/>,
              starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
              The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied
              from the tuple. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple10`10.Count">
            <summary>
              The number of elements contained in the tuple.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple10`10.IndexOf(System.Object)">
            <summary>
              Determines the index of a specific item in the tuple.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>The index of item if found in the tuple; otherwise, -1.</returns>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple10`10.Item(System.Int32)">
            <summary>
              Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="T:Finsa.CodeServices.Common.GTuple10`1">
            <summary>
              Represents a simple tuple.
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple10`1.Item1">
            <summary>
              Gets or sets the item at position 1.
            </summary>
            <value>The item at position 1.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple10`1.Item2">
            <summary>
              Gets or sets the item at position 2.
            </summary>
            <value>The item at position 2.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple10`1.Item3">
            <summary>
              Gets or sets the item at position 3.
            </summary>
            <value>The item at position 3.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple10`1.Item4">
            <summary>
              Gets or sets the item at position 4.
            </summary>
            <value>The item at position 4.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple10`1.Item5">
            <summary>
              Gets or sets the item at position 5.
            </summary>
            <value>The item at position 5.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple10`1.Item6">
            <summary>
              Gets or sets the item at position 6.
            </summary>
            <value>The item at position 6.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple10`1.Item7">
            <summary>
              Gets or sets the item at position 7.
            </summary>
            <value>The item at position 7.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple10`1.Item8">
            <summary>
              Gets or sets the item at position 8.
            </summary>
            <value>The item at position 8.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple10`1.Item9">
            <summary>
              Gets or sets the item at position 9.
            </summary>
            <value>The item at position 9.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple10`1.Item10">
            <summary>
              Gets or sets the item at position 10.
            </summary>
            <value>The item at position 10.</value>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple10`1.GetFormattingMembers">
            <summary>
              Gets members used to implement ToString.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple10`1.GetIdentifyingMembers">
            <summary>
              Gets members used to implement Equals.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple10`1.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple10`1.Contains(`0)">
            <summary>
              Determines whether the tuple contains a specific value.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>True if item is found in the tuple; otherwise, false.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple10`1.CopyTo(`0[],System.Int32)">
            <summary>
              Copies the elements of the tuple to an <see cref="T:System.Array"/>,
              starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
              The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied
              from the tuple. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple10`1.Count">
            <summary>
              The number of elements contained in the tuple.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple10`1.IndexOf(`0)">
            <summary>
              Determines the index of a specific item in the tuple.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>The index of item if found in the tuple; otherwise, -1.</returns>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple10`1.Item(System.Int32)">
            <summary>
              Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="T:Finsa.CodeServices.Common.GTuple11`11">
            <summary>
              Represents a simple tuple.
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple11`11.Item1">
            <summary>
              Gets or sets the item at position 1.
            </summary>
            <value>The item at position 1.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple11`11.Item2">
            <summary>
              Gets or sets the item at position 2.
            </summary>
            <value>The item at position 2.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple11`11.Item3">
            <summary>
              Gets or sets the item at position 3.
            </summary>
            <value>The item at position 3.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple11`11.Item4">
            <summary>
              Gets or sets the item at position 4.
            </summary>
            <value>The item at position 4.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple11`11.Item5">
            <summary>
              Gets or sets the item at position 5.
            </summary>
            <value>The item at position 5.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple11`11.Item6">
            <summary>
              Gets or sets the item at position 6.
            </summary>
            <value>The item at position 6.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple11`11.Item7">
            <summary>
              Gets or sets the item at position 7.
            </summary>
            <value>The item at position 7.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple11`11.Item8">
            <summary>
              Gets or sets the item at position 8.
            </summary>
            <value>The item at position 8.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple11`11.Item9">
            <summary>
              Gets or sets the item at position 9.
            </summary>
            <value>The item at position 9.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple11`11.Item10">
            <summary>
              Gets or sets the item at position 10.
            </summary>
            <value>The item at position 10.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple11`11.Item11">
            <summary>
              Gets or sets the item at position 11.
            </summary>
            <value>The item at position 11.</value>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple11`11.GetFormattingMembers">
            <summary>
              Gets members used to implement ToString.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple11`11.GetIdentifyingMembers">
            <summary>
              Gets members used to implement Equals.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple11`11.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple11`11.Contains(System.Object)">
            <summary>
              Determines whether the tuple contains a specific value.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>True if item is found in the tuple; otherwise, false.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple11`11.CopyTo(System.Object[],System.Int32)">
            <summary>
              Copies the elements of the tuple to an <see cref="T:System.Array"/>,
              starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
              The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied
              from the tuple. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple11`11.Count">
            <summary>
              The number of elements contained in the tuple.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple11`11.IndexOf(System.Object)">
            <summary>
              Determines the index of a specific item in the tuple.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>The index of item if found in the tuple; otherwise, -1.</returns>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple11`11.Item(System.Int32)">
            <summary>
              Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="T:Finsa.CodeServices.Common.GTuple11`1">
            <summary>
              Represents a simple tuple.
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple11`1.Item1">
            <summary>
              Gets or sets the item at position 1.
            </summary>
            <value>The item at position 1.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple11`1.Item2">
            <summary>
              Gets or sets the item at position 2.
            </summary>
            <value>The item at position 2.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple11`1.Item3">
            <summary>
              Gets or sets the item at position 3.
            </summary>
            <value>The item at position 3.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple11`1.Item4">
            <summary>
              Gets or sets the item at position 4.
            </summary>
            <value>The item at position 4.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple11`1.Item5">
            <summary>
              Gets or sets the item at position 5.
            </summary>
            <value>The item at position 5.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple11`1.Item6">
            <summary>
              Gets or sets the item at position 6.
            </summary>
            <value>The item at position 6.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple11`1.Item7">
            <summary>
              Gets or sets the item at position 7.
            </summary>
            <value>The item at position 7.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple11`1.Item8">
            <summary>
              Gets or sets the item at position 8.
            </summary>
            <value>The item at position 8.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple11`1.Item9">
            <summary>
              Gets or sets the item at position 9.
            </summary>
            <value>The item at position 9.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple11`1.Item10">
            <summary>
              Gets or sets the item at position 10.
            </summary>
            <value>The item at position 10.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple11`1.Item11">
            <summary>
              Gets or sets the item at position 11.
            </summary>
            <value>The item at position 11.</value>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple11`1.GetFormattingMembers">
            <summary>
              Gets members used to implement ToString.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple11`1.GetIdentifyingMembers">
            <summary>
              Gets members used to implement Equals.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple11`1.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple11`1.Contains(`0)">
            <summary>
              Determines whether the tuple contains a specific value.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>True if item is found in the tuple; otherwise, false.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple11`1.CopyTo(`0[],System.Int32)">
            <summary>
              Copies the elements of the tuple to an <see cref="T:System.Array"/>,
              starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
              The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied
              from the tuple. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple11`1.Count">
            <summary>
              The number of elements contained in the tuple.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple11`1.IndexOf(`0)">
            <summary>
              Determines the index of a specific item in the tuple.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>The index of item if found in the tuple; otherwise, -1.</returns>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple11`1.Item(System.Int32)">
            <summary>
              Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="T:Finsa.CodeServices.Common.GTuple12`12">
            <summary>
              Represents a simple tuple.
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple12`12.Item1">
            <summary>
              Gets or sets the item at position 1.
            </summary>
            <value>The item at position 1.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple12`12.Item2">
            <summary>
              Gets or sets the item at position 2.
            </summary>
            <value>The item at position 2.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple12`12.Item3">
            <summary>
              Gets or sets the item at position 3.
            </summary>
            <value>The item at position 3.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple12`12.Item4">
            <summary>
              Gets or sets the item at position 4.
            </summary>
            <value>The item at position 4.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple12`12.Item5">
            <summary>
              Gets or sets the item at position 5.
            </summary>
            <value>The item at position 5.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple12`12.Item6">
            <summary>
              Gets or sets the item at position 6.
            </summary>
            <value>The item at position 6.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple12`12.Item7">
            <summary>
              Gets or sets the item at position 7.
            </summary>
            <value>The item at position 7.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple12`12.Item8">
            <summary>
              Gets or sets the item at position 8.
            </summary>
            <value>The item at position 8.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple12`12.Item9">
            <summary>
              Gets or sets the item at position 9.
            </summary>
            <value>The item at position 9.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple12`12.Item10">
            <summary>
              Gets or sets the item at position 10.
            </summary>
            <value>The item at position 10.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple12`12.Item11">
            <summary>
              Gets or sets the item at position 11.
            </summary>
            <value>The item at position 11.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple12`12.Item12">
            <summary>
              Gets or sets the item at position 12.
            </summary>
            <value>The item at position 12.</value>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple12`12.GetFormattingMembers">
            <summary>
              Gets members used to implement ToString.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple12`12.GetIdentifyingMembers">
            <summary>
              Gets members used to implement Equals.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple12`12.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple12`12.Contains(System.Object)">
            <summary>
              Determines whether the tuple contains a specific value.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>True if item is found in the tuple; otherwise, false.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple12`12.CopyTo(System.Object[],System.Int32)">
            <summary>
              Copies the elements of the tuple to an <see cref="T:System.Array"/>,
              starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
              The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied
              from the tuple. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple12`12.Count">
            <summary>
              The number of elements contained in the tuple.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple12`12.IndexOf(System.Object)">
            <summary>
              Determines the index of a specific item in the tuple.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>The index of item if found in the tuple; otherwise, -1.</returns>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple12`12.Item(System.Int32)">
            <summary>
              Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="T:Finsa.CodeServices.Common.GTuple12`1">
            <summary>
              Represents a simple tuple.
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple12`1.Item1">
            <summary>
              Gets or sets the item at position 1.
            </summary>
            <value>The item at position 1.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple12`1.Item2">
            <summary>
              Gets or sets the item at position 2.
            </summary>
            <value>The item at position 2.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple12`1.Item3">
            <summary>
              Gets or sets the item at position 3.
            </summary>
            <value>The item at position 3.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple12`1.Item4">
            <summary>
              Gets or sets the item at position 4.
            </summary>
            <value>The item at position 4.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple12`1.Item5">
            <summary>
              Gets or sets the item at position 5.
            </summary>
            <value>The item at position 5.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple12`1.Item6">
            <summary>
              Gets or sets the item at position 6.
            </summary>
            <value>The item at position 6.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple12`1.Item7">
            <summary>
              Gets or sets the item at position 7.
            </summary>
            <value>The item at position 7.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple12`1.Item8">
            <summary>
              Gets or sets the item at position 8.
            </summary>
            <value>The item at position 8.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple12`1.Item9">
            <summary>
              Gets or sets the item at position 9.
            </summary>
            <value>The item at position 9.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple12`1.Item10">
            <summary>
              Gets or sets the item at position 10.
            </summary>
            <value>The item at position 10.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple12`1.Item11">
            <summary>
              Gets or sets the item at position 11.
            </summary>
            <value>The item at position 11.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple12`1.Item12">
            <summary>
              Gets or sets the item at position 12.
            </summary>
            <value>The item at position 12.</value>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple12`1.GetFormattingMembers">
            <summary>
              Gets members used to implement ToString.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple12`1.GetIdentifyingMembers">
            <summary>
              Gets members used to implement Equals.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple12`1.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple12`1.Contains(`0)">
            <summary>
              Determines whether the tuple contains a specific value.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>True if item is found in the tuple; otherwise, false.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple12`1.CopyTo(`0[],System.Int32)">
            <summary>
              Copies the elements of the tuple to an <see cref="T:System.Array"/>,
              starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
              The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied
              from the tuple. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple12`1.Count">
            <summary>
              The number of elements contained in the tuple.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple12`1.IndexOf(`0)">
            <summary>
              Determines the index of a specific item in the tuple.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>The index of item if found in the tuple; otherwise, -1.</returns>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple12`1.Item(System.Int32)">
            <summary>
              Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="T:Finsa.CodeServices.Common.GTuple13`13">
            <summary>
              Represents a simple tuple.
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple13`13.Item1">
            <summary>
              Gets or sets the item at position 1.
            </summary>
            <value>The item at position 1.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple13`13.Item2">
            <summary>
              Gets or sets the item at position 2.
            </summary>
            <value>The item at position 2.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple13`13.Item3">
            <summary>
              Gets or sets the item at position 3.
            </summary>
            <value>The item at position 3.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple13`13.Item4">
            <summary>
              Gets or sets the item at position 4.
            </summary>
            <value>The item at position 4.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple13`13.Item5">
            <summary>
              Gets or sets the item at position 5.
            </summary>
            <value>The item at position 5.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple13`13.Item6">
            <summary>
              Gets or sets the item at position 6.
            </summary>
            <value>The item at position 6.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple13`13.Item7">
            <summary>
              Gets or sets the item at position 7.
            </summary>
            <value>The item at position 7.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple13`13.Item8">
            <summary>
              Gets or sets the item at position 8.
            </summary>
            <value>The item at position 8.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple13`13.Item9">
            <summary>
              Gets or sets the item at position 9.
            </summary>
            <value>The item at position 9.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple13`13.Item10">
            <summary>
              Gets or sets the item at position 10.
            </summary>
            <value>The item at position 10.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple13`13.Item11">
            <summary>
              Gets or sets the item at position 11.
            </summary>
            <value>The item at position 11.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple13`13.Item12">
            <summary>
              Gets or sets the item at position 12.
            </summary>
            <value>The item at position 12.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple13`13.Item13">
            <summary>
              Gets or sets the item at position 13.
            </summary>
            <value>The item at position 13.</value>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple13`13.GetFormattingMembers">
            <summary>
              Gets members used to implement ToString.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple13`13.GetIdentifyingMembers">
            <summary>
              Gets members used to implement Equals.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple13`13.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple13`13.Contains(System.Object)">
            <summary>
              Determines whether the tuple contains a specific value.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>True if item is found in the tuple; otherwise, false.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple13`13.CopyTo(System.Object[],System.Int32)">
            <summary>
              Copies the elements of the tuple to an <see cref="T:System.Array"/>,
              starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
              The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied
              from the tuple. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple13`13.Count">
            <summary>
              The number of elements contained in the tuple.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple13`13.IndexOf(System.Object)">
            <summary>
              Determines the index of a specific item in the tuple.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>The index of item if found in the tuple; otherwise, -1.</returns>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple13`13.Item(System.Int32)">
            <summary>
              Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="T:Finsa.CodeServices.Common.GTuple13`1">
            <summary>
              Represents a simple tuple.
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple13`1.Item1">
            <summary>
              Gets or sets the item at position 1.
            </summary>
            <value>The item at position 1.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple13`1.Item2">
            <summary>
              Gets or sets the item at position 2.
            </summary>
            <value>The item at position 2.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple13`1.Item3">
            <summary>
              Gets or sets the item at position 3.
            </summary>
            <value>The item at position 3.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple13`1.Item4">
            <summary>
              Gets or sets the item at position 4.
            </summary>
            <value>The item at position 4.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple13`1.Item5">
            <summary>
              Gets or sets the item at position 5.
            </summary>
            <value>The item at position 5.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple13`1.Item6">
            <summary>
              Gets or sets the item at position 6.
            </summary>
            <value>The item at position 6.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple13`1.Item7">
            <summary>
              Gets or sets the item at position 7.
            </summary>
            <value>The item at position 7.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple13`1.Item8">
            <summary>
              Gets or sets the item at position 8.
            </summary>
            <value>The item at position 8.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple13`1.Item9">
            <summary>
              Gets or sets the item at position 9.
            </summary>
            <value>The item at position 9.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple13`1.Item10">
            <summary>
              Gets or sets the item at position 10.
            </summary>
            <value>The item at position 10.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple13`1.Item11">
            <summary>
              Gets or sets the item at position 11.
            </summary>
            <value>The item at position 11.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple13`1.Item12">
            <summary>
              Gets or sets the item at position 12.
            </summary>
            <value>The item at position 12.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple13`1.Item13">
            <summary>
              Gets or sets the item at position 13.
            </summary>
            <value>The item at position 13.</value>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple13`1.GetFormattingMembers">
            <summary>
              Gets members used to implement ToString.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple13`1.GetIdentifyingMembers">
            <summary>
              Gets members used to implement Equals.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple13`1.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple13`1.Contains(`0)">
            <summary>
              Determines whether the tuple contains a specific value.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>True if item is found in the tuple; otherwise, false.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple13`1.CopyTo(`0[],System.Int32)">
            <summary>
              Copies the elements of the tuple to an <see cref="T:System.Array"/>,
              starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
              The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied
              from the tuple. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple13`1.Count">
            <summary>
              The number of elements contained in the tuple.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple13`1.IndexOf(`0)">
            <summary>
              Determines the index of a specific item in the tuple.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>The index of item if found in the tuple; otherwise, -1.</returns>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple13`1.Item(System.Int32)">
            <summary>
              Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="T:Finsa.CodeServices.Common.GTuple14`14">
            <summary>
              Represents a simple tuple.
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple14`14.Item1">
            <summary>
              Gets or sets the item at position 1.
            </summary>
            <value>The item at position 1.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple14`14.Item2">
            <summary>
              Gets or sets the item at position 2.
            </summary>
            <value>The item at position 2.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple14`14.Item3">
            <summary>
              Gets or sets the item at position 3.
            </summary>
            <value>The item at position 3.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple14`14.Item4">
            <summary>
              Gets or sets the item at position 4.
            </summary>
            <value>The item at position 4.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple14`14.Item5">
            <summary>
              Gets or sets the item at position 5.
            </summary>
            <value>The item at position 5.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple14`14.Item6">
            <summary>
              Gets or sets the item at position 6.
            </summary>
            <value>The item at position 6.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple14`14.Item7">
            <summary>
              Gets or sets the item at position 7.
            </summary>
            <value>The item at position 7.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple14`14.Item8">
            <summary>
              Gets or sets the item at position 8.
            </summary>
            <value>The item at position 8.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple14`14.Item9">
            <summary>
              Gets or sets the item at position 9.
            </summary>
            <value>The item at position 9.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple14`14.Item10">
            <summary>
              Gets or sets the item at position 10.
            </summary>
            <value>The item at position 10.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple14`14.Item11">
            <summary>
              Gets or sets the item at position 11.
            </summary>
            <value>The item at position 11.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple14`14.Item12">
            <summary>
              Gets or sets the item at position 12.
            </summary>
            <value>The item at position 12.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple14`14.Item13">
            <summary>
              Gets or sets the item at position 13.
            </summary>
            <value>The item at position 13.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple14`14.Item14">
            <summary>
              Gets or sets the item at position 14.
            </summary>
            <value>The item at position 14.</value>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple14`14.GetFormattingMembers">
            <summary>
              Gets members used to implement ToString.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple14`14.GetIdentifyingMembers">
            <summary>
              Gets members used to implement Equals.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple14`14.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple14`14.Contains(System.Object)">
            <summary>
              Determines whether the tuple contains a specific value.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>True if item is found in the tuple; otherwise, false.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple14`14.CopyTo(System.Object[],System.Int32)">
            <summary>
              Copies the elements of the tuple to an <see cref="T:System.Array"/>,
              starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
              The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied
              from the tuple. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple14`14.Count">
            <summary>
              The number of elements contained in the tuple.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple14`14.IndexOf(System.Object)">
            <summary>
              Determines the index of a specific item in the tuple.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>The index of item if found in the tuple; otherwise, -1.</returns>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple14`14.Item(System.Int32)">
            <summary>
              Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="T:Finsa.CodeServices.Common.GTuple14`1">
            <summary>
              Represents a simple tuple.
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple14`1.Item1">
            <summary>
              Gets or sets the item at position 1.
            </summary>
            <value>The item at position 1.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple14`1.Item2">
            <summary>
              Gets or sets the item at position 2.
            </summary>
            <value>The item at position 2.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple14`1.Item3">
            <summary>
              Gets or sets the item at position 3.
            </summary>
            <value>The item at position 3.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple14`1.Item4">
            <summary>
              Gets or sets the item at position 4.
            </summary>
            <value>The item at position 4.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple14`1.Item5">
            <summary>
              Gets or sets the item at position 5.
            </summary>
            <value>The item at position 5.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple14`1.Item6">
            <summary>
              Gets or sets the item at position 6.
            </summary>
            <value>The item at position 6.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple14`1.Item7">
            <summary>
              Gets or sets the item at position 7.
            </summary>
            <value>The item at position 7.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple14`1.Item8">
            <summary>
              Gets or sets the item at position 8.
            </summary>
            <value>The item at position 8.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple14`1.Item9">
            <summary>
              Gets or sets the item at position 9.
            </summary>
            <value>The item at position 9.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple14`1.Item10">
            <summary>
              Gets or sets the item at position 10.
            </summary>
            <value>The item at position 10.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple14`1.Item11">
            <summary>
              Gets or sets the item at position 11.
            </summary>
            <value>The item at position 11.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple14`1.Item12">
            <summary>
              Gets or sets the item at position 12.
            </summary>
            <value>The item at position 12.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple14`1.Item13">
            <summary>
              Gets or sets the item at position 13.
            </summary>
            <value>The item at position 13.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple14`1.Item14">
            <summary>
              Gets or sets the item at position 14.
            </summary>
            <value>The item at position 14.</value>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple14`1.GetFormattingMembers">
            <summary>
              Gets members used to implement ToString.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple14`1.GetIdentifyingMembers">
            <summary>
              Gets members used to implement Equals.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple14`1.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple14`1.Contains(`0)">
            <summary>
              Determines whether the tuple contains a specific value.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>True if item is found in the tuple; otherwise, false.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple14`1.CopyTo(`0[],System.Int32)">
            <summary>
              Copies the elements of the tuple to an <see cref="T:System.Array"/>,
              starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
              The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied
              from the tuple. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple14`1.Count">
            <summary>
              The number of elements contained in the tuple.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple14`1.IndexOf(`0)">
            <summary>
              Determines the index of a specific item in the tuple.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>The index of item if found in the tuple; otherwise, -1.</returns>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple14`1.Item(System.Int32)">
            <summary>
              Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="T:Finsa.CodeServices.Common.GTuple15`15">
            <summary>
              Represents a simple tuple.
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple15`15.Item1">
            <summary>
              Gets or sets the item at position 1.
            </summary>
            <value>The item at position 1.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple15`15.Item2">
            <summary>
              Gets or sets the item at position 2.
            </summary>
            <value>The item at position 2.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple15`15.Item3">
            <summary>
              Gets or sets the item at position 3.
            </summary>
            <value>The item at position 3.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple15`15.Item4">
            <summary>
              Gets or sets the item at position 4.
            </summary>
            <value>The item at position 4.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple15`15.Item5">
            <summary>
              Gets or sets the item at position 5.
            </summary>
            <value>The item at position 5.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple15`15.Item6">
            <summary>
              Gets or sets the item at position 6.
            </summary>
            <value>The item at position 6.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple15`15.Item7">
            <summary>
              Gets or sets the item at position 7.
            </summary>
            <value>The item at position 7.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple15`15.Item8">
            <summary>
              Gets or sets the item at position 8.
            </summary>
            <value>The item at position 8.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple15`15.Item9">
            <summary>
              Gets or sets the item at position 9.
            </summary>
            <value>The item at position 9.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple15`15.Item10">
            <summary>
              Gets or sets the item at position 10.
            </summary>
            <value>The item at position 10.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple15`15.Item11">
            <summary>
              Gets or sets the item at position 11.
            </summary>
            <value>The item at position 11.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple15`15.Item12">
            <summary>
              Gets or sets the item at position 12.
            </summary>
            <value>The item at position 12.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple15`15.Item13">
            <summary>
              Gets or sets the item at position 13.
            </summary>
            <value>The item at position 13.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple15`15.Item14">
            <summary>
              Gets or sets the item at position 14.
            </summary>
            <value>The item at position 14.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple15`15.Item15">
            <summary>
              Gets or sets the item at position 15.
            </summary>
            <value>The item at position 15.</value>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple15`15.GetFormattingMembers">
            <summary>
              Gets members used to implement ToString.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple15`15.GetIdentifyingMembers">
            <summary>
              Gets members used to implement Equals.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple15`15.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple15`15.Contains(System.Object)">
            <summary>
              Determines whether the tuple contains a specific value.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>True if item is found in the tuple; otherwise, false.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple15`15.CopyTo(System.Object[],System.Int32)">
            <summary>
              Copies the elements of the tuple to an <see cref="T:System.Array"/>,
              starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
              The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied
              from the tuple. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple15`15.Count">
            <summary>
              The number of elements contained in the tuple.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple15`15.IndexOf(System.Object)">
            <summary>
              Determines the index of a specific item in the tuple.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>The index of item if found in the tuple; otherwise, -1.</returns>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple15`15.Item(System.Int32)">
            <summary>
              Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="T:Finsa.CodeServices.Common.GTuple15`1">
            <summary>
              Represents a simple tuple.
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple15`1.Item1">
            <summary>
              Gets or sets the item at position 1.
            </summary>
            <value>The item at position 1.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple15`1.Item2">
            <summary>
              Gets or sets the item at position 2.
            </summary>
            <value>The item at position 2.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple15`1.Item3">
            <summary>
              Gets or sets the item at position 3.
            </summary>
            <value>The item at position 3.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple15`1.Item4">
            <summary>
              Gets or sets the item at position 4.
            </summary>
            <value>The item at position 4.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple15`1.Item5">
            <summary>
              Gets or sets the item at position 5.
            </summary>
            <value>The item at position 5.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple15`1.Item6">
            <summary>
              Gets or sets the item at position 6.
            </summary>
            <value>The item at position 6.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple15`1.Item7">
            <summary>
              Gets or sets the item at position 7.
            </summary>
            <value>The item at position 7.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple15`1.Item8">
            <summary>
              Gets or sets the item at position 8.
            </summary>
            <value>The item at position 8.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple15`1.Item9">
            <summary>
              Gets or sets the item at position 9.
            </summary>
            <value>The item at position 9.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple15`1.Item10">
            <summary>
              Gets or sets the item at position 10.
            </summary>
            <value>The item at position 10.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple15`1.Item11">
            <summary>
              Gets or sets the item at position 11.
            </summary>
            <value>The item at position 11.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple15`1.Item12">
            <summary>
              Gets or sets the item at position 12.
            </summary>
            <value>The item at position 12.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple15`1.Item13">
            <summary>
              Gets or sets the item at position 13.
            </summary>
            <value>The item at position 13.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple15`1.Item14">
            <summary>
              Gets or sets the item at position 14.
            </summary>
            <value>The item at position 14.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple15`1.Item15">
            <summary>
              Gets or sets the item at position 15.
            </summary>
            <value>The item at position 15.</value>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple15`1.GetFormattingMembers">
            <summary>
              Gets members used to implement ToString.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple15`1.GetIdentifyingMembers">
            <summary>
              Gets members used to implement Equals.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple15`1.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple15`1.Contains(`0)">
            <summary>
              Determines whether the tuple contains a specific value.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>True if item is found in the tuple; otherwise, false.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple15`1.CopyTo(`0[],System.Int32)">
            <summary>
              Copies the elements of the tuple to an <see cref="T:System.Array"/>,
              starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
              The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied
              from the tuple. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple15`1.Count">
            <summary>
              The number of elements contained in the tuple.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple15`1.IndexOf(`0)">
            <summary>
              Determines the index of a specific item in the tuple.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>The index of item if found in the tuple; otherwise, -1.</returns>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple15`1.Item(System.Int32)">
            <summary>
              Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="T:Finsa.CodeServices.Common.GTuple16`16">
            <summary>
              Represents a simple tuple.
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple16`16.Item1">
            <summary>
              Gets or sets the item at position 1.
            </summary>
            <value>The item at position 1.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple16`16.Item2">
            <summary>
              Gets or sets the item at position 2.
            </summary>
            <value>The item at position 2.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple16`16.Item3">
            <summary>
              Gets or sets the item at position 3.
            </summary>
            <value>The item at position 3.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple16`16.Item4">
            <summary>
              Gets or sets the item at position 4.
            </summary>
            <value>The item at position 4.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple16`16.Item5">
            <summary>
              Gets or sets the item at position 5.
            </summary>
            <value>The item at position 5.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple16`16.Item6">
            <summary>
              Gets or sets the item at position 6.
            </summary>
            <value>The item at position 6.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple16`16.Item7">
            <summary>
              Gets or sets the item at position 7.
            </summary>
            <value>The item at position 7.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple16`16.Item8">
            <summary>
              Gets or sets the item at position 8.
            </summary>
            <value>The item at position 8.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple16`16.Item9">
            <summary>
              Gets or sets the item at position 9.
            </summary>
            <value>The item at position 9.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple16`16.Item10">
            <summary>
              Gets or sets the item at position 10.
            </summary>
            <value>The item at position 10.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple16`16.Item11">
            <summary>
              Gets or sets the item at position 11.
            </summary>
            <value>The item at position 11.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple16`16.Item12">
            <summary>
              Gets or sets the item at position 12.
            </summary>
            <value>The item at position 12.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple16`16.Item13">
            <summary>
              Gets or sets the item at position 13.
            </summary>
            <value>The item at position 13.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple16`16.Item14">
            <summary>
              Gets or sets the item at position 14.
            </summary>
            <value>The item at position 14.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple16`16.Item15">
            <summary>
              Gets or sets the item at position 15.
            </summary>
            <value>The item at position 15.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple16`16.Item16">
            <summary>
              Gets or sets the item at position 16.
            </summary>
            <value>The item at position 16.</value>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple16`16.GetFormattingMembers">
            <summary>
              Gets members used to implement ToString.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple16`16.GetIdentifyingMembers">
            <summary>
              Gets members used to implement Equals.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple16`16.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple16`16.Contains(System.Object)">
            <summary>
              Determines whether the tuple contains a specific value.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>True if item is found in the tuple; otherwise, false.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple16`16.CopyTo(System.Object[],System.Int32)">
            <summary>
              Copies the elements of the tuple to an <see cref="T:System.Array"/>,
              starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
              The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied
              from the tuple. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple16`16.Count">
            <summary>
              The number of elements contained in the tuple.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple16`16.IndexOf(System.Object)">
            <summary>
              Determines the index of a specific item in the tuple.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>The index of item if found in the tuple; otherwise, -1.</returns>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple16`16.Item(System.Int32)">
            <summary>
              Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="T:Finsa.CodeServices.Common.GTuple16`1">
            <summary>
              Represents a simple tuple.
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple16`1.Item1">
            <summary>
              Gets or sets the item at position 1.
            </summary>
            <value>The item at position 1.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple16`1.Item2">
            <summary>
              Gets or sets the item at position 2.
            </summary>
            <value>The item at position 2.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple16`1.Item3">
            <summary>
              Gets or sets the item at position 3.
            </summary>
            <value>The item at position 3.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple16`1.Item4">
            <summary>
              Gets or sets the item at position 4.
            </summary>
            <value>The item at position 4.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple16`1.Item5">
            <summary>
              Gets or sets the item at position 5.
            </summary>
            <value>The item at position 5.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple16`1.Item6">
            <summary>
              Gets or sets the item at position 6.
            </summary>
            <value>The item at position 6.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple16`1.Item7">
            <summary>
              Gets or sets the item at position 7.
            </summary>
            <value>The item at position 7.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple16`1.Item8">
            <summary>
              Gets or sets the item at position 8.
            </summary>
            <value>The item at position 8.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple16`1.Item9">
            <summary>
              Gets or sets the item at position 9.
            </summary>
            <value>The item at position 9.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple16`1.Item10">
            <summary>
              Gets or sets the item at position 10.
            </summary>
            <value>The item at position 10.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple16`1.Item11">
            <summary>
              Gets or sets the item at position 11.
            </summary>
            <value>The item at position 11.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple16`1.Item12">
            <summary>
              Gets or sets the item at position 12.
            </summary>
            <value>The item at position 12.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple16`1.Item13">
            <summary>
              Gets or sets the item at position 13.
            </summary>
            <value>The item at position 13.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple16`1.Item14">
            <summary>
              Gets or sets the item at position 14.
            </summary>
            <value>The item at position 14.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple16`1.Item15">
            <summary>
              Gets or sets the item at position 15.
            </summary>
            <value>The item at position 15.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple16`1.Item16">
            <summary>
              Gets or sets the item at position 16.
            </summary>
            <value>The item at position 16.</value>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple16`1.GetFormattingMembers">
            <summary>
              Gets members used to implement ToString.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple16`1.GetIdentifyingMembers">
            <summary>
              Gets members used to implement Equals.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple16`1.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple16`1.Contains(`0)">
            <summary>
              Determines whether the tuple contains a specific value.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>True if item is found in the tuple; otherwise, false.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple16`1.CopyTo(`0[],System.Int32)">
            <summary>
              Copies the elements of the tuple to an <see cref="T:System.Array"/>,
              starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
              The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied
              from the tuple. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple16`1.Count">
            <summary>
              The number of elements contained in the tuple.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple16`1.IndexOf(`0)">
            <summary>
              Determines the index of a specific item in the tuple.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>The index of item if found in the tuple; otherwise, -1.</returns>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple16`1.Item(System.Int32)">
            <summary>
              Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="T:Finsa.CodeServices.Common.GTuple17`17">
            <summary>
              Represents a simple tuple.
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple17`17.Item1">
            <summary>
              Gets or sets the item at position 1.
            </summary>
            <value>The item at position 1.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple17`17.Item2">
            <summary>
              Gets or sets the item at position 2.
            </summary>
            <value>The item at position 2.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple17`17.Item3">
            <summary>
              Gets or sets the item at position 3.
            </summary>
            <value>The item at position 3.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple17`17.Item4">
            <summary>
              Gets or sets the item at position 4.
            </summary>
            <value>The item at position 4.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple17`17.Item5">
            <summary>
              Gets or sets the item at position 5.
            </summary>
            <value>The item at position 5.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple17`17.Item6">
            <summary>
              Gets or sets the item at position 6.
            </summary>
            <value>The item at position 6.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple17`17.Item7">
            <summary>
              Gets or sets the item at position 7.
            </summary>
            <value>The item at position 7.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple17`17.Item8">
            <summary>
              Gets or sets the item at position 8.
            </summary>
            <value>The item at position 8.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple17`17.Item9">
            <summary>
              Gets or sets the item at position 9.
            </summary>
            <value>The item at position 9.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple17`17.Item10">
            <summary>
              Gets or sets the item at position 10.
            </summary>
            <value>The item at position 10.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple17`17.Item11">
            <summary>
              Gets or sets the item at position 11.
            </summary>
            <value>The item at position 11.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple17`17.Item12">
            <summary>
              Gets or sets the item at position 12.
            </summary>
            <value>The item at position 12.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple17`17.Item13">
            <summary>
              Gets or sets the item at position 13.
            </summary>
            <value>The item at position 13.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple17`17.Item14">
            <summary>
              Gets or sets the item at position 14.
            </summary>
            <value>The item at position 14.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple17`17.Item15">
            <summary>
              Gets or sets the item at position 15.
            </summary>
            <value>The item at position 15.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple17`17.Item16">
            <summary>
              Gets or sets the item at position 16.
            </summary>
            <value>The item at position 16.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple17`17.Item17">
            <summary>
              Gets or sets the item at position 17.
            </summary>
            <value>The item at position 17.</value>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple17`17.GetFormattingMembers">
            <summary>
              Gets members used to implement ToString.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple17`17.GetIdentifyingMembers">
            <summary>
              Gets members used to implement Equals.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple17`17.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple17`17.Contains(System.Object)">
            <summary>
              Determines whether the tuple contains a specific value.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>True if item is found in the tuple; otherwise, false.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple17`17.CopyTo(System.Object[],System.Int32)">
            <summary>
              Copies the elements of the tuple to an <see cref="T:System.Array"/>,
              starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
              The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied
              from the tuple. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple17`17.Count">
            <summary>
              The number of elements contained in the tuple.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple17`17.IndexOf(System.Object)">
            <summary>
              Determines the index of a specific item in the tuple.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>The index of item if found in the tuple; otherwise, -1.</returns>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple17`17.Item(System.Int32)">
            <summary>
              Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="T:Finsa.CodeServices.Common.GTuple17`1">
            <summary>
              Represents a simple tuple.
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple17`1.Item1">
            <summary>
              Gets or sets the item at position 1.
            </summary>
            <value>The item at position 1.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple17`1.Item2">
            <summary>
              Gets or sets the item at position 2.
            </summary>
            <value>The item at position 2.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple17`1.Item3">
            <summary>
              Gets or sets the item at position 3.
            </summary>
            <value>The item at position 3.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple17`1.Item4">
            <summary>
              Gets or sets the item at position 4.
            </summary>
            <value>The item at position 4.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple17`1.Item5">
            <summary>
              Gets or sets the item at position 5.
            </summary>
            <value>The item at position 5.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple17`1.Item6">
            <summary>
              Gets or sets the item at position 6.
            </summary>
            <value>The item at position 6.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple17`1.Item7">
            <summary>
              Gets or sets the item at position 7.
            </summary>
            <value>The item at position 7.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple17`1.Item8">
            <summary>
              Gets or sets the item at position 8.
            </summary>
            <value>The item at position 8.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple17`1.Item9">
            <summary>
              Gets or sets the item at position 9.
            </summary>
            <value>The item at position 9.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple17`1.Item10">
            <summary>
              Gets or sets the item at position 10.
            </summary>
            <value>The item at position 10.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple17`1.Item11">
            <summary>
              Gets or sets the item at position 11.
            </summary>
            <value>The item at position 11.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple17`1.Item12">
            <summary>
              Gets or sets the item at position 12.
            </summary>
            <value>The item at position 12.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple17`1.Item13">
            <summary>
              Gets or sets the item at position 13.
            </summary>
            <value>The item at position 13.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple17`1.Item14">
            <summary>
              Gets or sets the item at position 14.
            </summary>
            <value>The item at position 14.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple17`1.Item15">
            <summary>
              Gets or sets the item at position 15.
            </summary>
            <value>The item at position 15.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple17`1.Item16">
            <summary>
              Gets or sets the item at position 16.
            </summary>
            <value>The item at position 16.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple17`1.Item17">
            <summary>
              Gets or sets the item at position 17.
            </summary>
            <value>The item at position 17.</value>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple17`1.GetFormattingMembers">
            <summary>
              Gets members used to implement ToString.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple17`1.GetIdentifyingMembers">
            <summary>
              Gets members used to implement Equals.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple17`1.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple17`1.Contains(`0)">
            <summary>
              Determines whether the tuple contains a specific value.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>True if item is found in the tuple; otherwise, false.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple17`1.CopyTo(`0[],System.Int32)">
            <summary>
              Copies the elements of the tuple to an <see cref="T:System.Array"/>,
              starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
              The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied
              from the tuple. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple17`1.Count">
            <summary>
              The number of elements contained in the tuple.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple17`1.IndexOf(`0)">
            <summary>
              Determines the index of a specific item in the tuple.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>The index of item if found in the tuple; otherwise, -1.</returns>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple17`1.Item(System.Int32)">
            <summary>
              Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="T:Finsa.CodeServices.Common.GTuple18`18">
            <summary>
              Represents a simple tuple.
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple18`18.Item1">
            <summary>
              Gets or sets the item at position 1.
            </summary>
            <value>The item at position 1.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple18`18.Item2">
            <summary>
              Gets or sets the item at position 2.
            </summary>
            <value>The item at position 2.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple18`18.Item3">
            <summary>
              Gets or sets the item at position 3.
            </summary>
            <value>The item at position 3.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple18`18.Item4">
            <summary>
              Gets or sets the item at position 4.
            </summary>
            <value>The item at position 4.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple18`18.Item5">
            <summary>
              Gets or sets the item at position 5.
            </summary>
            <value>The item at position 5.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple18`18.Item6">
            <summary>
              Gets or sets the item at position 6.
            </summary>
            <value>The item at position 6.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple18`18.Item7">
            <summary>
              Gets or sets the item at position 7.
            </summary>
            <value>The item at position 7.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple18`18.Item8">
            <summary>
              Gets or sets the item at position 8.
            </summary>
            <value>The item at position 8.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple18`18.Item9">
            <summary>
              Gets or sets the item at position 9.
            </summary>
            <value>The item at position 9.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple18`18.Item10">
            <summary>
              Gets or sets the item at position 10.
            </summary>
            <value>The item at position 10.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple18`18.Item11">
            <summary>
              Gets or sets the item at position 11.
            </summary>
            <value>The item at position 11.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple18`18.Item12">
            <summary>
              Gets or sets the item at position 12.
            </summary>
            <value>The item at position 12.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple18`18.Item13">
            <summary>
              Gets or sets the item at position 13.
            </summary>
            <value>The item at position 13.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple18`18.Item14">
            <summary>
              Gets or sets the item at position 14.
            </summary>
            <value>The item at position 14.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple18`18.Item15">
            <summary>
              Gets or sets the item at position 15.
            </summary>
            <value>The item at position 15.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple18`18.Item16">
            <summary>
              Gets or sets the item at position 16.
            </summary>
            <value>The item at position 16.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple18`18.Item17">
            <summary>
              Gets or sets the item at position 17.
            </summary>
            <value>The item at position 17.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple18`18.Item18">
            <summary>
              Gets or sets the item at position 18.
            </summary>
            <value>The item at position 18.</value>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple18`18.GetFormattingMembers">
            <summary>
              Gets members used to implement ToString.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple18`18.GetIdentifyingMembers">
            <summary>
              Gets members used to implement Equals.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple18`18.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple18`18.Contains(System.Object)">
            <summary>
              Determines whether the tuple contains a specific value.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>True if item is found in the tuple; otherwise, false.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple18`18.CopyTo(System.Object[],System.Int32)">
            <summary>
              Copies the elements of the tuple to an <see cref="T:System.Array"/>,
              starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
              The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied
              from the tuple. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple18`18.Count">
            <summary>
              The number of elements contained in the tuple.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple18`18.IndexOf(System.Object)">
            <summary>
              Determines the index of a specific item in the tuple.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>The index of item if found in the tuple; otherwise, -1.</returns>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple18`18.Item(System.Int32)">
            <summary>
              Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="T:Finsa.CodeServices.Common.GTuple18`1">
            <summary>
              Represents a simple tuple.
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple18`1.Item1">
            <summary>
              Gets or sets the item at position 1.
            </summary>
            <value>The item at position 1.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple18`1.Item2">
            <summary>
              Gets or sets the item at position 2.
            </summary>
            <value>The item at position 2.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple18`1.Item3">
            <summary>
              Gets or sets the item at position 3.
            </summary>
            <value>The item at position 3.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple18`1.Item4">
            <summary>
              Gets or sets the item at position 4.
            </summary>
            <value>The item at position 4.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple18`1.Item5">
            <summary>
              Gets or sets the item at position 5.
            </summary>
            <value>The item at position 5.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple18`1.Item6">
            <summary>
              Gets or sets the item at position 6.
            </summary>
            <value>The item at position 6.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple18`1.Item7">
            <summary>
              Gets or sets the item at position 7.
            </summary>
            <value>The item at position 7.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple18`1.Item8">
            <summary>
              Gets or sets the item at position 8.
            </summary>
            <value>The item at position 8.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple18`1.Item9">
            <summary>
              Gets or sets the item at position 9.
            </summary>
            <value>The item at position 9.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple18`1.Item10">
            <summary>
              Gets or sets the item at position 10.
            </summary>
            <value>The item at position 10.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple18`1.Item11">
            <summary>
              Gets or sets the item at position 11.
            </summary>
            <value>The item at position 11.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple18`1.Item12">
            <summary>
              Gets or sets the item at position 12.
            </summary>
            <value>The item at position 12.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple18`1.Item13">
            <summary>
              Gets or sets the item at position 13.
            </summary>
            <value>The item at position 13.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple18`1.Item14">
            <summary>
              Gets or sets the item at position 14.
            </summary>
            <value>The item at position 14.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple18`1.Item15">
            <summary>
              Gets or sets the item at position 15.
            </summary>
            <value>The item at position 15.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple18`1.Item16">
            <summary>
              Gets or sets the item at position 16.
            </summary>
            <value>The item at position 16.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple18`1.Item17">
            <summary>
              Gets or sets the item at position 17.
            </summary>
            <value>The item at position 17.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple18`1.Item18">
            <summary>
              Gets or sets the item at position 18.
            </summary>
            <value>The item at position 18.</value>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple18`1.GetFormattingMembers">
            <summary>
              Gets members used to implement ToString.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple18`1.GetIdentifyingMembers">
            <summary>
              Gets members used to implement Equals.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple18`1.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple18`1.Contains(`0)">
            <summary>
              Determines whether the tuple contains a specific value.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>True if item is found in the tuple; otherwise, false.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple18`1.CopyTo(`0[],System.Int32)">
            <summary>
              Copies the elements of the tuple to an <see cref="T:System.Array"/>,
              starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
              The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied
              from the tuple. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple18`1.Count">
            <summary>
              The number of elements contained in the tuple.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple18`1.IndexOf(`0)">
            <summary>
              Determines the index of a specific item in the tuple.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>The index of item if found in the tuple; otherwise, -1.</returns>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple18`1.Item(System.Int32)">
            <summary>
              Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="T:Finsa.CodeServices.Common.GTuple19`19">
            <summary>
              Represents a simple tuple.
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple19`19.Item1">
            <summary>
              Gets or sets the item at position 1.
            </summary>
            <value>The item at position 1.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple19`19.Item2">
            <summary>
              Gets or sets the item at position 2.
            </summary>
            <value>The item at position 2.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple19`19.Item3">
            <summary>
              Gets or sets the item at position 3.
            </summary>
            <value>The item at position 3.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple19`19.Item4">
            <summary>
              Gets or sets the item at position 4.
            </summary>
            <value>The item at position 4.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple19`19.Item5">
            <summary>
              Gets or sets the item at position 5.
            </summary>
            <value>The item at position 5.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple19`19.Item6">
            <summary>
              Gets or sets the item at position 6.
            </summary>
            <value>The item at position 6.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple19`19.Item7">
            <summary>
              Gets or sets the item at position 7.
            </summary>
            <value>The item at position 7.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple19`19.Item8">
            <summary>
              Gets or sets the item at position 8.
            </summary>
            <value>The item at position 8.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple19`19.Item9">
            <summary>
              Gets or sets the item at position 9.
            </summary>
            <value>The item at position 9.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple19`19.Item10">
            <summary>
              Gets or sets the item at position 10.
            </summary>
            <value>The item at position 10.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple19`19.Item11">
            <summary>
              Gets or sets the item at position 11.
            </summary>
            <value>The item at position 11.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple19`19.Item12">
            <summary>
              Gets or sets the item at position 12.
            </summary>
            <value>The item at position 12.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple19`19.Item13">
            <summary>
              Gets or sets the item at position 13.
            </summary>
            <value>The item at position 13.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple19`19.Item14">
            <summary>
              Gets or sets the item at position 14.
            </summary>
            <value>The item at position 14.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple19`19.Item15">
            <summary>
              Gets or sets the item at position 15.
            </summary>
            <value>The item at position 15.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple19`19.Item16">
            <summary>
              Gets or sets the item at position 16.
            </summary>
            <value>The item at position 16.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple19`19.Item17">
            <summary>
              Gets or sets the item at position 17.
            </summary>
            <value>The item at position 17.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple19`19.Item18">
            <summary>
              Gets or sets the item at position 18.
            </summary>
            <value>The item at position 18.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple19`19.Item19">
            <summary>
              Gets or sets the item at position 19.
            </summary>
            <value>The item at position 19.</value>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple19`19.GetFormattingMembers">
            <summary>
              Gets members used to implement ToString.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple19`19.GetIdentifyingMembers">
            <summary>
              Gets members used to implement Equals.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple19`19.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple19`19.Contains(System.Object)">
            <summary>
              Determines whether the tuple contains a specific value.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>True if item is found in the tuple; otherwise, false.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple19`19.CopyTo(System.Object[],System.Int32)">
            <summary>
              Copies the elements of the tuple to an <see cref="T:System.Array"/>,
              starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
              The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied
              from the tuple. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple19`19.Count">
            <summary>
              The number of elements contained in the tuple.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple19`19.IndexOf(System.Object)">
            <summary>
              Determines the index of a specific item in the tuple.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>The index of item if found in the tuple; otherwise, -1.</returns>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple19`19.Item(System.Int32)">
            <summary>
              Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="T:Finsa.CodeServices.Common.GTuple19`1">
            <summary>
              Represents a simple tuple.
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple19`1.Item1">
            <summary>
              Gets or sets the item at position 1.
            </summary>
            <value>The item at position 1.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple19`1.Item2">
            <summary>
              Gets or sets the item at position 2.
            </summary>
            <value>The item at position 2.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple19`1.Item3">
            <summary>
              Gets or sets the item at position 3.
            </summary>
            <value>The item at position 3.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple19`1.Item4">
            <summary>
              Gets or sets the item at position 4.
            </summary>
            <value>The item at position 4.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple19`1.Item5">
            <summary>
              Gets or sets the item at position 5.
            </summary>
            <value>The item at position 5.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple19`1.Item6">
            <summary>
              Gets or sets the item at position 6.
            </summary>
            <value>The item at position 6.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple19`1.Item7">
            <summary>
              Gets or sets the item at position 7.
            </summary>
            <value>The item at position 7.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple19`1.Item8">
            <summary>
              Gets or sets the item at position 8.
            </summary>
            <value>The item at position 8.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple19`1.Item9">
            <summary>
              Gets or sets the item at position 9.
            </summary>
            <value>The item at position 9.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple19`1.Item10">
            <summary>
              Gets or sets the item at position 10.
            </summary>
            <value>The item at position 10.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple19`1.Item11">
            <summary>
              Gets or sets the item at position 11.
            </summary>
            <value>The item at position 11.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple19`1.Item12">
            <summary>
              Gets or sets the item at position 12.
            </summary>
            <value>The item at position 12.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple19`1.Item13">
            <summary>
              Gets or sets the item at position 13.
            </summary>
            <value>The item at position 13.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple19`1.Item14">
            <summary>
              Gets or sets the item at position 14.
            </summary>
            <value>The item at position 14.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple19`1.Item15">
            <summary>
              Gets or sets the item at position 15.
            </summary>
            <value>The item at position 15.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple19`1.Item16">
            <summary>
              Gets or sets the item at position 16.
            </summary>
            <value>The item at position 16.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple19`1.Item17">
            <summary>
              Gets or sets the item at position 17.
            </summary>
            <value>The item at position 17.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple19`1.Item18">
            <summary>
              Gets or sets the item at position 18.
            </summary>
            <value>The item at position 18.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple19`1.Item19">
            <summary>
              Gets or sets the item at position 19.
            </summary>
            <value>The item at position 19.</value>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple19`1.GetFormattingMembers">
            <summary>
              Gets members used to implement ToString.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple19`1.GetIdentifyingMembers">
            <summary>
              Gets members used to implement Equals.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple19`1.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple19`1.Contains(`0)">
            <summary>
              Determines whether the tuple contains a specific value.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>True if item is found in the tuple; otherwise, false.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple19`1.CopyTo(`0[],System.Int32)">
            <summary>
              Copies the elements of the tuple to an <see cref="T:System.Array"/>,
              starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
              The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied
              from the tuple. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple19`1.Count">
            <summary>
              The number of elements contained in the tuple.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple19`1.IndexOf(`0)">
            <summary>
              Determines the index of a specific item in the tuple.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>The index of item if found in the tuple; otherwise, -1.</returns>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple19`1.Item(System.Int32)">
            <summary>
              Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="T:Finsa.CodeServices.Common.GTuple20`20">
            <summary>
              Represents a simple tuple.
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple20`20.Item1">
            <summary>
              Gets or sets the item at position 1.
            </summary>
            <value>The item at position 1.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple20`20.Item2">
            <summary>
              Gets or sets the item at position 2.
            </summary>
            <value>The item at position 2.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple20`20.Item3">
            <summary>
              Gets or sets the item at position 3.
            </summary>
            <value>The item at position 3.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple20`20.Item4">
            <summary>
              Gets or sets the item at position 4.
            </summary>
            <value>The item at position 4.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple20`20.Item5">
            <summary>
              Gets or sets the item at position 5.
            </summary>
            <value>The item at position 5.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple20`20.Item6">
            <summary>
              Gets or sets the item at position 6.
            </summary>
            <value>The item at position 6.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple20`20.Item7">
            <summary>
              Gets or sets the item at position 7.
            </summary>
            <value>The item at position 7.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple20`20.Item8">
            <summary>
              Gets or sets the item at position 8.
            </summary>
            <value>The item at position 8.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple20`20.Item9">
            <summary>
              Gets or sets the item at position 9.
            </summary>
            <value>The item at position 9.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple20`20.Item10">
            <summary>
              Gets or sets the item at position 10.
            </summary>
            <value>The item at position 10.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple20`20.Item11">
            <summary>
              Gets or sets the item at position 11.
            </summary>
            <value>The item at position 11.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple20`20.Item12">
            <summary>
              Gets or sets the item at position 12.
            </summary>
            <value>The item at position 12.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple20`20.Item13">
            <summary>
              Gets or sets the item at position 13.
            </summary>
            <value>The item at position 13.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple20`20.Item14">
            <summary>
              Gets or sets the item at position 14.
            </summary>
            <value>The item at position 14.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple20`20.Item15">
            <summary>
              Gets or sets the item at position 15.
            </summary>
            <value>The item at position 15.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple20`20.Item16">
            <summary>
              Gets or sets the item at position 16.
            </summary>
            <value>The item at position 16.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple20`20.Item17">
            <summary>
              Gets or sets the item at position 17.
            </summary>
            <value>The item at position 17.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple20`20.Item18">
            <summary>
              Gets or sets the item at position 18.
            </summary>
            <value>The item at position 18.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple20`20.Item19">
            <summary>
              Gets or sets the item at position 19.
            </summary>
            <value>The item at position 19.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple20`20.Item20">
            <summary>
              Gets or sets the item at position 20.
            </summary>
            <value>The item at position 20.</value>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple20`20.GetFormattingMembers">
            <summary>
              Gets members used to implement ToString.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple20`20.GetIdentifyingMembers">
            <summary>
              Gets members used to implement Equals.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple20`20.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple20`20.Contains(System.Object)">
            <summary>
              Determines whether the tuple contains a specific value.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>True if item is found in the tuple; otherwise, false.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple20`20.CopyTo(System.Object[],System.Int32)">
            <summary>
              Copies the elements of the tuple to an <see cref="T:System.Array"/>,
              starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
              The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied
              from the tuple. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple20`20.Count">
            <summary>
              The number of elements contained in the tuple.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple20`20.IndexOf(System.Object)">
            <summary>
              Determines the index of a specific item in the tuple.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>The index of item if found in the tuple; otherwise, -1.</returns>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple20`20.Item(System.Int32)">
            <summary>
              Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="T:Finsa.CodeServices.Common.GTuple20`1">
            <summary>
              Represents a simple tuple.
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple20`1.Item1">
            <summary>
              Gets or sets the item at position 1.
            </summary>
            <value>The item at position 1.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple20`1.Item2">
            <summary>
              Gets or sets the item at position 2.
            </summary>
            <value>The item at position 2.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple20`1.Item3">
            <summary>
              Gets or sets the item at position 3.
            </summary>
            <value>The item at position 3.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple20`1.Item4">
            <summary>
              Gets or sets the item at position 4.
            </summary>
            <value>The item at position 4.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple20`1.Item5">
            <summary>
              Gets or sets the item at position 5.
            </summary>
            <value>The item at position 5.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple20`1.Item6">
            <summary>
              Gets or sets the item at position 6.
            </summary>
            <value>The item at position 6.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple20`1.Item7">
            <summary>
              Gets or sets the item at position 7.
            </summary>
            <value>The item at position 7.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple20`1.Item8">
            <summary>
              Gets or sets the item at position 8.
            </summary>
            <value>The item at position 8.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple20`1.Item9">
            <summary>
              Gets or sets the item at position 9.
            </summary>
            <value>The item at position 9.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple20`1.Item10">
            <summary>
              Gets or sets the item at position 10.
            </summary>
            <value>The item at position 10.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple20`1.Item11">
            <summary>
              Gets or sets the item at position 11.
            </summary>
            <value>The item at position 11.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple20`1.Item12">
            <summary>
              Gets or sets the item at position 12.
            </summary>
            <value>The item at position 12.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple20`1.Item13">
            <summary>
              Gets or sets the item at position 13.
            </summary>
            <value>The item at position 13.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple20`1.Item14">
            <summary>
              Gets or sets the item at position 14.
            </summary>
            <value>The item at position 14.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple20`1.Item15">
            <summary>
              Gets or sets the item at position 15.
            </summary>
            <value>The item at position 15.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple20`1.Item16">
            <summary>
              Gets or sets the item at position 16.
            </summary>
            <value>The item at position 16.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple20`1.Item17">
            <summary>
              Gets or sets the item at position 17.
            </summary>
            <value>The item at position 17.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple20`1.Item18">
            <summary>
              Gets or sets the item at position 18.
            </summary>
            <value>The item at position 18.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple20`1.Item19">
            <summary>
              Gets or sets the item at position 19.
            </summary>
            <value>The item at position 19.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple20`1.Item20">
            <summary>
              Gets or sets the item at position 20.
            </summary>
            <value>The item at position 20.</value>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple20`1.GetFormattingMembers">
            <summary>
              Gets members used to implement ToString.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple20`1.GetIdentifyingMembers">
            <summary>
              Gets members used to implement Equals.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple20`1.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple20`1.Contains(`0)">
            <summary>
              Determines whether the tuple contains a specific value.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>True if item is found in the tuple; otherwise, false.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple20`1.CopyTo(`0[],System.Int32)">
            <summary>
              Copies the elements of the tuple to an <see cref="T:System.Array"/>,
              starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
              The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied
              from the tuple. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple20`1.Count">
            <summary>
              The number of elements contained in the tuple.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple20`1.IndexOf(`0)">
            <summary>
              Determines the index of a specific item in the tuple.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>The index of item if found in the tuple; otherwise, -1.</returns>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple20`1.Item(System.Int32)">
            <summary>
              Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="T:Finsa.CodeServices.Common.GTuple21`21">
            <summary>
              Represents a simple tuple.
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple21`21.Item1">
            <summary>
              Gets or sets the item at position 1.
            </summary>
            <value>The item at position 1.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple21`21.Item2">
            <summary>
              Gets or sets the item at position 2.
            </summary>
            <value>The item at position 2.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple21`21.Item3">
            <summary>
              Gets or sets the item at position 3.
            </summary>
            <value>The item at position 3.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple21`21.Item4">
            <summary>
              Gets or sets the item at position 4.
            </summary>
            <value>The item at position 4.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple21`21.Item5">
            <summary>
              Gets or sets the item at position 5.
            </summary>
            <value>The item at position 5.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple21`21.Item6">
            <summary>
              Gets or sets the item at position 6.
            </summary>
            <value>The item at position 6.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple21`21.Item7">
            <summary>
              Gets or sets the item at position 7.
            </summary>
            <value>The item at position 7.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple21`21.Item8">
            <summary>
              Gets or sets the item at position 8.
            </summary>
            <value>The item at position 8.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple21`21.Item9">
            <summary>
              Gets or sets the item at position 9.
            </summary>
            <value>The item at position 9.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple21`21.Item10">
            <summary>
              Gets or sets the item at position 10.
            </summary>
            <value>The item at position 10.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple21`21.Item11">
            <summary>
              Gets or sets the item at position 11.
            </summary>
            <value>The item at position 11.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple21`21.Item12">
            <summary>
              Gets or sets the item at position 12.
            </summary>
            <value>The item at position 12.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple21`21.Item13">
            <summary>
              Gets or sets the item at position 13.
            </summary>
            <value>The item at position 13.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple21`21.Item14">
            <summary>
              Gets or sets the item at position 14.
            </summary>
            <value>The item at position 14.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple21`21.Item15">
            <summary>
              Gets or sets the item at position 15.
            </summary>
            <value>The item at position 15.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple21`21.Item16">
            <summary>
              Gets or sets the item at position 16.
            </summary>
            <value>The item at position 16.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple21`21.Item17">
            <summary>
              Gets or sets the item at position 17.
            </summary>
            <value>The item at position 17.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple21`21.Item18">
            <summary>
              Gets or sets the item at position 18.
            </summary>
            <value>The item at position 18.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple21`21.Item19">
            <summary>
              Gets or sets the item at position 19.
            </summary>
            <value>The item at position 19.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple21`21.Item20">
            <summary>
              Gets or sets the item at position 20.
            </summary>
            <value>The item at position 20.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple21`21.Item21">
            <summary>
              Gets or sets the item at position 21.
            </summary>
            <value>The item at position 21.</value>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple21`21.GetFormattingMembers">
            <summary>
              Gets members used to implement ToString.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple21`21.GetIdentifyingMembers">
            <summary>
              Gets members used to implement Equals.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple21`21.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple21`21.Contains(System.Object)">
            <summary>
              Determines whether the tuple contains a specific value.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>True if item is found in the tuple; otherwise, false.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple21`21.CopyTo(System.Object[],System.Int32)">
            <summary>
              Copies the elements of the tuple to an <see cref="T:System.Array"/>,
              starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
              The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied
              from the tuple. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple21`21.Count">
            <summary>
              The number of elements contained in the tuple.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple21`21.IndexOf(System.Object)">
            <summary>
              Determines the index of a specific item in the tuple.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>The index of item if found in the tuple; otherwise, -1.</returns>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple21`21.Item(System.Int32)">
            <summary>
              Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="T:Finsa.CodeServices.Common.GTuple21`1">
            <summary>
              Represents a simple tuple.
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple21`1.Item1">
            <summary>
              Gets or sets the item at position 1.
            </summary>
            <value>The item at position 1.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple21`1.Item2">
            <summary>
              Gets or sets the item at position 2.
            </summary>
            <value>The item at position 2.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple21`1.Item3">
            <summary>
              Gets or sets the item at position 3.
            </summary>
            <value>The item at position 3.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple21`1.Item4">
            <summary>
              Gets or sets the item at position 4.
            </summary>
            <value>The item at position 4.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple21`1.Item5">
            <summary>
              Gets or sets the item at position 5.
            </summary>
            <value>The item at position 5.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple21`1.Item6">
            <summary>
              Gets or sets the item at position 6.
            </summary>
            <value>The item at position 6.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple21`1.Item7">
            <summary>
              Gets or sets the item at position 7.
            </summary>
            <value>The item at position 7.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple21`1.Item8">
            <summary>
              Gets or sets the item at position 8.
            </summary>
            <value>The item at position 8.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple21`1.Item9">
            <summary>
              Gets or sets the item at position 9.
            </summary>
            <value>The item at position 9.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple21`1.Item10">
            <summary>
              Gets or sets the item at position 10.
            </summary>
            <value>The item at position 10.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple21`1.Item11">
            <summary>
              Gets or sets the item at position 11.
            </summary>
            <value>The item at position 11.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple21`1.Item12">
            <summary>
              Gets or sets the item at position 12.
            </summary>
            <value>The item at position 12.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple21`1.Item13">
            <summary>
              Gets or sets the item at position 13.
            </summary>
            <value>The item at position 13.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple21`1.Item14">
            <summary>
              Gets or sets the item at position 14.
            </summary>
            <value>The item at position 14.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple21`1.Item15">
            <summary>
              Gets or sets the item at position 15.
            </summary>
            <value>The item at position 15.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple21`1.Item16">
            <summary>
              Gets or sets the item at position 16.
            </summary>
            <value>The item at position 16.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple21`1.Item17">
            <summary>
              Gets or sets the item at position 17.
            </summary>
            <value>The item at position 17.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple21`1.Item18">
            <summary>
              Gets or sets the item at position 18.
            </summary>
            <value>The item at position 18.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple21`1.Item19">
            <summary>
              Gets or sets the item at position 19.
            </summary>
            <value>The item at position 19.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple21`1.Item20">
            <summary>
              Gets or sets the item at position 20.
            </summary>
            <value>The item at position 20.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple21`1.Item21">
            <summary>
              Gets or sets the item at position 21.
            </summary>
            <value>The item at position 21.</value>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple21`1.GetFormattingMembers">
            <summary>
              Gets members used to implement ToString.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple21`1.GetIdentifyingMembers">
            <summary>
              Gets members used to implement Equals.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple21`1.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple21`1.Contains(`0)">
            <summary>
              Determines whether the tuple contains a specific value.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>True if item is found in the tuple; otherwise, false.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple21`1.CopyTo(`0[],System.Int32)">
            <summary>
              Copies the elements of the tuple to an <see cref="T:System.Array"/>,
              starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
              The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied
              from the tuple. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple21`1.Count">
            <summary>
              The number of elements contained in the tuple.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.GTuple21`1.IndexOf(`0)">
            <summary>
              Determines the index of a specific item in the tuple.
            </summary>
            <param name="item">The object to locate in the tuple.</param>
            <returns>The index of item if found in the tuple; otherwise, -1.</returns>
        </member>
        <member name="P:Finsa.CodeServices.Common.GTuple21`1.Item(System.Int32)">
            <summary>
              Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="T:Finsa.CodeServices.Common.Collections.Concurrent.ConcurrentDictionary`2">
            <summary>
              A simple concurrent dictionary.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:Finsa.CodeServices.Common.Collections.Concurrent.ConcurrentDictionary`2.Add(`0,`1)">
            <summary>
              Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Collections.Concurrent.ConcurrentDictionary`2.ContainsKey(`0)">
            <summary>
              Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"/>
              contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</param>
            <returns>
              true if the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an
              element with the key; otherwise, false.
            </returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.Collections.Concurrent.ConcurrentDictionary`2.Remove(`0)">
            <summary>
              Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
              true if the element is successfully removed; otherwise, false. This method also
              returns false if <paramref name="key"/> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.Collections.Concurrent.ConcurrentDictionary`2.TryGetValue(`0,`1@)">
            <summary>
              Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">
              When this method returns, the value associated with the specified key, if the key is
              found; otherwise, the default value for the type of the <paramref name="value"/>
              parameter. This parameter is passed uninitialized.
            </param>
            <returns>
              true if the object that implements
              <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the
              specified key; otherwise, false.
            </returns>
        </member>
        <member name="P:Finsa.CodeServices.Common.Collections.Concurrent.ConcurrentDictionary`2.Item(`0)">
            <summary>
              Gets or sets the element with the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="P:Finsa.CodeServices.Common.Collections.Concurrent.ConcurrentDictionary`2.Keys">
            <summary>
              Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys
              of the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.Collections.Concurrent.ConcurrentDictionary`2.Values">
            <summary>
              Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values
              in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.Collections.Concurrent.ConcurrentDictionary`2.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
              A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate
              through the collection.
            </returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
              Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
              An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate
              through the collection.
            </returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.Collections.Concurrent.ConcurrentDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
              Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Collections.Concurrent.ConcurrentDictionary`2.Clear">
            <summary>
              Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.Collections.Concurrent.ConcurrentDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
              Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/>
              contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
              true if <paramref name="item"/> is found in the
              <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.Collections.Concurrent.ConcurrentDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
              Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
              true if <paramref name="item"/> was successfully removed from the
              <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This
              method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:Finsa.CodeServices.Common.Collections.Concurrent.ConcurrentDictionary`2.Count">
            <summary>
              Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.Collections.Concurrent.ConcurrentDictionary`2.IsReadOnly">
            <summary>
              Gets a value indicating whether the
              <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
        </member>
        <member name="T:Finsa.CodeServices.Common.Collections.Concurrent.ConcurrentDoublyLinkedList`1">
            <typeparam name="T">The type of the items the list will contain.</typeparam>
        </member>
        <member name="M:Finsa.CodeServices.Common.Collections.Concurrent.ConcurrentDoublyLinkedList`1.#ctor">
            <summary>
              Returns the thread safe implementation of the <see cref="T:Finsa.CodeServices.Common.Collections.IDoublyLinkedList`1"/> interface.
            </summary>
            <returns>A thread safe of the <see cref="T:Finsa.CodeServices.Common.Collections.IDoublyLinkedList`1"/> interface.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.Collections.Concurrent.ConcurrentDoublyLinkedList`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
              Returns the thread safe implementation of the <see cref="T:Finsa.CodeServices.Common.Collections.IDoublyLinkedList`1"/>
              interface, using specified equality comparer.
            </summary>
            <param name="equalityComparer">
              The equality comparer that it will be used to determine whether two items are equal.
            </param>
            <returns>
              A thread safe of the <see cref="T:Finsa.CodeServices.Common.Collections.IDoublyLinkedList`1"/> interface using specified
              equality comparer.
            </returns>
        </member>
        <member name="T:Finsa.CodeServices.Common.Collections.Concurrent.ConcurrentHashLinkedList`1">
            <typeparam name="T">The type of the items the list will contain.</typeparam>
        </member>
        <member name="M:Finsa.CodeServices.Common.Collections.Concurrent.ConcurrentHashLinkedList`1.#ctor">
            <summary>
              Returns the thread safe implementation of the <see cref="T:Finsa.CodeServices.Common.Collections.IHashLinkedList`1"/> interface.
            </summary>
            <returns>
              A thread safe implementation of the <see cref="T:Finsa.CodeServices.Common.Collections.IHashLinkedList`1"/> interface.
            </returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.Collections.Concurrent.ConcurrentHashLinkedList`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
              Returns the thread safe implementation of the <see cref="T:Finsa.CodeServices.Common.Collections.IHashLinkedList`1"/>
              interface, using specified equality comparer.
            </summary>
            <param name="equalityComparer">
              The equality comparer that it will be used to determine whether two items are equal.
            </param>
            <returns>
              A thread safe implementation of the <see cref="T:Finsa.CodeServices.Common.Collections.IHashLinkedList`1"/> interface
              using specified equality comparer.
            </returns>
        </member>
        <member name="T:Finsa.CodeServices.Common.Collections.Concurrent.ConcurrentLRUCache`2">
            <summary>
              A simple concurrent LRU cache, taken from this StackOverflow question:
              
              "https://stackoverflow.com/questions/754233/is-it-there-any-lru-implementation-of-idictionary"
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:Finsa.CodeServices.Common.Collections.Concurrent.ConcurrentLRUCache`2.#ctor(System.Int32)">
            <summary>
              Builds an LRU cache of given capacity.
            </summary>
            <param name="capacity">The maximum capacity of the LRU cache.</param>
        </member>
        <member name="T:Finsa.CodeServices.Common.Collections.Concurrent.ConcurrentQueue`1">
            <summary>
              A simple concurrent queue.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Finsa.CodeServices.Common.Collections.Concurrent.ConcurrentSinglyLinkedList`1">
            <typeparam name="T">The type of the items the list will contain.</typeparam>
        </member>
        <member name="M:Finsa.CodeServices.Common.Collections.Concurrent.ConcurrentSinglyLinkedList`1.#ctor">
            <summary>
              Returns the thread safe implementation of the <see cref="T:Finsa.CodeServices.Common.Collections.ILinkedList`1"/> interface.
            </summary>
            <returns>A thread safe of the <see cref="T:Finsa.CodeServices.Common.Collections.ILinkedList`1"/> interface.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.Collections.Concurrent.ConcurrentSinglyLinkedList`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
              Returns the thread safe implementation of the <see cref="T:Finsa.CodeServices.Common.Collections.ILinkedList`1"/>
              interface, using specified equality comparer.
            </summary>
            <param name="equalityComparer">
              The equality comparer that it will be used to determine whether two items are equal.
            </param>
            <returns>
              A thread safe of the <see cref="T:Finsa.CodeServices.Common.Collections.ILinkedList`1"/> interface using specified
              equality comparer.
            </returns>
        </member>
        <member name="T:Finsa.CodeServices.Common.Collections.Concurrent.ConcurrentThinLinkedList`1">
            <typeparam name="T">The type of the items the list will contain.</typeparam>
        </member>
        <member name="M:Finsa.CodeServices.Common.Collections.Concurrent.ConcurrentThinLinkedList`1.#ctor">
            <summary>
              Returns the thread safe implementation of the <see cref="T:Finsa.CodeServices.Common.Collections.IThinLinkedList`1"/> interface.
            </summary>
            <returns>
              A thread safe implementation of the <see cref="T:Finsa.CodeServices.Common.Collections.IThinLinkedList`1"/> interface.
            </returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.Collections.Concurrent.ConcurrentThinLinkedList`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
              Returns the thread safe implementation of the <see cref="T:Finsa.CodeServices.Common.Collections.IThinLinkedList`1"/>
              interface, using specified equality comparer.
            </summary>
            <param name="equalityComparer">
              The equality comparer that it will be used to determine whether two items are equal.
            </param>
            <returns>
              A thread safe implementation of the <see cref="T:Finsa.CodeServices.Common.Collections.IThinLinkedList`1"/> interface
              using specified equality comparer.
            </returns>
        </member>
        <member name="T:Finsa.CodeServices.Common.Collections.DoublyLinkedList`1">
            <typeparam name="T">The type of the items the list will contain.</typeparam>
        </member>
        <member name="M:Finsa.CodeServices.Common.Collections.DoublyLinkedList`1.#ctor">
            <summary>
              Returns the default implementation of the <see cref="T:Finsa.CodeServices.Common.Collections.IDoublyLinkedList`1"/> interface.
            </summary>
            <returns>An implementation of the <see cref="T:Finsa.CodeServices.Common.Collections.IDoublyLinkedList`1"/> interface.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.Collections.DoublyLinkedList`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
              Returns the default implementation of the <see cref="T:Finsa.CodeServices.Common.Collections.IDoublyLinkedList`1"/>
              interface, using specified equality comparer.
            </summary>
            <param name="equalityComparer">
              The equality comparer that it will be used to determine whether two items are equal.
            </param>
            <returns>
              An implementation of the <see cref="T:Finsa.CodeServices.Common.Collections.IDoublyLinkedList`1"/> interface using
              specified equality comparer.
            </returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.Collections.EnumerableExtensions.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
              Converts given enumerable into an <see cref="T:System.Collections.Generic.HashSet`1"/>.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="source">The elements that should be added to the set.</param>
            <returns>An <see cref="T:System.Collections.Generic.HashSet`1"/> filled from <paramref name="source"/>.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.Collections.EnumerableExtensions.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
              Converts given enumerable into an <see cref="T:System.Collections.Generic.HashSet`1"/>.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="source">The elements that should be added to the set.</param>
            <param name="equalityComparer">The equality comparer that will be used by the set.</param>
            <returns>An <see cref="T:System.Collections.Generic.HashSet`1"/> filled from <paramref name="source"/>.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.Collections.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},System.Comparison{``0})">
            <summary>
              Convenience method on <see cref="T:System.Collections.Generic.IEnumerable`1"/> to allow passing of a
              <see cref="T:System.Comparison`1"/> delegate to the OrderBy method.
            </summary>
            <typeparam name="T">The type of the elements of the sequence.</typeparam>
            <param name="list">The sequence.</param>
            <param name="comparison">The comparison.</param>
            <returns>The sorted sequence.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.Collections.EnumerableExtensions.ToDataTable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
              </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable"></param>
            <returns></returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.Collections.EnumerableExtensions.ToDataTable(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
              </summary>
            <param name="enumerable"></param>
            <returns></returns>
        </member>
        <member name="T:Finsa.CodeServices.Common.Collections.HashLinkedList`1">
            <typeparam name="T">The type of the items the list will contain.</typeparam>
        </member>
        <member name="M:Finsa.CodeServices.Common.Collections.HashLinkedList`1.#ctor">
            <summary>
              Returns the default implementation of the <see cref="T:Finsa.CodeServices.Common.Collections.IHashLinkedList`1"/> interface.
            </summary>
            <returns>An implementation of the <see cref="T:Finsa.CodeServices.Common.Collections.IHashLinkedList`1"/> interface.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.Collections.HashLinkedList`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
              Returns the default implementation of the <see cref="T:Finsa.CodeServices.Common.Collections.IHashLinkedList`1"/>
              interface, using specified equality comparer.
            </summary>
            <param name="equalityComparer">
              The equality comparer that it will be used to determine whether two items are equal.
            </param>
            <returns>
              An implementation of the <see cref="T:Finsa.CodeServices.Common.Collections.IHashLinkedList`1"/> interface using
              specified equality comparer.
            </returns>
        </member>
        <member name="T:Finsa.CodeServices.Common.Collections.IThinLinkedList`1">
            <summary>
              Represents a linked list which has a very low memory footprint, but it also exposes very
              few operations.
            </summary>
            <typeparam name="T">The type of the items of the list.</typeparam>
        </member>
        <member name="P:Finsa.CodeServices.Common.Collections.IThinLinkedList`1.EqualityComparer">
            <summary>
              The equality comparer used to determine whether two items are equal.
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.Collections.IThinLinkedList`1.First">
            <summary>
              The first item of the list.
            </summary>
            <exception cref="T:System.InvalidOperationException">List is empty.</exception>
        </member>
        <member name="M:Finsa.CodeServices.Common.Collections.IThinLinkedList`1.AddFirst(`0)">
            <summary>
              Adds given item to the list, so that it is the first item of the list.
            </summary>
            <param name="item">The item to add to the list.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Collections.IThinLinkedList`1.RemoveFirst">
            <summary>
              Removes the first item of the list.
            </summary>
            <exception cref="T:System.InvalidOperationException">List is empty.</exception>
        </member>
        <member name="T:Finsa.CodeServices.Common.Collections.ILinkedList`1">
            <summary>
              </summary>
            <typeparam name="T">The type of the items of the list.</typeparam>
        </member>
        <member name="P:Finsa.CodeServices.Common.Collections.ILinkedList`1.Last">
            <summary>
              The last item of the list.
            </summary>
            <exception cref="T:System.InvalidOperationException">List is empty.</exception>
        </member>
        <member name="M:Finsa.CodeServices.Common.Collections.ILinkedList`1.AddLast(`0)">
            <summary>
              Adds given item to the list, so that it is the last item of the list.
            </summary>
            <param name="item">The item to add to the list.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Collections.ILinkedList`1.Append(Finsa.CodeServices.Common.Collections.ILinkedList{`0})">
            <summary>
              Appends given list to this list; after this operation, <paramref name="list"/> is
              cleared, that is, it will result in an empty collection.
            </summary>
            <param name="list">The list to append to this list.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> is null.</exception>
            <remarks>
              If <paramref name="list"/> was created using <see cref="T:Finsa.CodeServices.Common.Collections.SinglyLinkedList`1"/>,
              then this operation is done in constant time.
            </remarks>
        </member>
        <member name="T:Finsa.CodeServices.Common.Collections.IDoublyLinkedList`1">
            <summary>
              </summary>
            <typeparam name="T">The type of the items of the list.</typeparam>
        </member>
        <member name="M:Finsa.CodeServices.Common.Collections.IDoublyLinkedList`1.Append(Finsa.CodeServices.Common.Collections.IDoublyLinkedList{`0})">
            <summary>
              Appends given list to this list; after this operation, <paramref name="list"/> is
              cleared, that is, it will result in an empty collection.
            </summary>
            <param name="list">The list to append to this list.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> is null.</exception>
            <remarks>
              If <paramref name="list"/> was created using <see cref="T:Finsa.CodeServices.Common.Collections.DoublyLinkedList`1"/>,
              then this operation is done in constant time.
            </remarks>
        </member>
        <member name="M:Finsa.CodeServices.Common.Collections.IDoublyLinkedList`1.GetReversedEnumerator">
            <summary>
              Returns an enumerator to iterate over this list in reversed order.
            </summary>
            <returns>An enumerator to iterate over this list in reversed order.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.Collections.IDoublyLinkedList`1.RemoveLast">
            <summary>
              Removes the last item of the list.
            </summary>
            <exception cref="T:System.InvalidOperationException">List is empty.</exception>
        </member>
        <member name="M:Finsa.CodeServices.Common.Collections.IDoublyLinkedList`1.Reverse">
            <summary>
              Reverses the contents of the list, that is, list will be ordered as the enumerator
              returned by <see cref="M:Finsa.CodeServices.Common.Collections.IDoublyLinkedList`1.GetReversedEnumerator"/> before calling this method.
            </summary>
        </member>
        <member name="T:Finsa.CodeServices.Common.Collections.IHashLinkedList`1">
            <summary>
              </summary>
            <typeparam name="T">The type of the items of the list.</typeparam>
        </member>
        <member name="P:Finsa.CodeServices.Common.Collections.IHashLinkedList`1.EqualityComparer">
            <summary>
              The equality comparer used to determine whether two items are equal.
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.Collections.IHashLinkedList`1.First">
            <summary>
              The first item of the list.
            </summary>
            <exception cref="T:System.InvalidOperationException">List is empty.</exception>
        </member>
        <member name="P:Finsa.CodeServices.Common.Collections.IHashLinkedList`1.Last">
            <summary>
              The last item of the list.
            </summary>
            <exception cref="T:System.InvalidOperationException">List is empty.</exception>
        </member>
        <member name="M:Finsa.CodeServices.Common.Collections.IHashLinkedList`1.AddAfter(`0,`0)">
            <summary>
              Adds given item after the item specified.
            </summary>
            <param name="after">The item after which we have to put the new item.</param>
            <param name="toAdd">The item to add to the list.</param>
            <exception cref="T:System.ArgumentException">
              List does not contain item specified by <paramref name="after"/>, or
              <paramref name="toAdd"/> is already contained in the list.
            </exception>
        </member>
        <member name="M:Finsa.CodeServices.Common.Collections.IHashLinkedList`1.AddBefore(`0,`0)">
            <summary>
              Adds given item before the item specified.
            </summary>
            <param name="before">The item before which we have to put the new item.</param>
            <param name="toAdd">The item to add to the list.</param>
            <exception cref="T:System.ArgumentException">
              List does not contain item specified by <paramref name="before"/>, or
              <paramref name="toAdd"/> is already contained in the list.
            </exception>
        </member>
        <member name="M:Finsa.CodeServices.Common.Collections.IHashLinkedList`1.AddFirst(`0)">
            <summary>
              Adds given item to the list, so that it is the first item of the list.
            </summary>
            <param name="item">The item to add to the list.</param>
            <exception cref="T:System.ArgumentException">
              <paramref name="item"/> is already contained in the list.
            </exception>
        </member>
        <member name="M:Finsa.CodeServices.Common.Collections.IHashLinkedList`1.AddLast(`0)">
            <summary>
              Adds given item to the list, so that it is the last item of the list.
            </summary>
            <param name="item">The item to add to the list.</param>
            <exception cref="T:System.ArgumentException">
              <paramref name="item"/> is already contained in the list.
            </exception>
        </member>
        <member name="M:Finsa.CodeServices.Common.Collections.IHashLinkedList`1.GetReversedEnumerator">
            <summary>
              Returns an enumerator to iterate over this list in reversed order.
            </summary>
            <returns>An enumerator to iterate over this list in reversed order.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.Collections.IHashLinkedList`1.RemoveAfter(`0)">
            <summary>
              Removes the item after the item specified by <paramref name="after"/>.
            </summary>
            <param name="after">The item after which we have to apply the remove operation.</param>
            <exception cref="T:System.ArgumentException">
              List does not contain item specified by <paramref name="after"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
              <paramref name="after"/> is the last element of the list.
            </exception>
        </member>
        <member name="M:Finsa.CodeServices.Common.Collections.IHashLinkedList`1.RemoveBefore(`0)">
            <summary>
              Removes the item before the item specified by <paramref name="before"/>.
            </summary>
            <param name="before">The item before which we have to apply the remove operation.</param>
            <exception cref="T:System.ArgumentException">
              List does not contain item specified by <paramref name="before"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
              <paramref name="before"/> is the first element of the list.
            </exception>
        </member>
        <member name="M:Finsa.CodeServices.Common.Collections.IHashLinkedList`1.RemoveFirst">
            <summary>
              Removes the first item of the list.
            </summary>
            <exception cref="T:System.InvalidOperationException">List is empty.</exception>
        </member>
        <member name="M:Finsa.CodeServices.Common.Collections.IHashLinkedList`1.RemoveLast">
            <summary>
              Removes the last item of the list.
            </summary>
            <exception cref="T:System.InvalidOperationException">List is empty.</exception>
        </member>
        <member name="M:Finsa.CodeServices.Common.Collections.IHashLinkedList`1.Reverse">
            <summary>
              Reverses the contents of the list, that is, list will be ordered as the enumerator
              returned by <see cref="M:Finsa.CodeServices.Common.Collections.IHashLinkedList`1.GetReversedEnumerator"/> before calling this method.
            </summary>
        </member>
        <member name="T:Finsa.CodeServices.Common.Collections.ILinkedQueue`1">
            <summary>
              </summary>
            <typeparam name="T">The type of the items of the queue.</typeparam>
        </member>
        <member name="P:Finsa.CodeServices.Common.Collections.ILinkedQueue`1.Count">
            <summary>
              The number of items contained in the queue.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.Collections.ILinkedQueue`1.Dequeue">
            <summary>
              Dequeues the first item.
            </summary>
            <exception cref="T:System.InvalidOperationException">Queue is empty.</exception>
        </member>
        <member name="M:Finsa.CodeServices.Common.Collections.ILinkedQueue`1.Enqueue(`0)">
            <summary>
              Enqueues given item.
            </summary>
            <param name="item">The item to add to queue.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Collections.ILinkedQueue`1.Peek">
            <summary>
              The first item of the queue.
            </summary>
            <exception cref="T:System.InvalidOperationException">Queue is empty.</exception>
        </member>
        <member name="T:Finsa.CodeServices.Common.Collections.ILinkedStack`1">
            <summary>
              </summary>
            <typeparam name="T">The type of the items of the stack.</typeparam>
        </member>
        <member name="P:Finsa.CodeServices.Common.Collections.ILinkedStack`1.Count">
            <summary>
              The number of items contained in the stack.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.Collections.ILinkedStack`1.Pop">
            <summary>
              Pops the first item off the stack.
            </summary>
            <exception cref="T:System.InvalidOperationException">Stack is empty.</exception>
        </member>
        <member name="M:Finsa.CodeServices.Common.Collections.ILinkedStack`1.Push(`0)">
            <summary>
              Pushes given item onto the stack.
            </summary>
            <param name="item">The item to push onto the stack.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Collections.ILinkedStack`1.Top">
            <summary>
              The first item of the stack.
            </summary>
            <exception cref="T:System.InvalidOperationException">Stack is empty.</exception>
        </member>
        <member name="T:Finsa.CodeServices.Common.Collections.LinkedQueue`1">
            <typeparam name="T">The type of the items the queue will contain.</typeparam>
        </member>
        <member name="M:Finsa.CodeServices.Common.Collections.LinkedQueue`1.#ctor">
            <summary>
              Returns a queue implemented using an <see cref="T:Finsa.CodeServices.Common.Collections.ILinkedList`1"/>.
            </summary>
            <returns>A queue implemented using an <see cref="T:Finsa.CodeServices.Common.Collections.ILinkedList`1"/>.</returns>
        </member>
        <member name="T:Finsa.CodeServices.Common.Collections.LinkedStack`1">
            <typeparam name="T">The type of the items the stack will contain.</typeparam>
        </member>
        <member name="M:Finsa.CodeServices.Common.Collections.LinkedStack`1.#ctor">
            <summary>
              Returns a stack implemented using an <see cref="T:Finsa.CodeServices.Common.Collections.IThinLinkedList`1"/>.
            </summary>
            <returns>A stack implemented using an <see cref="T:Finsa.CodeServices.Common.Collections.IThinLinkedList`1"/>.</returns>
        </member>
        <member name="T:Finsa.CodeServices.Common.Collections.MultiValueDictionary`2">
            <summary>
              Represents a dictionary where each key can have more than one value.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the values linked to each key.</typeparam>
            <remarks>
              Initial implementation was taken from the Microsoft.Experimental.Collections package.
            </remarks>
        </member>
        <member name="P:Finsa.CodeServices.Common.Collections.MultiValueDictionary`2.Keys">
            <summary>
              Gets a collection containing the keys in the <see cref="T:Finsa.CodeServices.Common.Collections.MultiValueDictionary`2"/>.
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.Collections.MultiValueDictionary`2.Values">
            <summary>
              Gets a collection containing the values in the <see cref="T:Finsa.CodeServices.Common.Collections.MultiValueDictionary`2"/>.
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.Collections.MultiValueDictionary`2.Item(`0)">
            <summary>
              Gets the value associated with the specified key.
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.Collections.MultiValueDictionary`2.Count">
            <summary>
              Gets the number of key/value pairs contained in the <see cref="T:Finsa.CodeServices.Common.Collections.MultiValueDictionary`2"/>.
            </summary>
        </member>
        <member name="T:Finsa.CodeServices.Common.Collections.ReadOnly.ReadOnlyDictionary`2">
            <summary>
              Provides the base class for a generic read-only dictionary.
            </summary>
            <typeparam name="TKey">The type of keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of values in the dictionary.</typeparam>
            <remarks>
              <para>
                An instance of the <b>ReadOnlyDictionary</b> generic class is always read-only. A
                dictionary that is read-only is simply a dictionary with a wrapper that prevents
                modifying the dictionary; therefore, if changes are made to the underlying dictionary,
                the read-only dictionary reflects those changes. See
                <see cref="T:System.Collections.Generic.Dictionary`2"/> for a modifiable version of this class.
              </para>
              <para>
                <b>Notes to Implementers</b> This base class is provided to make it easier for
                implementers to create a generic read-only custom dictionary. Implementers are
                encouraged to extend this base class instead of creating their own.
              </para>
            </remarks>
        </member>
        <member name="M:Finsa.CodeServices.Common.Collections.ReadOnly.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
              Initializes a new instance of the <see cref="T:ReadOnlyDictionary`2"/> class that
              wraps the supplied <paramref name="dictionaryToWrap"/>.
            </summary>
            <param name="dictionaryToWrap">The <see cref="T:IDictionary`2"/> that will be wrapped.</param>
            <exception cref="T:System.ArgumentNullException">
              Thrown when the dictionary is null.
            </exception>
        </member>
        <member name="P:Finsa.CodeServices.Common.Collections.ReadOnly.ReadOnlyDictionary`2.System#Collections#ICollection#IsSynchronized">
            <summary>
              Gets a value indicating whether access to the dictionary is synchronized (thread safe).
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.Collections.ReadOnly.ReadOnlyDictionary`2.System#Collections#ICollection#SyncRoot">
            <summary>
              Gets an object that can be used to synchronize access to dictionary.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.Collections.ReadOnly.ReadOnlyDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
              For a description of this member, see <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)"/>.
            </summary>
            <param name="array">
              The one-dimensional Array that is the destination of the elements copied from
              ICollection. The Array must have zero-based indexing.
            </param>
            <param name="index">The zero-based index in Array at which copying begins.</param>
        </member>
        <member name="P:Finsa.CodeServices.Common.Collections.ReadOnly.ReadOnlyDictionary`2.Count">
            <summary>
              Gets the number of key/value pairs contained in the <see cref="T:ReadOnlyDictionary`2"></see>.
            </summary>
            <value>The number of key/value pairs.</value>
            <returns>The number of key/value pairs contained in the <see cref="T:ReadOnlyDictionary`2"></see>.</returns>
        </member>
        <member name="P:Finsa.CodeServices.Common.Collections.ReadOnly.ReadOnlyDictionary`2.Keys">
            <summary>
              Gets a collection containing the keys in the <see cref="T:ReadOnlyDictionary{TKey,TValue}"></see>.
            </summary>
            <value>A <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection"/> containing the keys.</value>
            <returns>
              A <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection"/> containing the keys in the <see cref="T:System.Collections.Generic.Dictionary`2"></see>.
            </returns>
        </member>
        <member name="P:Finsa.CodeServices.Common.Collections.ReadOnly.ReadOnlyDictionary`2.Values">
            <summary>
              Gets a collection containing the values of the <see cref="T:ReadOnlyDictionary`2"/>.
            </summary>
            <value>The collection of values.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.Collections.ReadOnly.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly">
            <summary>
              Gets a value indicating whether the dictionary is read-only. This value will always be true.
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.Collections.ReadOnly.ReadOnlyDictionary`2.Item(`0)">
            <summary>
              Gets or sets the value associated with the specified key.
            </summary>
            <returns>
              The value associated with the specified key. If the specified key is not found, a get
              operation throws a <see cref="T:System.Collections.Generic.KeyNotFoundException"/>,
              and a set operation creates a new element with the specified key.
            </returns>
            <param name="key">The key of the value to get or set.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the key is null.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
              The property is retrieved and key does not exist in the collection.
            </exception>
        </member>
        <member name="M:Finsa.CodeServices.Common.Collections.ReadOnly.ReadOnlyDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Add(`0,`1)">
            <summary>
              This method is not supported by the <see cref="T:ReadOnlyDictionary`2"/>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Collections.ReadOnly.ReadOnlyDictionary`2.ContainsKey(`0)">
            <summary>
              Determines whether the <see cref="T:ReadOnlyDictionary`2"/> contains the specified key.
            </summary>
            <returns>
              True if the <see cref="T:ReadOnlyDictionary`2"/> contains an element with the
              specified key; otherwise, false.
            </returns>
            <param name="key">The key to locate in the <see cref="T:ReadOnlyDictionary`2"></see>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the key is null.</exception>
        </member>
        <member name="M:Finsa.CodeServices.Common.Collections.ReadOnly.ReadOnlyDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Remove(`0)">
            <summary>
              This method is not supported by the <see cref="T:ReadOnlyDictionary`2"/>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>True if the element is successfully removed; otherwise, false.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.Collections.ReadOnly.ReadOnlyDictionary`2.TryGetValue(`0,`1@)">
            <summary>
              Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">
              When this method returns, contains the value associated with the specified key, if the
              key is found; otherwise, the default value for the type of the value parameter. This
              parameter is passed uninitialized.
            </param>
            <returns>
              <b>true</b> if the <see cref="T:ReadOnlyDictionary`2"/> contains an element with the
              specified key; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.Collections.ReadOnly.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
              This method is not supported by the <see cref="T:ReadOnlyDictionary`2"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:ICollection`1"/>.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Collections.ReadOnly.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Clear">
            <summary>
              This method is not supported by the <see cref="T:ReadOnlyDictionary`2"/>.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.Collections.ReadOnly.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
              Determines whether the <see cref="T:ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:ICollection`1"/>.</param>
            <returns><b>true</b> if item is found in the <b>ICollection</b>; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.Collections.ReadOnly.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
              Copies the elements of the ICollection to an Array, starting at a particular Array index.
            </summary>
            <param name="array">
              The one-dimensional Array that is the destination of the elements copied from
              ICollection. The Array must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Collections.ReadOnly.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
              This method is not supported by the <see cref="T:ReadOnlyDictionary`2"/>.
            </summary>
            <param name="item">The object to remove from the ICollection.</param>
            <returns>Will never return a value.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.Collections.ReadOnly.ReadOnlyDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns>A IEnumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.Collections.ReadOnly.ReadOnlyDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
              Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An IEnumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:Finsa.CodeServices.Common.Collections.SinglyLinkedList`1">
            <typeparam name="T">The type of the items the list will contain.</typeparam>
        </member>
        <member name="M:Finsa.CodeServices.Common.Collections.SinglyLinkedList`1.#ctor">
            <summary>
              Returns the default implementation of the <see cref="T:Finsa.CodeServices.Common.Collections.ILinkedList`1"/> interface.
            </summary>
            <returns>An implementation of the <see cref="T:Finsa.CodeServices.Common.Collections.ILinkedList`1"/> interface.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.Collections.SinglyLinkedList`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
              Returns the default implementation of the <see cref="T:Finsa.CodeServices.Common.Collections.ILinkedList`1"/> interface,
              using specified equality comparer.
            </summary>
            <param name="equalityComparer">
              The equality comparer that it will be used to determine whether two items are equal.
            </param>
            <returns>
              An implementation of the <see cref="T:Finsa.CodeServices.Common.Collections.ILinkedList`1"/> interface using specified
              equality comparer.
            </returns>
        </member>
        <member name="T:Finsa.CodeServices.Common.Collections.ThinLinkedList`1">
            <typeparam name="T">The type of the items the list will contain.</typeparam>
        </member>
        <member name="M:Finsa.CodeServices.Common.Collections.ThinLinkedList`1.#ctor">
            <summary>
              Returns the default implementation of the <see cref="T:Finsa.CodeServices.Common.Collections.IThinLinkedList`1"/> interface.
            </summary>
            <returns>An implementation of the <see cref="T:Finsa.CodeServices.Common.Collections.IThinLinkedList`1"/> interface.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.Collections.ThinLinkedList`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
              Returns the default implementation of the <see cref="T:Finsa.CodeServices.Common.Collections.IThinLinkedList`1"/>
              interface, using specified equality comparer.
            </summary>
            <param name="equalityComparer">
              The equality comparer that it will be used to determine whether two items are equal.
            </param>
            <returns>
              An implementation of the <see cref="T:Finsa.CodeServices.Common.Collections.IThinLinkedList`1"/> interface using
              specified equality comparer.
            </returns>
        </member>
        <member name="T:Finsa.CodeServices.Common.Core.ErrorMessages">
            <summary>
              Error messages.
            </summary>
        </member>
        <member name="T:Finsa.CodeServices.Common.Portability.PortableEncoding">
            <summary>
              Additional encodings, not found in <see cref="T:System.Text.Encoding"/>.
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.Portability.PortableEncoding.UTF8WithoutBOM">
            <summary>
              UTF8 encoding without the BOM (Byte Order Mark) character.
            </summary>
        </member>
        <member name="T:Finsa.CodeServices.Common.Portability.PortableEnvironment">
            <summary>
              Portable extesions for <see cref="T:System.Environment"/>.
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.Portability.PortableEnvironment.AppIsRunningOnAspNet">
            <summary>
              Gets a value indicating whether this application is running on ASP.NET.
            </summary>
            <value><c>true</c> if this application is running on ASP.NET; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Finsa.CodeServices.Common.Portability.PortableEnvironment.MapPath(System.String)">
            <summary>
              Maps given path into an absolute one.
            </summary>
            <param name="path">The path.</param>
            <returns>Given path mapped into an absolute one.</returns>
        </member>
        <member name="T:Finsa.CodeServices.Common.StringExtensions">
            <summary>
              Extension methods for <see cref="T:System.Enum"/>.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.StringExtensions.ToEnum``1(System.String,System.Boolean)">
            <summary>
              Converts given string into the specified enumeration value, applying the specified
              filter on casing.
            </summary>
            <typeparam name="TEnum">The type of the enumeration.</typeparam>
            <param name="enumString">The string value of one enumeration value.</param>
            <param name="ignoreCase">Whether to consider casing or not while parsing the string.</param>
            <returns>An enumeration value parsed from given string.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.StringExtensions.ToEnum``1(System.String)">
            <summary>
              Converts given string into the specified enumeration value.
            </summary>
            <typeparam name="TEnum">The type of the enumeration.</typeparam>
            <param name="enumString">The string value of one enumeration value.</param>
            <returns>An enumeration value parsed from given string.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.StringExtensions.UrlEncode(System.String)">
            <summary>
              UrlEncodes a string without the requirement for System.Web
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.StringExtensions.UrlDecode(System.String)">
            <summary>
              UrlDecodes a string without requiring System.Web
            </summary>
            <param name="text">String to decode.</param>
            <returns>decoded string</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.StringExtensions.GetUrlEncodedKey(System.String,System.String)">
            <summary>
              Retrieves a value by key from a UrlEncoded string.
            </summary>
            <param name="urlEncoded">UrlEncoded String</param>
            <param name="key">Key to retrieve value for</param>
            <returns>returns the value or "" if the key is not found or the value is blank</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.StringExtensions.HtmlEncode(System.String)">
            <summary>
              HTML-encodes a string and returns the encoded string.
            </summary>
            <param name="text">The text string to encode.</param>
            <returns>The HTML-encoded text.</returns>
        </member>
        <member name="T:Finsa.CodeServices.Common.EquatableObject`1">
            <summary>
              Implements some common <see cref="T:System.Object"/> methods, like <see cref="M:Finsa.CodeServices.Common.EquatableObject`1.Equals(`0)"/> and
              <see cref="M:System.Object.ToString"/>, so that you don't have to copy and paste the same
              boilerplate code.
            </summary>
            <typeparam name="T">The type of the object inheriting this class.</typeparam>
        </member>
        <member name="F:Finsa.CodeServices.Common.EquatableObject`1.HashCodeSeed">
            <summary>
              Seed used to compute hash code.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.EquatableObject`1.GetIdentifyingMembers">
            <summary>
              Returns all property (or field) values that should be used inside
              <see cref="M:Finsa.CodeServices.Common.EquatableObject`1.Equals(`0)"/> or <see cref="M:Finsa.CodeServices.Common.EquatableObject`1.GetHashCode"/>.
            </summary>
            <returns>
              All property (or field) values that should be used inside <see cref="M:Finsa.CodeServices.Common.EquatableObject`1.Equals(`0)"/> or <see cref="M:Finsa.CodeServices.Common.EquatableObject`1.GetHashCode"/>.
            </returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.EquatableObject`1.Equals(`0)">
            <summary>
              Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              true if the current object is equal to the <paramref name="other"/> parameter;
              otherwise, false.
            </returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.EquatableObject`1.Equals(System.Object)">
            <summary>
              Determines whether the specified <see cref="T:System.Object"/>, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance;
              otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.EquatableObject`1.GetHashCode">
            <summary>
              Returns a hash code for this instance.
            </summary>
            <returns>
              A hash code for this instance, suitable for use in hashing algorithms and data
              structures like a hash table.
            </returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.EquatableObject`1.op_Equality(Finsa.CodeServices.Common.EquatableObject{`0},Finsa.CodeServices.Common.EquatableObject{`0})">
            <summary>
              Implements the operator ==, by checking equality of left and right.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.EquatableObject`1.op_Inequality(Finsa.CodeServices.Common.EquatableObject{`0},Finsa.CodeServices.Common.EquatableObject{`0})">
            <summary>
              Implements the operator !=, by checking equality of left and right.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="T:Finsa.CodeServices.Common.EquatableReferenceObject`1">
            <summary>
              Implements some common <see cref="T:System.Object"/> methods, like <see cref="M:Finsa.CodeServices.Common.EquatableReferenceObject`1.Equals(`0)"/> and
              <see cref="M:System.Object.ToString"/>, so that you don't have to copy and paste the same
              boilerplate code.
            </summary>
            <typeparam name="T">The type of the object inheriting this class.</typeparam>
            <remarks>
              Exposes the proper attributes (like
              <see cref="T:System.Runtime.Serialization.DataContractAttribute"/>) so that child objects
              may be properly serialized as references by XML serializers.
            </remarks>
        </member>
        <member name="F:Finsa.CodeServices.Common.EquatableReferenceObject`1.HashCodeSeed">
            <summary>
              Seed used to compute hash code.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.EquatableReferenceObject`1.GetIdentifyingMembers">
            <summary>
              Returns all property (or field) values that should be used inside
              <see cref="M:Finsa.CodeServices.Common.EquatableReferenceObject`1.Equals(`0)"/> or <see cref="M:Finsa.CodeServices.Common.EquatableReferenceObject`1.GetHashCode"/>.
            </summary>
            <returns>
              All property (or field) values that should be used inside <see cref="M:Finsa.CodeServices.Common.EquatableReferenceObject`1.Equals(`0)"/> or <see cref="M:Finsa.CodeServices.Common.EquatableReferenceObject`1.GetHashCode"/>.
            </returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.EquatableReferenceObject`1.Equals(`0)">
            <summary>
              Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              true if the current object is equal to the <paramref name="other"/> parameter;
              otherwise, false.
            </returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.EquatableReferenceObject`1.Equals(System.Object)">
            <summary>
              Determines whether the specified <see cref="T:System.Object"/>, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance;
              otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.EquatableReferenceObject`1.GetHashCode">
            <summary>
              Returns a hash code for this instance.
            </summary>
            <returns>
              A hash code for this instance, suitable for use in hashing algorithms and data
              structures like a hash table.
            </returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.EquatableReferenceObject`1.op_Equality(Finsa.CodeServices.Common.EquatableReferenceObject{`0},Finsa.CodeServices.Common.EquatableReferenceObject{`0})">
            <summary>
              Implements the operator ==, by checking equality of left and right.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.EquatableReferenceObject`1.op_Inequality(Finsa.CodeServices.Common.EquatableReferenceObject{`0},Finsa.CodeServices.Common.EquatableReferenceObject{`0})">
            <summary>
              Implements the operator !=, by checking equality of left and right.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="T:Finsa.CodeServices.Common.FormattableObject">
            <summary>
              Implements a simple <see cref="M:Finsa.CodeServices.Common.FormattableObject.ToString"/>, so that you don't have to copy and paste the
              same boilerplate code over and over again.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.FormattableObject.GetFormattingMembers">
            <summary>
              Returns all property (or field) values, along with their names, so that they can be
              used to produce a meaningful <see cref="M:Finsa.CodeServices.Common.FormattableObject.ToString"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.FormattableObject.ToString">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="T:Finsa.CodeServices.Common.FormattableReferenceObject">
            <summary>
              Implements a simple <see cref="M:Finsa.CodeServices.Common.FormattableReferenceObject.ToString"/>, so that you don't have to copy and paste the
              same boilerplate code over and over again.
            </summary>
            <remarks>
              Exposes the proper attributes (like
              <see cref="T:System.Runtime.Serialization.DataContractAttribute"/>) so that child objects
              may be properly serialized as references by XML serializers.
            </remarks>
        </member>
        <member name="M:Finsa.CodeServices.Common.FormattableReferenceObject.GetFormattingMembers">
            <summary>
              Returns all property (or field) values, along with their names, so that they can be
              used to produce a meaningful <see cref="M:Finsa.CodeServices.Common.FormattableReferenceObject.ToString"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.FormattableReferenceObject.ToString">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="T:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStreamManager">
            <summary>
            Manages pools of RecyclableMemoryStream objects.
            </summary>
            <remarks>
            There are two pools managed in here. The small pool contains same-sized buffers that are handed to streams
            as they write more data.
            
            For scenarios that need to call GetBuffer(), the large pool contains buffers of various sizes, all
            multiples of LargeBufferMultiple (1 MB by default). They are split by size to avoid overly-wasteful buffer
            usage. There should be far fewer 8 MB buffers than 1 MB buffers, for example.
            </remarks>
        </member>
        <member name="T:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStreamManager.EventHandler">
            <summary>
            Generic delegate for handling events without any arguments.
            </summary>
        </member>
        <member name="T:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStreamManager.LargeBufferDiscardedEventHandler">
            <summary>
            Delegate for handling large buffer discard reports.
            </summary>
            <param name="reason">Reason the buffer was discarded.</param>
        </member>
        <member name="T:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStreamManager.StreamLengthReportHandler">
            <summary>
            Delegate for handling reports of stream size when streams are allocated
            </summary>
            <param name="bytes">Bytes allocated.</param>
        </member>
        <member name="T:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStreamManager.UsageReportEventHandler">
            <summary>
            Delegate for handling periodic reporting of memory use statistics.
            </summary>
            <param name="smallPoolInUseBytes">Bytes currently in use in the small pool.</param>
            <param name="smallPoolFreeBytes">Bytes currently free in the small pool.</param>
            <param name="largePoolInUseBytes">Bytes currently in use in the large pool.</param>
            <param name="largePoolFreeBytes">Bytes currently free in the large pool.</param>
        </member>
        <member name="F:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStreamManager.largePools">
            <summary>
            pools[0] = 1x largeBufferMultiple buffers
            pools[1] = 2x largeBufferMultiple buffers
            etc., up to maximumBufferSize
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStreamManager.#ctor">
            <summary>
            Initializes the memory manager with the default block/buffer specifications.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStreamManager.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes the memory manager with the given block requiredSize.
            </summary>
            <param name="blockSize">Size of each block that is pooled. Must be > 0.</param>
            <param name="largeBufferMultiple">Each large buffer will be a multiple of this value.</param>
            <param name="maximumBufferSize">Buffers larger than this are not pooled</param>
            <exception cref="T:System.ArgumentOutOfRangeException">blockSize is not a positive number, or largeBufferMultiple is not a positive number, or maximumBufferSize is less than blockSize.</exception>
            <exception cref="T:System.ArgumentException">maximumBufferSize is not a multiple of largeBufferMultiple</exception>
        </member>
        <member name="P:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStreamManager.BlockSize">
            <summary>
            The size of each block. It must be set at creation and cannot be changed.
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStreamManager.LargeBufferMultiple">
            <summary>
            All buffers are multiples of this number. It must be set at creation and cannot be changed.
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStreamManager.MaximumBufferSize">
            <summary>
            Gets or sets the maximum buffer size.
            </summary>
            <remarks>Any buffer that is returned to the pool that is larger than this will be
            discarded and garbage collected.</remarks>
        </member>
        <member name="P:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStreamManager.SmallPoolFreeSize">
            <summary>
            Number of bytes in small pool not currently in use
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStreamManager.SmallPoolInUseSize">
            <summary>
            Number of bytes currently in use by stream from the small pool
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStreamManager.LargePoolFreeSize">
            <summary>
            Number of bytes in large pool not currently in use
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStreamManager.LargePoolInUseSize">
            <summary>
            Number of bytes currently in use by streams from the large pool
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStreamManager.SmallBlocksFree">
            <summary>
            How many blocks are in the small pool
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStreamManager.LargeBuffersFree">
            <summary>
            How many buffers are in the large pool
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStreamManager.MaximumFreeSmallPoolBytes">
            <summary>
            How many bytes of small free blocks to allow before we start dropping
            those returned to us.
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStreamManager.MaximumFreeLargePoolBytes">
            <summary>
            How many bytes of large free buffers to allow before we start dropping
            those returned to us.
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStreamManager.MaximumStreamCapacity">
            <summary>
            Maximum stream capacity in bytes. Attempts to set a larger capacity will
            result in an exception.
            </summary>
            <remarks>A value of 0 indicates no limit.</remarks>
        </member>
        <member name="P:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStreamManager.GenerateCallStacks">
            <summary>
            Whether to save callstacks for stream allocations. This can help in debugging.
            It should NEVER be turned on generally in production.
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStreamManager.AggressiveBufferReturn">
            <summary>
            Whether dirty buffers can be immediately returned to the buffer pool. E.g. when GetBuffer() is called on
            a stream and creates a single large buffer, if this setting is enabled, the other blocks will be returned
            to the buffer pool immediately.
            Note when enabling this setting that the user is responsible for ensuring that any buffer previously
            retrieved from a stream which is subsequently modified is not used after modification (as it may no longer
            be valid).
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStreamManager.GetBlock">
            <summary>
            Removes and returns a single block from the pool.
            </summary>
            <returns>A byte[] array</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStreamManager.GetLargeBuffer(System.Int32,System.String)">
            <summary>
            Returns a buffer of arbitrary size from the large buffer pool. This buffer
            will be at least the requiredSize and always be a multiple of largeBufferMultiple.
            </summary>
            <param name="requiredSize">The minimum length of the buffer</param>
            <param name="tag">The tag of the stream returning this buffer, for logging if necessary.</param>
            <returns>A buffer of at least the required size.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStreamManager.ReturnLargeBuffer(System.Byte[],System.String)">
            <summary>
            Returns the buffer to the large pool
            </summary>
            <param name="buffer">The buffer to return.</param>
            <param name="tag">The tag of the stream returning this buffer, for logging if necessary.</param>
            <exception cref="T:System.ArgumentNullException">buffer is null</exception>
            <exception cref="T:System.ArgumentException">buffer.Length is not a multiple of LargeBufferMultiple (it did not originate from this pool)</exception>
        </member>
        <member name="M:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStreamManager.ReturnBlocks(System.Collections.Generic.ICollection{System.Byte[]},System.String)">
            <summary>
            Returns the blocks to the pool
            </summary>
            <param name="blocks">Collection of blocks to return to the pool</param>
            <param name="tag">The tag of the stream returning these blocks, for logging if necessary.</param>
            <exception cref="T:System.ArgumentNullException">blocks is null</exception>
            <exception cref="T:System.ArgumentException">blocks contains buffers that are the wrong size (or null) for this memory manager</exception>
        </member>
        <member name="M:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStreamManager.GetStream">
            <summary>
            Retrieve a new MemoryStream object with no tag and a default initial capacity.
            </summary>
            <returns>A MemoryStream.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStreamManager.GetStream(System.String)">
            <summary>
            Retrieve a new MemoryStream object with the given tag and a default initial capacity.
            </summary>
            <param name="tag">A tag which can be used to track the source of the stream.</param>
            <returns>A MemoryStream.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStreamManager.GetStream(System.String,System.Int32)">
            <summary>
            Retrieve a new MemoryStream object with the given tag and at least the given capacity.
            </summary>
            <param name="tag">A tag which can be used to track the source of the stream.</param>
            <param name="requiredSize">The minimum desired capacity for the stream.</param>
            <returns>A MemoryStream.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStreamManager.GetStream(System.String,System.Int32,System.Boolean)">
            <summary>
            Retrieve a new MemoryStream object with the given tag and at least the given capacity, possibly using
            a single continugous underlying buffer.
            </summary>
            <remarks>Retrieving a MemoryStream which provides a single contiguous buffer can be useful in situations
            where the initial size is known and it is desirable to avoid copying data between the smaller underlying
            buffers to a single large one. This is most helpful when you know that you will always call GetBuffer
            on the underlying stream.</remarks>
            <param name="tag">A tag which can be used to track the source of the stream.</param>
            <param name="requiredSize">The minimum desired capacity for the stream.</param>
            <param name="asContiguousBuffer">Whether to attempt to use a single contiguous buffer.</param>
            <returns>A MemoryStream.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStreamManager.GetStream(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Retrieve a new MemoryStream object with the given tag and with contents copied from the provided
            buffer. The provided buffer is not wrapped or used after construction.
            </summary>
            <remarks>The new stream's position is set to the beginning of the stream when returned.</remarks>
            <param name="tag">A tag which can be used to track the source of the stream.</param>
            <param name="buffer">The byte buffer to copy data from.</param>
            <param name="offset">The offset from the start of the buffer to copy from.</param>
            <param name="count">The number of bytes to copy from the buffer.</param>
            <returns>A MemoryStream.</returns>
        </member>
        <member name="E:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStreamManager.BlockCreated">
            <summary>
            Triggered when a new block is created.
            </summary>
        </member>
        <member name="E:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStreamManager.BlockDiscarded">
            <summary>
            Triggered when a new block is created.
            </summary>
        </member>
        <member name="E:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStreamManager.LargeBufferCreated">
            <summary>
            Triggered when a new large buffer is created.
            </summary>
        </member>
        <member name="E:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStreamManager.StreamCreated">
            <summary>
            Triggered when a new stream is created.
            </summary>
        </member>
        <member name="E:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStreamManager.StreamDisposed">
            <summary>
            Triggered when a stream is disposed.
            </summary>
        </member>
        <member name="E:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStreamManager.StreamFinalized">
            <summary>
            Triggered when a stream is finalized.
            </summary>
        </member>
        <member name="E:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStreamManager.StreamLength">
            <summary>
            Triggered when a stream is finalized.
            </summary>
        </member>
        <member name="E:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStreamManager.StreamConvertedToArray">
            <summary>
            Triggered when a user converts a stream to array.
            </summary>
        </member>
        <member name="E:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStreamManager.LargeBufferDiscarded">
            <summary>
            Triggered when a large buffer is discarded, along with the reason for the discard.
            </summary>
        </member>
        <member name="E:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStreamManager.UsageReport">
            <summary>
            Periodically triggered to report usage statistics.
            </summary>
        </member>
        <member name="F:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStreamManager.DefaultInstanceMaximumBufferSize">
            <summary>
              The maximum buffer size for the default instance.
            </summary>
            <remarks>
              Any buffer that is returned to the pool that is larger than this will be discarded and
              garbage collected.
            </remarks>
        </member>
        <member name="F:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStreamManager.DefaultInstanceMaximumFreeSmallPoolBytes">
            <summary>
              How many bytes of small free blocks to allow before the default instance starts
              dropping those returned to it.
            </summary>
        </member>
        <member name="F:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStreamManager.DefaultInstanceMaximumFreeLargePoolBytes">
            <summary>
              How many bytes of large free buffers to allow before the default instance starts
              dropping those returned to it.
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStreamManager.Instance">
            <summary>
              Gets a static instance of this class, configured with default values.
            </summary>
            <value>A static instance of this class, configured with default values.</value>
        </member>
        <member name="T:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStream">
            <summary>
            MemoryStream implementation that deals with pooling and managing memory streams which use potentially large
            buffers.
            </summary>
            <remarks>
            This class works in tandem with the RecylableMemoryStreamManager to supply MemoryStream
            objects to callers, while avoiding these specific problems:
            1. LOH allocations - since all large buffers are pooled, they will never incur a Gen2 GC
            2. Memory waste - A standard memory stream doubles its size when it runs out of room. This
            leads to continual memory growth as each stream approaches the maximum allowed size.
            3. Memory copying - Each time a MemoryStream grows, all the bytes are copied into new buffers.
            This implementation only copies the bytes when GetBuffer is called.
            4. Memory fragmentation - By using homogeneous buffer sizes, it ensures that blocks of memory
            can be easily reused.
            
            The stream is implemented on top of a series of uniformly-sized blocks. As the stream's length grows,
            additional blocks are retrieved from the memory manager. It is these blocks that are pooled, not the stream
            object itself.
            
            The biggest wrinkle in this implementation is when GetBuffer() is called. This requires a single 
            contiguous buffer. If only a single block is in use, then that block is returned. If multiple blocks 
            are in use, we retrieve a larger buffer from the memory manager. These large buffers are also pooled, 
            split by size--they are multiples of a chunk size (1 MB by default).
            
            Once a large buffer is assigned to the stream the blocks are NEVER again used for this stream. All operations take place on the 
            large buffer. The large buffer can be replaced by a larger buffer from the pool as needed. All blocks and large buffers 
            are maintained in the stream until the stream is disposed (unless AggressiveBufferReturn is enabled in the stream manager).
            
            </remarks>
        </member>
        <member name="F:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStream.blocks">
            <summary>
            All of these blocks must be the same size
            </summary>
        </member>
        <member name="F:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStream.largeBuffer">
            <summary>
            This is only set by GetBuffer() if the necessary buffer is larger than a single block size, or on
            construction if the caller immediately requests a single large buffer.
            </summary>
            <remarks>If this field is non-null, it contains the concatenation of the bytes found in the individual
            blocks. Once it is created, this (or a larger) largeBuffer will be used for the life of the stream.
            </remarks>
        </member>
        <member name="F:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStream.dirtyBuffers">
            <summary>
            This list is used to store buffers once they're replaced by something larger.
            This is for the cases where you have users of this class that may hold onto the buffers longer
            than they should and you want to prevent race conditions which could corrupt the data.
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStream.Id">
            <summary>
            Unique identifier for this stream across it's entire lifetime
            </summary>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed</exception>
        </member>
        <member name="P:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStream.Tag">
            <summary>
            A temporary identifier for the current usage of this stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed</exception>
        </member>
        <member name="P:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStream.MemoryManager">
            <summary>
            Gets the memory manager being used by this stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed</exception>
        </member>
        <member name="P:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStream.AllocationStack">
            <summary>
            Callstack of the constructor. It is only set if MemoryManager.GenerateCallStacks is true,
            which should only be in debugging situations.
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStream.DisposeStack">
            <summary>
            Callstack of the Dispose call. It is only set if MemoryManager.GenerateCallStacks is true,
            which should only be in debugging situations.
            </summary>
        </member>
        <member name="F:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStream.byteBuffer">
            <summary>
            This buffer exists so that WriteByte can forward all of its calls to Write
            without creating a new byte[] buffer on every call.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStream.#ctor(Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStreamManager)">
            <summary>
            Allocate a new RecyclableMemoryStream object.
            </summary>
            <param name="memoryManager">The memory manager</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStream.#ctor(Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStreamManager,System.String)">
            <summary>
            Allocate a new RecyclableMemoryStream object
            </summary>
            <param name="memoryManager">The memory manager</param>
            <param name="tag">A string identifying this stream for logging and debugging purposes</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStream.#ctor(Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStreamManager,System.String,System.Int32)">
            <summary>
            Allocate a new RecyclableMemoryStream object
            </summary>
            <param name="memoryManager">The memory manager</param>
            <param name="tag">A string identifying this stream for logging and debugging purposes</param>
            <param name="requestedSize">The initial requested size to prevent future allocations</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStream.#ctor(Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStreamManager,System.String,System.Int32,System.Byte[])">
            <summary>
            Allocate a new RecyclableMemoryStream object
            </summary>
            <param name="memoryManager">The memory manager</param>
            <param name="tag">A string identifying this stream for logging and debugging purposes</param>
            <param name="requestedSize">The initial requested size to prevent future allocations</param>
            <param name="initialLargeBuffer">An initial buffer to use. This buffer will be owned by the stream and returned to the memory manager upon Dispose.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStream.Dispose(System.Boolean)">
            <summary>
            Returns the memory used by this stream back to the pool.
            </summary>
            <param name="disposing">Whether we're disposing (true), or being called by the finalizer (false)</param>
            <remarks>This method is not thread safe and it may not be called more than once.</remarks>
        </member>
        <member name="M:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStream.Close">
            <summary>
            Equivalent to Dispose
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStream.Capacity">
            <summary>
            Gets or sets the capacity
            </summary>
            <remarks>Capacity is always in multiples of the memory manager's block size, unless
            the large buffer is in use.  Capacity never decreases during a stream's lifetime. 
            Explicitly setting the capacity to a lower value than the current value will have no effect. 
            This is because the buffers are all pooled by chunks and there's little reason to 
            allow stream truncation.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed</exception>
        </member>
        <member name="P:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStream.Length">
            <summary>
            Gets the number of bytes written to this stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed</exception>
        </member>
        <member name="P:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStream.Position">
            <summary>
            Gets the current position in the stream
            </summary>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed</exception>
        </member>
        <member name="P:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStream.CanRead">
            <summary>
            Whether the stream can currently read
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStream.CanSeek">
            <summary>
            Whether the stream can currently seek
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStream.CanTimeout">
            <summary>
            Always false
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStream.CanWrite">
            <summary>
            Whether the stream can currently write
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStream.GetBuffer">
            <summary>
            Returns a single buffer containing the contents of the stream.
            The buffer may be longer than the stream length.
            </summary>
            <returns>A byte[] buffer</returns>
            <remarks>IMPORTANT: Doing a Write() after calling GetBuffer() invalidates the buffer. The old buffer is held onto
            until Dispose is called, but the next time GetBuffer() is called, a new buffer from the pool will be required.</remarks>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed</exception>
        </member>
        <member name="M:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStream.ToArray">
            <summary>
            Returns a new array with a copy of the buffer's contents. You should almost certainly be using GetBuffer combined with the Length to 
            access the bytes in this stream. Calling ToArray will destroy the benefits of pooled buffers, but it is included
            for the sake of completeness.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed</exception>
        </member>
        <member name="M:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads from the current position into the provided buffer
            </summary>
            <param name="buffer">Destination buffer</param>
            <param name="offset">Offset into buffer at which to start placing the read bytes.</param>
            <param name="count">Number of bytes to read.</param>
            <returns>The number of bytes read</returns>
            <exception cref="T:System.ArgumentNullException">buffer is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">offset or count is less than 0</exception>
            <exception cref="T:System.ArgumentException">offset subtracted from the buffer length is less than count</exception>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed</exception>
        </member>
        <member name="M:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes the buffer to the stream
            </summary>
            <param name="buffer">Source buffer</param>
            <param name="offset">Start position</param>
            <param name="count">Number of bytes to write</param>
            <exception cref="T:System.ArgumentNullException">buffer is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">offset or count is negative</exception>
            <exception cref="T:System.ArgumentException">buffer.Length - offset is not less than count</exception>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed</exception>
        </member>
        <member name="M:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStream.ToString">
            <summary>
            Returns a useful string for debugging. This should not normally be called in actual production code.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStream.WriteByte(System.Byte)">
            <summary>
            Writes a single byte to the current position in the stream.
            </summary>
            <param name="value">byte value to write</param>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed</exception>
        </member>
        <member name="M:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStream.ReadByte">
            <summary>
            Reads a single byte from the current position in the stream.
            </summary>
            <returns>The byte at the current position, or -1 if the position is at the end of the stream.</returns>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed</exception>
        </member>
        <member name="M:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the stream
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">value is negative or larger than MaxStreamLength</exception>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed</exception>
        </member>
        <member name="M:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position to the offset from the seek location
            </summary>
            <param name="offset">How many bytes to move</param>
            <param name="loc">From where</param>
            <returns>The new position</returns>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">offset is larger than MaxStreamLength</exception>
            <exception cref="T:System.ArgumentException">Invalid seek origin</exception>
            <exception cref="T:System.IO.IOException">Attempt to set negative position</exception>
        </member>
        <member name="M:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStream.WriteTo(System.IO.Stream)">
            <summary>
            Synchronously writes this stream's bytes to the parameter stream.
            </summary>
            <param name="stream">Destination stream</param>
            <remarks>Important: This does a synchronous write, which may not be desired in some situations</remarks>
        </member>
        <member name="M:Finsa.CodeServices.Common.IO.RecyclableMemoryStream.RecyclableMemoryStream.ReleaseLargeBuffer">
            <summary>
            Release the large buffer (either stores it for eventual release or returns it immediately).
            </summary>
        </member>
        <member name="T:Finsa.CodeServices.Common.KeyValuePair">
            <summary>
              A creation method for <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.KeyValuePair.Create``2(``0,``1)">
            <summary>
              Creates a new key-value pair with the specified key and value.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>A new key-value pair with the specified key and value.</returns>
        </member>
        <member name="T:Finsa.CodeServices.Common.ObjectExtensions">
            <summary>
              Extension methods for <see cref="T:System.Object"/>.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.ObjectExtensions.SafeGetHashCode``1(``0)">
            <summary>
              Zero if <paramref name="obj"/> is null, otherwise it simply calls GetHashCode.
            </summary>
            <typeparam name="T">Type of the object.</typeparam>
            <param name="obj">The object.</param>
            <returns>
              Zero if <paramref name="obj"/> is null, otherwise it simply calls GetHashCode.
            </returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.ObjectExtensions.SafeToString``1(``0)">
            <summary>
              An empty string if <paramref name="obj"/> is null, otherwise it simply calls ToString.
            </summary>
            <typeparam name="T">Type of the object.</typeparam>
            <param name="obj">The object.</param>
            <returns>
              An empty string if <paramref name="obj"/> is null, otherwise it simply calls ToString.
            </returns>
        </member>
        <member name="T:Finsa.CodeServices.Common.IOption">
            <summary>
              Represents an optional type.
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.IOption.HasValue">
            <summary>
              Gets a value indicating whether this instance has value.
            </summary>
            <value><c>true</c> if this instance has value; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.IOption.Value">
            <summary>
              Gets the underlying value, if <see cref="P:Finsa.CodeServices.Common.IOption.HasValue"/> is <c>true</c>.
            </summary>
            <value>The underlying value, if <see cref="P:Finsa.CodeServices.Common.IOption.HasValue"/> is <c>true</c>.</value>
            <exception cref="T:System.InvalidOperationException">
              There is no underlying value, that is, <see cref="P:Finsa.CodeServices.Common.IOption.HasValue"/> is <c>false</c>.
            </exception>
        </member>
        <member name="T:Finsa.CodeServices.Common.IOption`1">
            <summary>
              Represents an optional type. Similar to <see cref="T:System.Nullable`1"/>, but it also works with classes.
            </summary>
            <typeparam name="T">The type of the optional object.</typeparam>
        </member>
        <member name="P:Finsa.CodeServices.Common.IOption`1.Value">
            <summary>
              Gets the underlying value, if <see cref="P:Finsa.CodeServices.Common.IOption.HasValue"/> is <c>true</c>.
            </summary>
            <value>The underlying value, if <see cref="P:Finsa.CodeServices.Common.IOption.HasValue"/> is <c>true</c>.</value>
            <exception cref="T:System.InvalidOperationException">
              There is no underlying value, that is, <see cref="P:Finsa.CodeServices.Common.IOption.HasValue"/> is <c>false</c>.
            </exception>
        </member>
        <member name="T:Finsa.CodeServices.Common.Option">
            <summary>
              Creation methods and utilities for the <see cref="T:Finsa.CodeServices.Common.Option`1"/> type.
            </summary>
        </member>
        <member name="F:Finsa.CodeServices.Common.Option.ToStringWhenNoValue">
            <summary>
              Used for <see cref="M:Finsa.CodeServices.Common.Option`1.ToString"/> when the option has no value.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.Option.None``1">
            <summary>
              Builds an instance with no value.
            </summary>
            <typeparam name="T">The type of the optional object.</typeparam>
            <returns>An instance with no value.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.Option.Some``1(``0)">
            <summary>
              Builds an instance with specified value.
            </summary>
            <typeparam name="T">The type of the optional object.</typeparam>
            <param name="value">The value.</param>
            <returns>An instance with specified value.</returns>
            <remarks>This method should be used when <typeparamref name="T"/> is a class.</remarks>
        </member>
        <member name="M:Finsa.CodeServices.Common.Option.SomeByRef``1(``0@)">
            <summary>
              Builds an instance with specified value.
            </summary>
            <typeparam name="T">The type of the optional object.</typeparam>
            <param name="value">The value.</param>
            <returns>An instance with specified value.</returns>
            <remarks>This method should be used when <typeparamref name="T"/> is a struct.</remarks>
        </member>
        <member name="M:Finsa.CodeServices.Common.Option.Do``1(Finsa.CodeServices.Common.Option{``0},System.Action{``0})">
            <summary>
              Performs given action if and only if the option has a value.
            </summary>
            <typeparam name="T">The type of the optional object.</typeparam>
            <param name="option">The option.</param>
            <param name="doWhenSome">The action to be performed when the option has a value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="doWhenSome"/> is null.</exception>
        </member>
        <member name="M:Finsa.CodeServices.Common.Option.Do``1(Finsa.CodeServices.Common.Option{``0},System.Action{``0},System.Action)">
            <summary>
              Performs <paramref name="doWhenSome"/> action if option has a value, otherwise it
              performs <paramref name="doWhenNone"/>.
            </summary>
            <typeparam name="T">The type of the optional object.</typeparam>
            <param name="option">The option.</param>
            <param name="doWhenSome">The action to be performed when the option has a value.</param>
            <param name="doWhenNone">The action to be performed when the option has no value.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="doWhenSome"/> or <paramref name="doWhenNone"/> are null.
            </exception>
        </member>
        <member name="M:Finsa.CodeServices.Common.Option.DoAsync``1(Finsa.CodeServices.Common.Option{``0},System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
              Asynchronously performs given action if and only if the option has a value.
            </summary>
            <typeparam name="T">The type of the optional object.</typeparam>
            <param name="option">The option.</param>
            <param name="doWhenSome">The action to be performed when the option has a value.</param>
            <returns>
              A task which tracks given action, or <see cref="M:Finsa.CodeServices.Common.Option.None``1"/> if option had no value.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="doWhenSome"/> is null.</exception>
        </member>
        <member name="M:Finsa.CodeServices.Common.Option.DoAsync``1(Finsa.CodeServices.Common.Option{``0},System.Func{``0,System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task})">
            <summary>
              Asynchronously performs <paramref name="doWhenSome"/> action if option has a value,
              otherwise it performs <paramref name="doWhenNone"/>.
            </summary>
            <typeparam name="T">The type of the optional object.</typeparam>
            <param name="option">The option.</param>
            <param name="doWhenSome">The action to be performed when the option has a value.</param>
            <param name="doWhenNone">The action to be performed when the option has no value.</param>
            <returns>A task which tracks chosen action.</returns>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="doWhenSome"/> or <paramref name="doWhenNone"/> are null.
            </exception>
        </member>
        <member name="M:Finsa.CodeServices.Common.Option.IsNone``1(Finsa.CodeServices.Common.Option{``0})">
            <summary>
              Determines whether this instance has no value.
            </summary>
            <typeparam name="T">The type of the optional object.</typeparam>
            <param name="option">The option.</param>
            <returns>Whether this instance has no value.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.Option.IsSome``1(Finsa.CodeServices.Common.Option{``0})">
            <summary>
              Determines whether this instance has a value.
            </summary>
            <typeparam name="T">The type of the optional object.</typeparam>
            <param name="option">The option.</param>
            <returns>Whether this instance has a value.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.Option.ToOption``1(``0)">
            <summary>
              Returns an option wrapping given type.
            </summary>
            <typeparam name="T">The type of the optional object.</typeparam>
            <param name="value">The value.</param>
            <returns>An option wrapping given type.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.Option.ValueOrDefault``1(Finsa.CodeServices.Common.Option{``0})">
            <summary>
              If given option has a value, the it returns that; otherwise, it returns the default
              value for <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of the optional object.</typeparam>
            <param name="option">The option.</param>
            <returns>
              If given option has a value, the it returns that; otherwise, it returns the default
              value for <typeparamref name="T"/>.
            </returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.Option.ValueOr``1(Finsa.CodeServices.Common.Option{``0},``0)">
            <summary>
              If given option has a value, the it returns that; otherwise, it returns <paramref name="valueWhenNone"/>.
            </summary>
            <typeparam name="T">The type of the optional object.</typeparam>
            <param name="option">The option.</param>
            <param name="valueWhenNone">The value returned when the option has no value.</param>
            <returns>
              If given option has a value, the it returns that; otherwise, it returns <paramref name="valueWhenNone"/>.
            </returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.Option.ValueOr``1(Finsa.CodeServices.Common.Option{``0},System.Func{``0})">
            <summary>
              If given option has a value, the it returns that; otherwise, it returns the output of <paramref name="valueGetterWhenNone"/>.
            </summary>
            <typeparam name="T">The type of the optional object.</typeparam>
            <param name="option">The option.</param>
            <param name="valueGetterWhenNone">The function called when the option has no value.</param>
            <returns>
              If given option has a value, the it returns that; otherwise, it returns the output of <paramref name="valueGetterWhenNone"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="valueGetterWhenNone"/> is null, which might cause a
              <see cref="T:System.NullReferenceException"/> if given option has no value.
            </exception>
        </member>
        <member name="M:Finsa.CodeServices.Common.Option.FirstAsOption``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
              Returns an option whose value is the first element of the enumerable, if it exists;
              otherwise, it simply returns <see cref="M:Finsa.CodeServices.Common.Option.None``1"/>.
            </summary>
            <typeparam name="T">The type of the optional object.</typeparam>
            <param name="enumerable">The enumerable from which the first element must be picked.</param>
            <returns>
              An option whose value is the first element of the enumerable, if it exists; otherwise,
              it simply returns <see cref="M:Finsa.CodeServices.Common.Option.None``1"/>.
            </returns>
        </member>
        <member name="T:Finsa.CodeServices.Common.Option`1">
            <summary>
              An immutable option type.
            </summary>
            <typeparam name="T">The type of the optional object.</typeparam>
            <remarks>
              Option types cannot be nested. Therefore, the definition of types like
              <c>Option&lt;Option&lt;int&gt;&gt;</c> and
              <c>Option&lt;Option&lt;Option&lt;string&gt;&gt;&gt;</c>, even if it will be allowed by the
              compiler, it will throw an hard error at runtime.
            </remarks>
        </member>
        <member name="M:Finsa.CodeServices.Common.Option`1.#cctor">
            <summary>
              Ensures that the option value type is not an option itself.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.Option`1.#ctor(`0)">
            <summary>
              Initializes a new instance of the <see cref="T:Finsa.CodeServices.Common.Option`1"/> struct. Use
              <see cref="M:Finsa.CodeServices.Common.Option.Some``1(``0)"/> to properly create a new <see cref="T:Finsa.CodeServices.Common.Option`1"/> struct.
            </summary>
            <param name="value">The value.</param>
            <remarks>This constructor should be used when <typeparamref name="T"/> is a class.</remarks>
        </member>
        <member name="M:Finsa.CodeServices.Common.Option`1.#ctor(`0@)">
            <summary>
              Initializes a new instance of the <see cref="T:Finsa.CodeServices.Common.Option`1"/> struct. Use
              <see cref="M:Finsa.CodeServices.Common.Option.SomeByRef``1(``0@)"/> to properly create a new
              <see cref="T:Finsa.CodeServices.Common.Option`1"/> struct.
            </summary>
            <param name="value">The value.</param>
            <remarks>This constructor should be used when <typeparamref name="T"/> is a struct.</remarks>
        </member>
        <member name="P:Finsa.CodeServices.Common.Option`1.InternalValue">
            <summary>
              Gets the underlying value, even if <see cref="P:Finsa.CodeServices.Common.Option`1.HasValue"/> is <c>false</c>.
            </summary>
            <value>The underlying value, even if <see cref="P:Finsa.CodeServices.Common.Option`1.HasValue"/> is <c>false</c>.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.Option`1.HasValue">
            <summary>
              Gets a value indicating whether this instance has value.
            </summary>
            <value><c>true</c> if this instance has value; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.Option`1.Value">
            <summary>
              Gets the underlying value, if <see cref="P:Finsa.CodeServices.Common.Option`1.HasValue"/> is <c>true</c>.
            </summary>
            <value>The underlying value, if <see cref="P:Finsa.CodeServices.Common.Option`1.HasValue"/> is <c>true</c>.</value>
            <exception cref="T:System.InvalidOperationException">
              There is no underlying value, that is, <see cref="P:Finsa.CodeServices.Common.Option`1.HasValue"/> is <c>false</c>.
            </exception>
        </member>
        <member name="P:Finsa.CodeServices.Common.Option`1.Finsa#CodeServices#Common#IOption#Value">
            <summary>
              Gets the underlying value, if <see cref="P:Finsa.CodeServices.Common.Option`1.HasValue"/> is <c>true</c>.
            </summary>
            <value>The underlying value, if <see cref="P:Finsa.CodeServices.Common.Option`1.HasValue"/> is <c>true</c>.</value>
            <exception cref="T:System.InvalidOperationException">
              There is no underlying value, that is, <see cref="P:Finsa.CodeServices.Common.Option`1.HasValue"/> is <c>false</c>.
            </exception>
        </member>
        <member name="M:Finsa.CodeServices.Common.Option`1.GetEnumerator">
            <summary>
              An enumerator for a sequence containing the value, if available, or an empty sequence,
              if value is not available.
            </summary>
            <returns>
              An enumerator for a sequence containing the value, if available, or an empty sequence,
              if value is not available.
            </returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.Option`1.Equals(`0)">
            <summary>
              Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              true if the current object is equal to the <paramref name="other"/> parameter;
              otherwise, false.
            </returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.Option`1.Equals(`0@)">
            <summary>
              Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              true if the current object is equal to the <paramref name="other"/> parameter;
              otherwise, false.
            </returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.Option`1.Equals(Finsa.CodeServices.Common.IOption{`0})">
            <summary>
              Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              true if the current object is equal to the <paramref name="other"/> parameter;
              otherwise, false.
            </returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.Option`1.Equals(Finsa.CodeServices.Common.Option{`0})">
            <summary>
              Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              true if the current object is equal to the <paramref name="other"/> parameter;
              otherwise, false.
            </returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.Option`1.Equals(System.Object)">
            <summary>
              Determines whether the specified <see cref="T:System.Object"/>, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance;
              otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.Option`1.GetHashCode">
            <summary>
              Returns a hash code for this instance.
            </summary>
            <returns>
              A hash code for this instance, suitable for use in hashing algorithms and data
              structures like a hash table.
            </returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.Option`1.op_Equality(Finsa.CodeServices.Common.Option{`0},`0)">
            <summary>
              Implements the operator ==.
            </summary>
            <param name="left">The left option.</param>
            <param name="right">The right value.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.Option`1.op_Inequality(Finsa.CodeServices.Common.Option{`0},`0)">
            <summary>
              Implements the operator !=.
            </summary>
            <param name="left">The left option.</param>
            <param name="right">The right value.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.Option`1.op_Equality(Finsa.CodeServices.Common.Option{`0},Finsa.CodeServices.Common.IOption{`0})">
            <summary>
              Implements the operator ==.
            </summary>
            <param name="left">The left option.</param>
            <param name="right">The right option.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.Option`1.op_Inequality(Finsa.CodeServices.Common.Option{`0},Finsa.CodeServices.Common.IOption{`0})">
            <summary>
              Implements the operator !=.
            </summary>
            <param name="left">The left option.</param>
            <param name="right">The right option.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.Option`1.op_Equality(Finsa.CodeServices.Common.Option{`0},Finsa.CodeServices.Common.Option{`0})">
            <summary>
              Implements the operator ==.
            </summary>
            <param name="left">The left option.</param>
            <param name="right">The right option.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.Option`1.op_Inequality(Finsa.CodeServices.Common.Option{`0},Finsa.CodeServices.Common.Option{`0})">
            <summary>
              Implements the operator !=.
            </summary>
            <param name="left">The left option.</param>
            <param name="right">The right option.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.Option`1.ToString">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.Option`1.op_Implicit(`0)~Finsa.CodeServices.Common.Option{`0}">
            <summary>
              Converts given object into an option. The result is an option whose value has been, of
              course, specified (that is, the <see cref="P:Finsa.CodeServices.Common.IOption.HasValue"/> is true).
            </summary>
            <param name="value">The object that will be part of the returned option.</param>
            <remarks>This cast is implicit because it is inherently safe.</remarks>
        </member>
        <member name="M:Finsa.CodeServices.Common.Option`1.op_Explicit(Finsa.CodeServices.Common.Option{`0})~`0">
            <summary>
              Extracts the value from given option. This might result in an
              <see cref="T:System.InvalidOperationException"/> if the option had no value.
            </summary>
            <param name="option">The option from which the value should be extraced.</param>
            <remarks>This cast is explicit because it is inherently *unsafe*.</remarks>
        </member>
        <member name="T:Finsa.CodeServices.Common.Reflection.ServiceLocator">
            <summary>
              A quick and dirty service locator.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.Reflection.ServiceLocator.Load``1(System.String)">
            <summary>
              Creates a new instance for specified type, which must implement given <typeparamref name="TInterface"/>.
            </summary>
            <typeparam name="TInterface">The type of the interface.</typeparam>
            <param name="fullyQualifiedTypeName">Fully qualified type name.</param>
            <returns>A new instance for specified type.</returns>
            <exception cref="T:System.ArgumentException">
              Something bad happened while loading specified type, which may be related to given
              type name.
            </exception>
            <exception cref="T:System.InvalidOperationException">
              Specified type argument is not an interface or specified type name is a class without
              an empty constructor.
            </exception>
        </member>
        <member name="T:Finsa.CodeServices.Common.Testing.MockObject`1">
            <summary>
              A mock object which can be used in unit testing. It allows tracing of method and property usage.
            </summary>
            <typeparam name="TObj">The type of the mock object.</typeparam>
        </member>
        <member name="P:Finsa.CodeServices.Common.Testing.MockObject`1.Calls">
            <summary>
              Gets the calls of methods and properties which have been received by the mock object.
            </summary>
            <value>
              The calls of methods and properties which have been received by the mock object.
            </value>
        </member>
        <member name="E:Finsa.CodeServices.Common.Testing.MockObject`1.MethodInvoked">
            <summary>
              Occurs when a mock method has been invoked.
            </summary>
        </member>
        <member name="E:Finsa.CodeServices.Common.Testing.MockObject`1.PropertyGetterInvoked">
            <summary>
              Occurs when a mock property getter has been invoked.
            </summary>
        </member>
        <member name="E:Finsa.CodeServices.Common.Testing.MockObject`1.PropertySetterInvoked">
            <summary>
              Occurs when a mock property setter has been invoked.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.Testing.MockObject`1.Reset">
            <summary>
              Resets the mock to its initial state.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.Testing.MockObject`1.OnMethodInvoked``1(``0,System.String,System.Object[])">
            <summary>
              Called when a mock method has been invoked.
            </summary>
            <typeparam name="T">The type of the return value.</typeparam>
            <param name="returnValue">The return value.</param>
            <param name="methodName">Name of the method.</param>
            <param name="parameters">The parameters.</param>
            <returns>The return value.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.Testing.MockObject`1.OnPropertyGetterInvoked``1(``0,System.String)">
            <summary>
              Called when a mock property getter has been invoked.
            </summary>
            <typeparam name="T">The type of the return value.</typeparam>
            <param name="returnValue">The return value.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>The return value.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.Testing.MockObject`1.OnPropertySetterInvoked``1(``0,System.String)">
            <summary>
              Called when a mock property setter has been invoked.
            </summary>
            <typeparam name="T">The type of the parameter.</typeparam>
            <param name="parameter">The parameter.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>The parameter.</returns>
        </member>
        <member name="T:Finsa.CodeServices.Common.Testing.MockCall">
            <summary>
              Represents a call to a mock method or property.
            </summary>
        </member>
        <member name="F:Finsa.CodeServices.Common.Testing.MockCall.NoParameters">
            <summary>
              The value used when there are no parameters.
            </summary>
        </member>
        <member name="F:Finsa.CodeServices.Common.Testing.MockCall.NoReturnValue">
            <summary>
              The value used when there is no return value.
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.Testing.MockCall.Type">
            <summary>
              Gets or sets the type of the call.
            </summary>
            <value>The type of the call.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.Testing.MockCall.Name">
            <summary>
              Gets or sets the name of the method or property.
            </summary>
            <value>The name of the method or property.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.Testing.MockCall.Parameters">
            <summary>
              Gets or sets the parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.Testing.MockCall.ReturnValue">
            <summary>
              Gets or sets the return value.
            </summary>
            <value>The return value.</value>
        </member>
        <member name="T:Finsa.CodeServices.Common.Testing.MockCallType">
            <summary>
              The type of the mock call, used in the call stack.
            </summary>
        </member>
        <member name="F:Finsa.CodeServices.Common.Testing.MockCallType.Method">
            <summary>
              The method call type.
            </summary>
        </member>
        <member name="F:Finsa.CodeServices.Common.Testing.MockCallType.PropertyGetter">
            <summary>
              The property getter call type.
            </summary>
        </member>
        <member name="F:Finsa.CodeServices.Common.Testing.MockCallType.PropertySetter">
            <summary>
              The property setter call type.
            </summary>
        </member>
        <member name="T:Finsa.CodeServices.Common.Testing.MockMethodInvoked`1">
            <summary>
              Triggered when a mock method is invoked.
            </summary>
            <typeparam name="TObj">The type of the mock object.</typeparam>
            <param name="mock">The mock object instance.</param>
            <param name="args">The event arguments.</param>
        </member>
        <member name="T:Finsa.CodeServices.Common.Testing.MockPropertyGetterInvoked`1">
            <summary>
              Triggered when a mock property is read from.
            </summary>
            <typeparam name="TObj">The type of the mock object.</typeparam>
            <param name="mock">The mock object instance.</param>
            <param name="args">The event arguments.</param>
        </member>
        <member name="T:Finsa.CodeServices.Common.Testing.MockPropertySetterInvoked`1">
            <summary>
              Triggered when a mock property is written into.
            </summary>
            <typeparam name="TObj">The type of the mock object.</typeparam>
            <param name="mock">The mock object instance.</param>
            <param name="args">The event arguments.</param>
        </member>
        <member name="T:Finsa.CodeServices.Common.Testing.MockMethodInvokedArgs">
            <summary>
              Arguments attached to a method call event.
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.Testing.MockMethodInvokedArgs.MethodName">
            <summary>
              Gets or sets the name of the method that has been called.
            </summary>
            <value>The name of the property that has been called.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.Testing.MockMethodInvokedArgs.Parameters">
            <summary>
              Gets or sets the parameters passed to the method.
            </summary>
            <value>The parameters passed to the method.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.Testing.MockMethodInvokedArgs.ReturnValue">
            <summary>
              Gets or sets the method return value, if any.
            </summary>
            <value>The method return value, if any.</value>
        </member>
        <member name="T:Finsa.CodeServices.Common.Testing.MockPropertyGetterInvokedArgs">
            <summary>
              Arguments attached to a property read event.
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.Testing.MockPropertyGetterInvokedArgs.PropertyName">
            <summary>
              Gets or sets the name of the property that has been read.
            </summary>
            <value>The name of the property that has been read.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.Testing.MockPropertyGetterInvokedArgs.ReturnValue">
            <summary>
              Gets or sets the value returned by the property.
            </summary>
            <value>The value returned by the property.</value>
        </member>
        <member name="T:Finsa.CodeServices.Common.Testing.MockPropertySetterInvokedArgs">
            <summary>
              Arguments attached to a property write event.
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.Testing.MockPropertySetterInvokedArgs.PropertyName">
            <summary>
              Gets or sets the name of the property that has been written.
            </summary>
            <value>The name of the property that has been written.</value>
        </member>
        <member name="P:Finsa.CodeServices.Common.Testing.MockPropertySetterInvokedArgs.Parameter">
            <summary>
              Gets or sets the value which has been written into the property.
            </summary>
            <value>The value which has been written into the property.</value>
        </member>
        <member name="T:Finsa.CodeServices.Common.Testing.RandomDataGenerator">
            <summary>
              Generates different kind of random data. Useful for unit testing and benchmarking.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.Testing.RandomDataGenerator.GenerateRandomStringLists(System.Int32,System.Int32)">
            <summary>
              Generates an infinite sequence of random string lists, whose length is between
              <paramref name="minItemCount"/> and <paramref name="maxItemCount"/>.
            </summary>
            <param name="minItemCount">The minimum number of items each random list will contain.</param>
            <param name="maxItemCount">The maximum number of items each random list will contain.</param>
            <returns></returns>
        </member>
        <member name="T:Finsa.CodeServices.Common.Text.Operation">
            -
            The data structure representing a diff is a Linked list of Diff objects:
            {Diff(Operation.DELETE, "Hello"), Diff(Operation.INSERT, "Goodbye"),
             Diff(Operation.EQUAL, " world.")}
            which means: delete "Hello", add "Goodbye" and keep " world."
        </member>
        <member name="T:Finsa.CodeServices.Common.Text.Diff">
            Class representing one diff operation.
        </member>
        <member name="M:Finsa.CodeServices.Common.Text.Diff.#ctor(Finsa.CodeServices.Common.Text.Operation,System.String)">
            Constructor.  Initializes the diff with the provided values.
            @param operation One of INSERT, DELETE or EQUAL.
            @param text The text being applied.
        </member>
        <member name="M:Finsa.CodeServices.Common.Text.Diff.ToString">
            Display a human-readable version of this Diff.
            @return text version.
        </member>
        <member name="M:Finsa.CodeServices.Common.Text.Diff.Equals(System.Object)">
            Is this Diff equivalent to another Diff?
            @param d Another Diff to compare against.
            @return true or false.
        </member>
        <member name="T:Finsa.CodeServices.Common.Text.Patch">
            Class representing one patch operation.
        </member>
        <member name="M:Finsa.CodeServices.Common.Text.Patch.ToString">
            Emmulate GNU diff's format.
            Header: @@ -382,8 +481,9 @@
            Indicies are printed as 1-based, not 0-based.
            @return The GNU diff string.
        </member>
        <member name="T:Finsa.CodeServices.Common.Text.diff_match_patch">
            Class containing the diff, match and patch methods.
            Also Contains the behaviour settings.
        </member>
        <member name="M:Finsa.CodeServices.Common.Text.diff_match_patch.diff_main(System.String,System.String)">
            Find the differences between two texts.
            Run a faster slightly less optimal diff
            This method allows the 'checklines' of diff_main() to be optional.
            Most of the time checklines is wanted, so default to true.
            @param text1 Old string to be diffed.
            @param text2 New string to be diffed.
            @return Linked List of Diff objects.
        </member>
        <member name="M:Finsa.CodeServices.Common.Text.diff_match_patch.diff_main(System.String,System.String,System.Boolean)">
            Find the differences between two texts.  Simplifies the problem by
            stripping any common prefix or suffix off the texts before diffing.
            @param text1 Old string to be diffed.
            @param text2 New string to be diffed.
            @param checklines Speedup flag.  If false, then don't run a
                line-level diff first to identify the changed areas.
                If true, then run a faster slightly less optimal diff
            @return Linked List of Diff objects.
        </member>
        <member name="M:Finsa.CodeServices.Common.Text.diff_match_patch.diff_compute(System.String,System.String,System.Boolean)">
            Find the differences between two texts.  Assumes that the texts do not
            have any common prefix or suffix.
            @param text1 Old string to be diffed.
            @param text2 New string to be diffed.
            @param checklines Speedup flag.  If false, then don't run a
                line-level diff first to identify the changed areas.
                If true, then run a faster slightly less optimal diff
            @return Linked List of Diff objects.
        </member>
        <member name="M:Finsa.CodeServices.Common.Text.diff_match_patch.diff_linesToChars(System.String,System.String)">
            Split two texts into a list of strings.  Reduce the texts to a string of
            hashes where each Unicode character represents one line.
            @param text1 First string.
            @param text2 Second string.
            @return Three element Object array, containing the encoded text1, the
                encoded text2 and the List of unique strings.  The zeroth element
                of the List of unique strings is intentionally blank.
        </member>
        <member name="M:Finsa.CodeServices.Common.Text.diff_match_patch.diff_linesToCharsMunge(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.Dictionary{System.String,System.Int32})">
            Split a text into a list of strings.  Reduce the texts to a string of
            hashes where each Unicode character represents one line.
            @param text String to encode.
            @param lineArray List of unique strings.
            @param lineHash Map of strings to indices.
            @return Encoded string.
        </member>
        <member name="M:Finsa.CodeServices.Common.Text.diff_match_patch.diff_charsToLines(System.Collections.Generic.ICollection{Finsa.CodeServices.Common.Text.Diff},System.Collections.Generic.List{System.String})">
            Rehydrate the text in a diff from a string of line hashes to real lines of
            text.
            @param diffs LinkedList of Diff objects.
            @param lineArray List of unique strings.
        </member>
        <member name="M:Finsa.CodeServices.Common.Text.diff_match_patch.diff_map(System.String,System.String)">
            Explore the intersection points between the two texts.
            @param text1 Old string to be diffed.
            @param text2 New string to be diffed.
            @return LinkedList of Diff objects or null if no diff available.
        </member>
        <member name="M:Finsa.CodeServices.Common.Text.diff_match_patch.diff_path1(System.Collections.Generic.List{System.Collections.Generic.HashSet{System.Int64}},System.String,System.String)">
            Work from the middle back to the start to determine the path.
            @param v_map List of path sets.
            @param text1 Old string fragment to be diffed.
            @param text2 New string fragment to be diffed.
            @return LinkedList of Diff objects.
        </member>
        <member name="M:Finsa.CodeServices.Common.Text.diff_match_patch.diff_path2(System.Collections.Generic.List{System.Collections.Generic.HashSet{System.Int64}},System.String,System.String)">
            Work from the middle back to the end to determine the path.
            @param v_map List of path sets.
            @param text1 Old string fragment to be diffed.
            @param text2 New string fragment to be diffed.
            @return LinkedList of Diff objects.
        </member>
        <member name="M:Finsa.CodeServices.Common.Text.diff_match_patch.diff_footprint(System.Int32,System.Int32)">
            Compute a good hash of two integers.
            @param x First int.
            @param y Second int.
            @return A long made up of both ints.
        </member>
        <member name="M:Finsa.CodeServices.Common.Text.diff_match_patch.diff_commonPrefix(System.String,System.String)">
            Determine the common prefix of two strings
            @param text1 First string.
            @param text2 Second string.
            @return The number of characters common to the start of each string.
        </member>
        <member name="M:Finsa.CodeServices.Common.Text.diff_match_patch.diff_commonSuffix(System.String,System.String)">
            Determine the common suffix of two strings
            @param text1 First string.
            @param text2 Second string.
            @return The number of characters common to the end of each string.
        </member>
        <member name="M:Finsa.CodeServices.Common.Text.diff_match_patch.diff_halfMatch(System.String,System.String)">
            Do the two texts share a Substring which is at least half the length of
            the longer text?
            @param text1 First string.
            @param text2 Second string.
            @return Five element String array, containing the prefix of text1, the
                suffix of text1, the prefix of text2, the suffix of text2 and the
                common middle.  Or null if there was no match.
        </member>
        <member name="M:Finsa.CodeServices.Common.Text.diff_match_patch.diff_halfMatchI(System.String,System.String,System.Int32)">
            Does a Substring of shorttext exist within longtext such that the
            Substring is at least half the length of longtext?
            @param longtext Longer string.
            @param shorttext Shorter string.
            @param i Start index of quarter length Substring within longtext.
            @return Five element string array, containing the prefix of longtext, the
                suffix of longtext, the prefix of shorttext, the suffix of shorttext
                and the common middle.  Or null if there was no match.
        </member>
        <member name="M:Finsa.CodeServices.Common.Text.diff_match_patch.diff_cleanupSemantic(System.Collections.Generic.List{Finsa.CodeServices.Common.Text.Diff})">
            Reduce the number of edits by eliminating semantically trivial equalities.
            @param diffs LinkedList of Diff objects.
        </member>
        <member name="M:Finsa.CodeServices.Common.Text.diff_match_patch.diff_cleanupSemanticLossless(System.Collections.Generic.List{Finsa.CodeServices.Common.Text.Diff})">
            Look for single edits surrounded on both sides by equalities
            which can be shifted sideways to align the edit to a word boundary.
            e.g: The c<ins>at c</ins>ame. -> The <ins>cat </ins>came.
            @param diffs LinkedList of Diff objects.
        </member>
        <member name="M:Finsa.CodeServices.Common.Text.diff_match_patch.diff_cleanupSemanticScore(System.String,System.String)">
            Given two strings, comAdde a score representing whether the internal
            boundary falls on logical boundaries.
            Scores range from 5 (best) to 0 (worst).
            @param one First string.
            @param two Second string.
            @return The score.
        </member>
        <member name="M:Finsa.CodeServices.Common.Text.diff_match_patch.diff_cleanupEfficiency(System.Collections.Generic.List{Finsa.CodeServices.Common.Text.Diff})">
            Reduce the number of edits by eliminating operationally trivial equalities.
            @param diffs LinkedList of Diff objects.
        </member>
        <member name="M:Finsa.CodeServices.Common.Text.diff_match_patch.diff_cleanupMerge(System.Collections.Generic.List{Finsa.CodeServices.Common.Text.Diff})">
            Reorder and merge like edit sections.  Merge equalities.
            Any edit section can move as long as it doesn't cross an equality.
            @param diffs LinkedList of Diff objects.
        </member>
        <member name="M:Finsa.CodeServices.Common.Text.diff_match_patch.diff_xIndex(System.Collections.Generic.List{Finsa.CodeServices.Common.Text.Diff},System.Int32)">
            loc is a location in text1, comAdde and return the equivalent location in
            text2.
            e.g. "The cat" vs "The big cat", 1->1, 5->8
            @param diffs LinkedList of Diff objects.
            @param loc Location within text1.
            @return Location within text2.
        </member>
        <member name="M:Finsa.CodeServices.Common.Text.diff_match_patch.diff_prettyHtml(System.Collections.Generic.List{Finsa.CodeServices.Common.Text.Diff})">
            Convert a Diff list into a pretty HTML report.
            @param diffs LinkedList of Diff objects.
            @return HTML representation.
        </member>
        <member name="M:Finsa.CodeServices.Common.Text.diff_match_patch.diff_text1(System.Collections.Generic.List{Finsa.CodeServices.Common.Text.Diff})">
            Compute and return the source text (all equalities and deletions).
            @param diffs LinkedList of Diff objects.
            @return Source text.
        </member>
        <member name="M:Finsa.CodeServices.Common.Text.diff_match_patch.diff_text2(System.Collections.Generic.List{Finsa.CodeServices.Common.Text.Diff})">
            Compute and return the destination text (all equalities and insertions).
            @param diffs LinkedList of Diff objects.
            @return Destination text.
        </member>
        <member name="M:Finsa.CodeServices.Common.Text.diff_match_patch.diff_levenshtein(System.Collections.Generic.List{Finsa.CodeServices.Common.Text.Diff})">
            Compute the Levenshtein distance; the number of inserted, deleted or
            substituted characters.
            @param diffs LinkedList of Diff objects.
            @return Number of changes.
        </member>
        <member name="M:Finsa.CodeServices.Common.Text.diff_match_patch.diff_toDelta(System.Collections.Generic.List{Finsa.CodeServices.Common.Text.Diff})">
            Crush the diff into an encoded string which describes the operations
            required to transform text1 into text2.
            E.g. =3\t-2\t+ing  -> Keep 3 chars, delete 2 chars, insert 'ing'.
            Operations are tab-separated.  Inserted text is escaped using %xx notation.
            @param diffs Array of diff tuples.
            @return Delta text.
        </member>
        <member name="M:Finsa.CodeServices.Common.Text.diff_match_patch.diff_fromDelta(System.String,System.String)">
            Given the original text1, and an encoded string which describes the
            operations required to transform text1 into text2, comAdde the full diff.
            @param text1 Source string for the diff.
            @param delta Delta text.
            @return Array of diff tuples or null if invalid.
            @throws ArgumentException If invalid input.
        </member>
        <member name="M:Finsa.CodeServices.Common.Text.diff_match_patch.match_main(System.String,System.String,System.Int32)">
            Locate the best instance of 'pattern' in 'text' near 'loc'.
            Returns -1 if no match found.
            @param text The text to search.
            @param pattern The pattern to search for.
            @param loc The location to search around.
            @return Best match index or -1.
        </member>
        <member name="M:Finsa.CodeServices.Common.Text.diff_match_patch.match_bitap(System.String,System.String,System.Int32)">
            Locate the best instance of 'pattern' in 'text' near 'loc' using the
            Bitap algorithm.  Returns -1 if no match found.
            @param text The text to search.
            @param pattern The pattern to search for.
            @param loc The location to search around.
            @return Best match index or -1.
        </member>
        <member name="M:Finsa.CodeServices.Common.Text.diff_match_patch.match_bitapScore(System.Int32,System.Int32,System.Int32,System.String)">
            Compute and return the score for a match with e errors and x location.
            @param e Number of errors in match.
            @param x Location of match.
            @param loc Expected location of match.
            @param pattern Pattern being sought.
            @return Overall score for match (0.0 = good, 1.0 = bad).
        </member>
        <member name="M:Finsa.CodeServices.Common.Text.diff_match_patch.match_alphabet(System.String)">
            Initialise the alphabet for the Bitap algorithm.
            @param pattern The text to encode.
            @return Hash of character locations.
        </member>
        <member name="M:Finsa.CodeServices.Common.Text.diff_match_patch.patch_addContext(Finsa.CodeServices.Common.Text.Patch,System.String)">
            Increase the context until it is unique,
            but don't let the pattern expand beyond Match_MaxBits.
            @param patch The patch to grow.
            @param text Source text.
        </member>
        <member name="M:Finsa.CodeServices.Common.Text.diff_match_patch.patch_make(System.String,System.String)">
            Compute a list of patches to turn text1 into text2.
            A set of diffs will be computed.
            @param text1 Old text.
            @param text2 New text.
            @return LinkedList of Patch objects.
        </member>
        <member name="M:Finsa.CodeServices.Common.Text.diff_match_patch.patch_make(System.Collections.Generic.List{Finsa.CodeServices.Common.Text.Diff})">
            Compute a list of patches to turn text1 into text2.
            text1 will be derived from the provided diffs.
            @param diffs Array of diff tuples for text1 to text2.
            @return LinkedList of Patch objects.
        </member>
        <!-- Badly formed XML comment ignored for member "M:Finsa.CodeServices.Common.Text.diff_match_patch.patch_make(System.String,System.String,System.Collections.Generic.List{Finsa.CodeServices.Common.Text.Diff})" -->
        <member name="M:Finsa.CodeServices.Common.Text.diff_match_patch.patch_make(System.String,System.Collections.Generic.List{Finsa.CodeServices.Common.Text.Diff})">
            Compute a list of patches to turn text1 into text2.
            text2 is not provided, diffs are the delta between text1 and text2.
            @param text1 Old text.
            @param diffs Array of diff tuples for text1 to text2.
            @return LinkedList of Patch objects.
        </member>
        <member name="M:Finsa.CodeServices.Common.Text.diff_match_patch.patch_deepCopy(System.Collections.Generic.List{Finsa.CodeServices.Common.Text.Patch})">
            Given an array of patches, return another array that is identical.
            @param patches Array of patch objects.
            @return Array of patch objects.
        </member>
        <member name="M:Finsa.CodeServices.Common.Text.diff_match_patch.patch_apply(System.Collections.Generic.List{Finsa.CodeServices.Common.Text.Patch},System.String)">
            Merge a set of patches onto the text.  Return a patched text, as well
            as an array of true/false values indicating which patches were applied.
            @param patches Array of patch objects
            @param text Old text.
            @return Two element Object array, containing the new text and an array of
                 bool values.
        </member>
        <member name="M:Finsa.CodeServices.Common.Text.diff_match_patch.patch_addPadding(System.Collections.Generic.List{Finsa.CodeServices.Common.Text.Patch})">
            Add some padding on text start and end so that edges can match something.
            Intended to be called only from within patch_apply.
            @param patches Array of patch objects.
            @return The padding string added to each side.
        </member>
        <member name="M:Finsa.CodeServices.Common.Text.diff_match_patch.patch_splitMax(System.Collections.Generic.List{Finsa.CodeServices.Common.Text.Patch})">
            Look through the patches and break up any which are longer than the
            maximum limit of the match algorithm.
            @param patches LinkedList of Patch objects.
        </member>
        <member name="M:Finsa.CodeServices.Common.Text.diff_match_patch.patch_toText(System.Collections.Generic.List{Finsa.CodeServices.Common.Text.Patch})">
            Take a list of patches and return a textual representation.
            @param patches List of Patch objects.
            @return Text representation of patches.
        </member>
        <member name="M:Finsa.CodeServices.Common.Text.diff_match_patch.patch_fromText(System.String)">
            Parse a textual representation of patches and return a List of Patch
            objects.
            @param textline Text representation of patches.
            @return List of Patch objects.
            @throws ArgumentException If invalid input.
        </member>
        <member name="M:Finsa.CodeServices.Common.Text.diff_match_patch.unescapeForEncodeUriCompatability(System.String)">
             Unescape selected chars for compatability with JavaScript's encodeURI.
             In speed critical applications this could be dropped since the
             receiving application will certainly decode these fine.
             Note that this function is case-sensitive.  Thus "%3F" would not be
             unescaped.  But this is ok because it is only called with the output of
             HttpUtility.UrlEncode which returns lowercase hex.
            
             Example: "%3f" -> "?", "%24" -> "$", etc.
            
             @param str The string to escape.
             @return The escaped string.
        </member>
        <member name="T:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue">
            <summary>
              A class whose goal is to help make thread safe those data structures which are not.<br/>
              By using two simple methods (<see cref="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadAction(System.Action)"/> or <see cref="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteAction(System.Action)"/>, for example),
              you can make all read operations concurrent, while write ones are executed in a blocking fashion.<br/>
              As a matter of fact, this class is just a wrapper placed upon a <see cref="T:System.Threading.ReaderWriterLockSlim"/>.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.Create">
            <summary>
              Creates an instance of the <see cref="T:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue"/> class.
            </summary>
            <returns>An instance of the <see cref="T:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue"/> class.</returns>
            <remarks>Instance is not cached.</remarks>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueRead">
            <summary>
              Starts an user controlled read operation.
            </summary>
            <returns>An object whose disposal means the end of the operation.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWrite">
            <summary>
              Starts an user controlled write operation.
            </summary>
            <returns>An object whose disposal means the end of the operation.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadAction(System.Action)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="action">The read action that must be executed.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadAction``1(System.Action{``0},``0)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="action">The read action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadAction``2(System.Action{``0,``1},``0,``1)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="action">The read action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadAction``3(System.Action{``0,``1,``2},``0,``1,``2)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="action">The read action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadAction``4(System.Action{``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="action">The read action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadAction``5(System.Action{``0,``1,``2,``3,``4},``0,``1,``2,``3,``4)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="action">The read action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadAction``6(System.Action{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="action">The read action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadAction``7(System.Action{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="action">The read action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadAction``8(System.Action{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="action">The read action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadAction``9(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="action">The read action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadAction``10(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="action">The read action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadAction``11(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="action">The read action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="a11">Parameter 11.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadAction``12(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="action">The read action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="a11">Parameter 11.</param>
            <param name="a12">Parameter 12.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadAction``13(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="action">The read action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="a11">Parameter 11.</param>
            <param name="a12">Parameter 12.</param>
            <param name="a13">Parameter 13.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadAction``14(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="action">The read action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="a11">Parameter 11.</param>
            <param name="a12">Parameter 12.</param>
            <param name="a13">Parameter 13.</param>
            <param name="a14">Parameter 14.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadAction``15(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="action">The read action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="a11">Parameter 11.</param>
            <param name="a12">Parameter 12.</param>
            <param name="a13">Parameter 13.</param>
            <param name="a14">Parameter 14.</param>
            <param name="a15">Parameter 15.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadAction``16(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="action">The read action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="a11">Parameter 11.</param>
            <param name="a12">Parameter 12.</param>
            <param name="a13">Parameter 13.</param>
            <param name="a14">Parameter 14.</param>
            <param name="a15">Parameter 15.</param>
            <param name="a16">Parameter 16.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadActionAsync(System.Action)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="action">The read action that must be executed.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadActionAsync(System.Action,System.Threading.CancellationToken)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="action">The read action that must be executed.</param>
            <param name="cancToken">The cancellation token.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadActionAsync``1(System.Action{``0},``0)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="action">The read action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadActionAsync``1(System.Action{``0},``0,System.Threading.CancellationToken)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="action">The read action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="cancToken">The cancellation token.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadActionAsync``2(System.Action{``0,``1},``0,``1)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="action">The read action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadActionAsync``2(System.Action{``0,``1},``0,``1,System.Threading.CancellationToken)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="action">The read action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="cancToken">The cancellation token.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadActionAsync``3(System.Action{``0,``1,``2},``0,``1,``2)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="action">The read action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadActionAsync``3(System.Action{``0,``1,``2},``0,``1,``2,System.Threading.CancellationToken)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="action">The read action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="cancToken">The cancellation token.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadActionAsync``4(System.Action{``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="action">The read action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadActionAsync``4(System.Action{``0,``1,``2,``3},``0,``1,``2,``3,System.Threading.CancellationToken)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="action">The read action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="cancToken">The cancellation token.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadActionAsync``5(System.Action{``0,``1,``2,``3,``4},``0,``1,``2,``3,``4)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="action">The read action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadActionAsync``5(System.Action{``0,``1,``2,``3,``4},``0,``1,``2,``3,``4,System.Threading.CancellationToken)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="action">The read action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="cancToken">The cancellation token.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadActionAsync``6(System.Action{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="action">The read action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadActionAsync``6(System.Action{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5,System.Threading.CancellationToken)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="action">The read action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="cancToken">The cancellation token.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadActionAsync``7(System.Action{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="action">The read action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadActionAsync``7(System.Action{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,``6,System.Threading.CancellationToken)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="action">The read action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="cancToken">The cancellation token.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadActionAsync``8(System.Action{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="action">The read action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadActionAsync``8(System.Action{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,``7,System.Threading.CancellationToken)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="action">The read action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="cancToken">The cancellation token.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadActionAsync``9(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="action">The read action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadActionAsync``9(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Threading.CancellationToken)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="action">The read action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="cancToken">The cancellation token.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadActionAsync``10(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="action">The read action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadActionAsync``10(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Threading.CancellationToken)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="action">The read action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="cancToken">The cancellation token.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadActionAsync``11(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="action">The read action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="a11">Parameter 11.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadActionAsync``11(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Threading.CancellationToken)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="action">The read action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="a11">Parameter 11.</param>
            <param name="cancToken">The cancellation token.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadActionAsync``12(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="action">The read action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="a11">Parameter 11.</param>
            <param name="a12">Parameter 12.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadActionAsync``12(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Threading.CancellationToken)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="action">The read action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="a11">Parameter 11.</param>
            <param name="a12">Parameter 12.</param>
            <param name="cancToken">The cancellation token.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadActionAsync``13(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="action">The read action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="a11">Parameter 11.</param>
            <param name="a12">Parameter 12.</param>
            <param name="a13">Parameter 13.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadActionAsync``13(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Threading.CancellationToken)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="action">The read action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="a11">Parameter 11.</param>
            <param name="a12">Parameter 12.</param>
            <param name="a13">Parameter 13.</param>
            <param name="cancToken">The cancellation token.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadActionAsync``14(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="action">The read action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="a11">Parameter 11.</param>
            <param name="a12">Parameter 12.</param>
            <param name="a13">Parameter 13.</param>
            <param name="a14">Parameter 14.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadActionAsync``14(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Threading.CancellationToken)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="action">The read action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="a11">Parameter 11.</param>
            <param name="a12">Parameter 12.</param>
            <param name="a13">Parameter 13.</param>
            <param name="a14">Parameter 14.</param>
            <param name="cancToken">The cancellation token.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadActionAsync``15(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="action">The read action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="a11">Parameter 11.</param>
            <param name="a12">Parameter 12.</param>
            <param name="a13">Parameter 13.</param>
            <param name="a14">Parameter 14.</param>
            <param name="a15">Parameter 15.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadActionAsync``15(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Threading.CancellationToken)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="action">The read action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="a11">Parameter 11.</param>
            <param name="a12">Parameter 12.</param>
            <param name="a13">Parameter 13.</param>
            <param name="a14">Parameter 14.</param>
            <param name="a15">Parameter 15.</param>
            <param name="cancToken">The cancellation token.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadActionAsync``16(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="action">The read action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="a11">Parameter 11.</param>
            <param name="a12">Parameter 12.</param>
            <param name="a13">Parameter 13.</param>
            <param name="a14">Parameter 14.</param>
            <param name="a15">Parameter 15.</param>
            <param name="a16">Parameter 16.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadActionAsync``16(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.Threading.CancellationToken)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="action">The read action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="a11">Parameter 11.</param>
            <param name="a12">Parameter 12.</param>
            <param name="a13">Parameter 13.</param>
            <param name="a14">Parameter 14.</param>
            <param name="a15">Parameter 15.</param>
            <param name="a16">Parameter 16.</param>
            <param name="cancToken">The cancellation token.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadFunc``1(System.Func{``0})">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="func">The read function that must be executed.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadFunc``2(System.Func{``0,``1},``0)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="func">The read function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadFunc``3(System.Func{``0,``1,``2},``0,``1)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="func">The read function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadFunc``4(System.Func{``0,``1,``2,``3},``0,``1,``2)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="func">The read function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadFunc``5(System.Func{``0,``1,``2,``3,``4},``0,``1,``2,``3)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="func">The read function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadFunc``6(System.Func{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="func">The read function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadFunc``7(System.Func{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="func">The read function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadFunc``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="func">The read function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadFunc``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="func">The read function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadFunc``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="func">The read function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadFunc``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="func">The read function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadFunc``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="func">The read function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="a11">Parameter 11.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadFunc``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="func">The read function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="a11">Parameter 11.</param>
            <param name="a12">Parameter 12.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadFunc``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="func">The read function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="a11">Parameter 11.</param>
            <param name="a12">Parameter 12.</param>
            <param name="a13">Parameter 13.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadFunc``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="func">The read function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="a11">Parameter 11.</param>
            <param name="a12">Parameter 12.</param>
            <param name="a13">Parameter 13.</param>
            <param name="a14">Parameter 14.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadFunc``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="func">The read function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="a11">Parameter 11.</param>
            <param name="a12">Parameter 12.</param>
            <param name="a13">Parameter 13.</param>
            <param name="a14">Parameter 14.</param>
            <param name="a15">Parameter 15.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadFunc``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="func">The read function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="a11">Parameter 11.</param>
            <param name="a12">Parameter 12.</param>
            <param name="a13">Parameter 13.</param>
            <param name="a14">Parameter 14.</param>
            <param name="a15">Parameter 15.</param>
            <param name="a16">Parameter 16.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadFuncAsync``1(System.Func{``0})">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="func">The read function that must be executed.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadFuncAsync``1(System.Func{``0},System.Threading.CancellationToken)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="func">The read function that must be executed.</param>
            <param name="cancToken">The cancellation token.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadFuncAsync``2(System.Func{``0,``1},``0)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="func">The read function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadFuncAsync``2(System.Func{``0,``1},``0,System.Threading.CancellationToken)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="func">The read function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="cancToken">The cancellation token.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadFuncAsync``3(System.Func{``0,``1,``2},``0,``1)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="func">The read function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadFuncAsync``3(System.Func{``0,``1,``2},``0,``1,System.Threading.CancellationToken)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="func">The read function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="cancToken">The cancellation token.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadFuncAsync``4(System.Func{``0,``1,``2,``3},``0,``1,``2)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="func">The read function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadFuncAsync``4(System.Func{``0,``1,``2,``3},``0,``1,``2,System.Threading.CancellationToken)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="func">The read function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="cancToken">The cancellation token.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadFuncAsync``5(System.Func{``0,``1,``2,``3,``4},``0,``1,``2,``3)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="func">The read function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadFuncAsync``5(System.Func{``0,``1,``2,``3,``4},``0,``1,``2,``3,System.Threading.CancellationToken)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="func">The read function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="cancToken">The cancellation token.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadFuncAsync``6(System.Func{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="func">The read function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadFuncAsync``6(System.Func{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,System.Threading.CancellationToken)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="func">The read function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="cancToken">The cancellation token.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadFuncAsync``7(System.Func{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="func">The read function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadFuncAsync``7(System.Func{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,System.Threading.CancellationToken)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="func">The read function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="cancToken">The cancellation token.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadFuncAsync``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="func">The read function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadFuncAsync``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,System.Threading.CancellationToken)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="func">The read function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="cancToken">The cancellation token.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadFuncAsync``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="func">The read function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadFuncAsync``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7,System.Threading.CancellationToken)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="func">The read function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="cancToken">The cancellation token.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadFuncAsync``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="func">The read function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadFuncAsync``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Threading.CancellationToken)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="func">The read function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="cancToken">The cancellation token.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadFuncAsync``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="func">The read function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadFuncAsync``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Threading.CancellationToken)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="func">The read function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="cancToken">The cancellation token.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadFuncAsync``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="func">The read function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="a11">Parameter 11.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadFuncAsync``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Threading.CancellationToken)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="func">The read function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="a11">Parameter 11.</param>
            <param name="cancToken">The cancellation token.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadFuncAsync``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="func">The read function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="a11">Parameter 11.</param>
            <param name="a12">Parameter 12.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadFuncAsync``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Threading.CancellationToken)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="func">The read function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="a11">Parameter 11.</param>
            <param name="a12">Parameter 12.</param>
            <param name="cancToken">The cancellation token.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadFuncAsync``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="func">The read function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="a11">Parameter 11.</param>
            <param name="a12">Parameter 12.</param>
            <param name="a13">Parameter 13.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadFuncAsync``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Threading.CancellationToken)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="func">The read function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="a11">Parameter 11.</param>
            <param name="a12">Parameter 12.</param>
            <param name="a13">Parameter 13.</param>
            <param name="cancToken">The cancellation token.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadFuncAsync``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="func">The read function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="a11">Parameter 11.</param>
            <param name="a12">Parameter 12.</param>
            <param name="a13">Parameter 13.</param>
            <param name="a14">Parameter 14.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadFuncAsync``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Threading.CancellationToken)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="func">The read function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="a11">Parameter 11.</param>
            <param name="a12">Parameter 12.</param>
            <param name="a13">Parameter 13.</param>
            <param name="a14">Parameter 14.</param>
            <param name="cancToken">The cancellation token.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadFuncAsync``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="func">The read function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="a11">Parameter 11.</param>
            <param name="a12">Parameter 12.</param>
            <param name="a13">Parameter 13.</param>
            <param name="a14">Parameter 14.</param>
            <param name="a15">Parameter 15.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadFuncAsync``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Threading.CancellationToken)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="func">The read function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="a11">Parameter 11.</param>
            <param name="a12">Parameter 12.</param>
            <param name="a13">Parameter 13.</param>
            <param name="a14">Parameter 14.</param>
            <param name="a15">Parameter 15.</param>
            <param name="cancToken">The cancellation token.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadFuncAsync``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="func">The read function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="a11">Parameter 11.</param>
            <param name="a12">Parameter 12.</param>
            <param name="a13">Parameter 13.</param>
            <param name="a14">Parameter 14.</param>
            <param name="a15">Parameter 15.</param>
            <param name="a16">Parameter 16.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueReadFuncAsync``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.Threading.CancellationToken)">
            <summary>
              Enqueues a read operation. If there are no write operations in the queue,
              it will be executed immediately, in parallel with other read operations.<br/>
              Otherwise, this operation will be blocked, until the write operation has been processed.
            </summary>
            <param name="func">The read function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="a11">Parameter 11.</param>
            <param name="a12">Parameter 12.</param>
            <param name="a13">Parameter 13.</param>
            <param name="a14">Parameter 14.</param>
            <param name="a15">Parameter 15.</param>
            <param name="a16">Parameter 16.</param>
            <param name="cancToken">The cancellation token.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteAction(System.Action)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="action">The write action that must be executed.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteAction``1(System.Action{``0},``0)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="action">The write action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteAction``2(System.Action{``0,``1},``0,``1)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="action">The write action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteAction``3(System.Action{``0,``1,``2},``0,``1,``2)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="action">The write action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteAction``4(System.Action{``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="action">The write action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteAction``5(System.Action{``0,``1,``2,``3,``4},``0,``1,``2,``3,``4)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="action">The write action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteAction``6(System.Action{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="action">The write action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteAction``7(System.Action{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="action">The write action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteAction``8(System.Action{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="action">The write action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteAction``9(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="action">The write action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteAction``10(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="action">The write action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteAction``11(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="action">The write action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="a11">Parameter 11.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteAction``12(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="action">The write action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="a11">Parameter 11.</param>
            <param name="a12">Parameter 12.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteAction``13(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="action">The write action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="a11">Parameter 11.</param>
            <param name="a12">Parameter 12.</param>
            <param name="a13">Parameter 13.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteAction``14(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="action">The write action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="a11">Parameter 11.</param>
            <param name="a12">Parameter 12.</param>
            <param name="a13">Parameter 13.</param>
            <param name="a14">Parameter 14.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteAction``15(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="action">The write action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="a11">Parameter 11.</param>
            <param name="a12">Parameter 12.</param>
            <param name="a13">Parameter 13.</param>
            <param name="a14">Parameter 14.</param>
            <param name="a15">Parameter 15.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteAction``16(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="action">The write action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="a11">Parameter 11.</param>
            <param name="a12">Parameter 12.</param>
            <param name="a13">Parameter 13.</param>
            <param name="a14">Parameter 14.</param>
            <param name="a15">Parameter 15.</param>
            <param name="a16">Parameter 16.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteActionAsync(System.Action)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="action">The write action that must be executed.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteActionAsync(System.Action,System.Threading.CancellationToken)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="action">The write action that must be executed.</param>
            <param name="cancToken">The cancellation token.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteActionAsync``1(System.Action{``0},``0)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="action">The write action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteActionAsync``1(System.Action{``0},``0,System.Threading.CancellationToken)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="action">The write action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="cancToken">The cancellation token.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteActionAsync``2(System.Action{``0,``1},``0,``1)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="action">The write action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteActionAsync``2(System.Action{``0,``1},``0,``1,System.Threading.CancellationToken)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="action">The write action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="cancToken">The cancellation token.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteActionAsync``3(System.Action{``0,``1,``2},``0,``1,``2)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="action">The write action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteActionAsync``3(System.Action{``0,``1,``2},``0,``1,``2,System.Threading.CancellationToken)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="action">The write action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="cancToken">The cancellation token.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteActionAsync``4(System.Action{``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="action">The write action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteActionAsync``4(System.Action{``0,``1,``2,``3},``0,``1,``2,``3,System.Threading.CancellationToken)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="action">The write action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="cancToken">The cancellation token.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteActionAsync``5(System.Action{``0,``1,``2,``3,``4},``0,``1,``2,``3,``4)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="action">The write action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteActionAsync``5(System.Action{``0,``1,``2,``3,``4},``0,``1,``2,``3,``4,System.Threading.CancellationToken)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="action">The write action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="cancToken">The cancellation token.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteActionAsync``6(System.Action{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="action">The write action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteActionAsync``6(System.Action{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5,System.Threading.CancellationToken)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="action">The write action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="cancToken">The cancellation token.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteActionAsync``7(System.Action{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="action">The write action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteActionAsync``7(System.Action{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,``6,System.Threading.CancellationToken)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="action">The write action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="cancToken">The cancellation token.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteActionAsync``8(System.Action{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="action">The write action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteActionAsync``8(System.Action{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,``7,System.Threading.CancellationToken)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="action">The write action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="cancToken">The cancellation token.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteActionAsync``9(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="action">The write action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteActionAsync``9(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Threading.CancellationToken)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="action">The write action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="cancToken">The cancellation token.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteActionAsync``10(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="action">The write action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteActionAsync``10(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Threading.CancellationToken)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="action">The write action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="cancToken">The cancellation token.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteActionAsync``11(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="action">The write action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="a11">Parameter 11.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteActionAsync``11(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Threading.CancellationToken)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="action">The write action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="a11">Parameter 11.</param>
            <param name="cancToken">The cancellation token.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteActionAsync``12(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="action">The write action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="a11">Parameter 11.</param>
            <param name="a12">Parameter 12.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteActionAsync``12(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Threading.CancellationToken)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="action">The write action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="a11">Parameter 11.</param>
            <param name="a12">Parameter 12.</param>
            <param name="cancToken">The cancellation token.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteActionAsync``13(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="action">The write action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="a11">Parameter 11.</param>
            <param name="a12">Parameter 12.</param>
            <param name="a13">Parameter 13.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteActionAsync``13(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Threading.CancellationToken)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="action">The write action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="a11">Parameter 11.</param>
            <param name="a12">Parameter 12.</param>
            <param name="a13">Parameter 13.</param>
            <param name="cancToken">The cancellation token.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteActionAsync``14(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="action">The write action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="a11">Parameter 11.</param>
            <param name="a12">Parameter 12.</param>
            <param name="a13">Parameter 13.</param>
            <param name="a14">Parameter 14.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteActionAsync``14(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Threading.CancellationToken)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="action">The write action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="a11">Parameter 11.</param>
            <param name="a12">Parameter 12.</param>
            <param name="a13">Parameter 13.</param>
            <param name="a14">Parameter 14.</param>
            <param name="cancToken">The cancellation token.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteActionAsync``15(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="action">The write action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="a11">Parameter 11.</param>
            <param name="a12">Parameter 12.</param>
            <param name="a13">Parameter 13.</param>
            <param name="a14">Parameter 14.</param>
            <param name="a15">Parameter 15.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteActionAsync``15(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Threading.CancellationToken)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="action">The write action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="a11">Parameter 11.</param>
            <param name="a12">Parameter 12.</param>
            <param name="a13">Parameter 13.</param>
            <param name="a14">Parameter 14.</param>
            <param name="a15">Parameter 15.</param>
            <param name="cancToken">The cancellation token.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteActionAsync``16(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="action">The write action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="a11">Parameter 11.</param>
            <param name="a12">Parameter 12.</param>
            <param name="a13">Parameter 13.</param>
            <param name="a14">Parameter 14.</param>
            <param name="a15">Parameter 15.</param>
            <param name="a16">Parameter 16.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteActionAsync``16(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.Threading.CancellationToken)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="action">The write action that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="a11">Parameter 11.</param>
            <param name="a12">Parameter 12.</param>
            <param name="a13">Parameter 13.</param>
            <param name="a14">Parameter 14.</param>
            <param name="a15">Parameter 15.</param>
            <param name="a16">Parameter 16.</param>
            <param name="cancToken">The cancellation token.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteFunc``1(System.Func{``0})">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="func">The write function that must be executed.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteFunc``2(System.Func{``0,``1},``0)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="func">The write function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteFunc``3(System.Func{``0,``1,``2},``0,``1)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="func">The write function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteFunc``4(System.Func{``0,``1,``2,``3},``0,``1,``2)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="func">The write function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteFunc``5(System.Func{``0,``1,``2,``3,``4},``0,``1,``2,``3)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="func">The write function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteFunc``6(System.Func{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="func">The write function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteFunc``7(System.Func{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="func">The write function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteFunc``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="func">The write function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteFunc``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="func">The write function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteFunc``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="func">The write function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteFunc``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="func">The write function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteFunc``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="func">The write function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="a11">Parameter 11.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteFunc``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="func">The write function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="a11">Parameter 11.</param>
            <param name="a12">Parameter 12.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteFunc``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="func">The write function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="a11">Parameter 11.</param>
            <param name="a12">Parameter 12.</param>
            <param name="a13">Parameter 13.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteFunc``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="func">The write function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="a11">Parameter 11.</param>
            <param name="a12">Parameter 12.</param>
            <param name="a13">Parameter 13.</param>
            <param name="a14">Parameter 14.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteFunc``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="func">The write function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="a11">Parameter 11.</param>
            <param name="a12">Parameter 12.</param>
            <param name="a13">Parameter 13.</param>
            <param name="a14">Parameter 14.</param>
            <param name="a15">Parameter 15.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteFunc``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="func">The write function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="a11">Parameter 11.</param>
            <param name="a12">Parameter 12.</param>
            <param name="a13">Parameter 13.</param>
            <param name="a14">Parameter 14.</param>
            <param name="a15">Parameter 15.</param>
            <param name="a16">Parameter 16.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteFuncAsync``1(System.Func{``0})">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="func">The write function that must be executed.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteFuncAsync``1(System.Func{``0},System.Threading.CancellationToken)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="func">The write function that must be executed.</param>
            <param name="cancToken">The cancellation token.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteFuncAsync``2(System.Func{``0,``1},``0)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="func">The write function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteFuncAsync``2(System.Func{``0,``1},``0,System.Threading.CancellationToken)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="func">The write function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="cancToken">The cancellation token.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteFuncAsync``3(System.Func{``0,``1,``2},``0,``1)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="func">The write function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteFuncAsync``3(System.Func{``0,``1,``2},``0,``1,System.Threading.CancellationToken)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="func">The write function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="cancToken">The cancellation token.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteFuncAsync``4(System.Func{``0,``1,``2,``3},``0,``1,``2)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="func">The write function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteFuncAsync``4(System.Func{``0,``1,``2,``3},``0,``1,``2,System.Threading.CancellationToken)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="func">The write function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="cancToken">The cancellation token.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteFuncAsync``5(System.Func{``0,``1,``2,``3,``4},``0,``1,``2,``3)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="func">The write function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteFuncAsync``5(System.Func{``0,``1,``2,``3,``4},``0,``1,``2,``3,System.Threading.CancellationToken)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="func">The write function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="cancToken">The cancellation token.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteFuncAsync``6(System.Func{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="func">The write function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteFuncAsync``6(System.Func{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,System.Threading.CancellationToken)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="func">The write function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="cancToken">The cancellation token.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteFuncAsync``7(System.Func{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="func">The write function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteFuncAsync``7(System.Func{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,System.Threading.CancellationToken)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="func">The write function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="cancToken">The cancellation token.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteFuncAsync``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="func">The write function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteFuncAsync``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,System.Threading.CancellationToken)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="func">The write function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="cancToken">The cancellation token.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteFuncAsync``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="func">The write function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteFuncAsync``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7,System.Threading.CancellationToken)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="func">The write function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="cancToken">The cancellation token.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteFuncAsync``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="func">The write function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteFuncAsync``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Threading.CancellationToken)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="func">The write function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="cancToken">The cancellation token.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteFuncAsync``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="func">The write function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteFuncAsync``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Threading.CancellationToken)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="func">The write function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="cancToken">The cancellation token.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteFuncAsync``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="func">The write function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="a11">Parameter 11.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteFuncAsync``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Threading.CancellationToken)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="func">The write function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="a11">Parameter 11.</param>
            <param name="cancToken">The cancellation token.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteFuncAsync``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="func">The write function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="a11">Parameter 11.</param>
            <param name="a12">Parameter 12.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteFuncAsync``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Threading.CancellationToken)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="func">The write function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="a11">Parameter 11.</param>
            <param name="a12">Parameter 12.</param>
            <param name="cancToken">The cancellation token.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteFuncAsync``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="func">The write function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="a11">Parameter 11.</param>
            <param name="a12">Parameter 12.</param>
            <param name="a13">Parameter 13.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteFuncAsync``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Threading.CancellationToken)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="func">The write function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="a11">Parameter 11.</param>
            <param name="a12">Parameter 12.</param>
            <param name="a13">Parameter 13.</param>
            <param name="cancToken">The cancellation token.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteFuncAsync``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="func">The write function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="a11">Parameter 11.</param>
            <param name="a12">Parameter 12.</param>
            <param name="a13">Parameter 13.</param>
            <param name="a14">Parameter 14.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteFuncAsync``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Threading.CancellationToken)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="func">The write function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="a11">Parameter 11.</param>
            <param name="a12">Parameter 12.</param>
            <param name="a13">Parameter 13.</param>
            <param name="a14">Parameter 14.</param>
            <param name="cancToken">The cancellation token.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteFuncAsync``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="func">The write function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="a11">Parameter 11.</param>
            <param name="a12">Parameter 12.</param>
            <param name="a13">Parameter 13.</param>
            <param name="a14">Parameter 14.</param>
            <param name="a15">Parameter 15.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteFuncAsync``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Threading.CancellationToken)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="func">The write function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="a11">Parameter 11.</param>
            <param name="a12">Parameter 12.</param>
            <param name="a13">Parameter 13.</param>
            <param name="a14">Parameter 14.</param>
            <param name="a15">Parameter 15.</param>
            <param name="cancToken">The cancellation token.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteFuncAsync``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="func">The write function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="a11">Parameter 11.</param>
            <param name="a12">Parameter 12.</param>
            <param name="a13">Parameter 13.</param>
            <param name="a14">Parameter 14.</param>
            <param name="a15">Parameter 15.</param>
            <param name="a16">Parameter 16.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.EnqueueWriteFuncAsync``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.Threading.CancellationToken)">
            <summary>
              Enqueues a write operation. Write operations are never executed in parallel,
              both with other write operations and with other read operations.
            </summary>
            <param name="func">The write function that must be executed.</param>
            <param name="a1">Parameter 1.</param>
            <param name="a2">Parameter 2.</param>
            <param name="a3">Parameter 3.</param>
            <param name="a4">Parameter 4.</param>
            <param name="a5">Parameter 5.</param>
            <param name="a6">Parameter 6.</param>
            <param name="a7">Parameter 7.</param>
            <param name="a8">Parameter 8.</param>
            <param name="a9">Parameter 9.</param>
            <param name="a10">Parameter 10.</param>
            <param name="a11">Parameter 11.</param>
            <param name="a12">Parameter 12.</param>
            <param name="a13">Parameter 13.</param>
            <param name="a14">Parameter 14.</param>
            <param name="a15">Parameter 15.</param>
            <param name="a16">Parameter 16.</param>
            <param name="cancToken">The cancellation token.</param>
        </member>
        <member name="M:Finsa.CodeServices.Common.Threading.ConcurrentWorkQueue.Dispose">
            <summary>
              Disposes the underlying instance of <see cref="T:System.Threading.ReaderWriterLockSlim"/>.
            </summary>
        </member>
        <member name="T:Finsa.CodeServices.Common.Threading.Tasks.TaskHelper">
            <summary>
              Helpers for handling .NET tasks.
            </summary>
        </member>
        <member name="T:Finsa.CodeServices.Common.UniqueIdGenerator">
            <summary>
              Helper class which generates unique identifiers, like GUIDs.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.UniqueIdGenerator.NewGuid">
            <summary>
              Generates a new random GUID (or UUID).
            </summary>
            <returns>A new random GUID (or UUID).</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.UniqueIdGenerator.NewGuid(System.String)">
            <summary>
              Generates a new random GUID (or UUID), whose parts are delimited by given string.
            </summary>
            <param name="delimiter">The string used to separate the parts of the identifier.</param>
            <returns>A new random GUID (or UUID), whose parts are delimited by given string.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="delimiter"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="delimiter"/> should be at least one character long.
            </exception>
        </member>
        <member name="M:Finsa.CodeServices.Common.UniqueIdGenerator.NewBase32">
            <summary>
              Generates a new random BASE32 identifier.
            </summary>
            <returns>A new random BASE32 identifier.</returns>
        </member>
        <member name="M:Finsa.CodeServices.Common.UniqueIdGenerator.NewBase32(System.String)">
            <summary>
              Generates a new random BASE32 identifier, whose parts are delimited by given string.
            </summary>
            <param name="delimiter">The string used to separate the parts of the identifier.</param>
            <returns>A new random BASE32 identifier, whose parts are delimited by given string.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="delimiter"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="delimiter"/> should be at least one character long.
            </exception>
        </member>
        <member name="F:Finsa.CodeServices.Common.UniqueIdGenerator.Base32CharMap">
            <summary>
              0, 1, O, and I omitted intentionally giving 32 (2^5) symbols.
            </summary>
        </member>
        <member name="T:Finsa.CodeServices.Common.Validation.EmailAddressOptionAttribute">
            <summary>
              Validates email addresses stored in both <see cref="T:System.String"/> and <see cref="T:Finsa.CodeServices.Common.Option`1"/>,
              where T is <see cref="T:System.String"/>, types.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.Validation.EmailAddressOptionAttribute.#ctor">
            <summary>
              Default constructor.
            </summary>
        </member>
        <member name="P:Finsa.CodeServices.Common.Validation.EmailAddressOptionAttribute.AllowInternational">
            <summary>
              True if the validator should allow international characters; otherwise, false.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.Validation.EmailAddressOptionAttribute.IsValid(System.Object)">
            <summary>
              Validates the email address stored in <paramref name="value"/>.
            </summary>
            <param name="value">The email address that should be validated.</param>
            <returns>True if given email address is valid or null, false otherwise.</returns>
        </member>
        <member name="T:Finsa.CodeServices.Common.Validation.PhoneNumberOptionAttribute">
            <summary>
              Validates phone numbers stored in both <see cref="T:System.String"/> and <see cref="T:Finsa.CodeServices.Common.Option`1"/>,
              where T is <see cref="T:System.String"/>, types.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.Validation.PhoneNumberOptionAttribute.#ctor">
            <summary>
              Default constructor.
            </summary>
        </member>
        <member name="M:Finsa.CodeServices.Common.Validation.PhoneNumberOptionAttribute.IsValid(System.Object)">
            <summary>
              Validates the phone number stored in <paramref name="value"/>.
            </summary>
            <param name="value">The phone number that should be validated.</param>
            <returns>True if given phone number is valid or null, false otherwise.</returns>
        </member>
        <member name="T:Finsa.CodeServices.Common.Validation.RangeOptionAttribute">
            <summary>
            
            </summary>
        </member>
    </members>
</doc>
