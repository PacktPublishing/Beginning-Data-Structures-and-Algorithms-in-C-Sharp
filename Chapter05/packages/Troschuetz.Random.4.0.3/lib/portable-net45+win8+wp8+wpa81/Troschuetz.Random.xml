<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Troschuetz.Random</name>
    </assembly>
    <members>
        <member name="T:Troschuetz.Random.Distributions.AbstractDistribution">
            <summary>
              Abstract class which implements some features shared across all distributions.
            </summary>
            <remarks>
              The thread safety of this class depends on the one of the underlying generator.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.Distributions.AbstractDistribution.#ctor(Troschuetz.Random.IGenerator)">
            <summary>
              Builds a distribution using given generator.
            </summary>
            <param name="generator">The generator that will be used by the distribution.</param>
            <exception cref="T:System.ArgumentNullException">Given generator is null.</exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.AbstractDistribution.CanReset">
            <summary>
              Gets a value indicating whether the random number distribution can be reset, so that
              it produces the same random number sequence again.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.AbstractDistribution.Generator">
            <summary>
              Gets the <see cref="T:Troschuetz.Random.IGenerator"/> object that is used as underlying random number generator.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.Distributions.AbstractDistribution.Reset">
            <summary>
              Resets the random number distribution, so that it produces the same random number
              sequence again.
            </summary>
            <returns>
              <see langword="true"/>, if the random number distribution was reset; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Troschuetz.Random.Distributions.Continuous.BetaDistribution">
            <summary>
              Provides generation of beta distributed random numbers.
            </summary>
            <remarks>
              The implementation of the <see cref="T:Troschuetz.Random.Distributions.Continuous.BetaDistribution"/> type bases upon information
              presented on <a href="http://en.wikipedia.org/wiki/Beta_distribution">Wikipedia - Beta
              distribution</a> and <a href="http://www.xycoon.com/beta_randomnumbers.htm">Xycoon - Beta Distribution</a>.
            
              The thread safety of this class depends on the one of the underlying generator.
            </remarks>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.BetaDistribution.DefaultAlpha">
            <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Continuous.BetaDistribution.Alpha"/> if none is specified.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.BetaDistribution.DefaultBeta">
            <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Continuous.BetaDistribution.Beta"/> if none is specified.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.BetaDistribution._alpha">
            <summary>
              Stores the parameter alpha which is used for generation of beta distributed random numbers.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.BetaDistribution._beta">
            <summary>
              Stores the parameter beta which is used for generation of beta distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.BetaDistribution.Alpha">
            <summary>
              Gets or sets the parameter alpha which is used for generation of beta distributed
              random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is less than or equal to zero.
            </exception>
            <remarks>
              Calls <see cref="P:Troschuetz.Random.Distributions.Continuous.BetaDistribution.AreValidParams"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.BetaDistribution.Beta">
            <summary>
              Gets or sets the parameter beta which is used for generation of beta distributed
              random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is less than or equal to zero.
            </exception>
            <remarks>
              Calls <see cref="P:Troschuetz.Random.Distributions.Continuous.BetaDistribution.AreValidParams"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.BetaDistribution.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.BetaDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.BetaDistribution.#ctor(System.UInt32)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.BetaDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.BetaDistribution.#ctor(Troschuetz.Random.IGenerator)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.BetaDistribution"/> class, using the
              specified <see cref="T:Troschuetz.Random.IGenerator"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator"/> object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.BetaDistribution.#ctor(System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.BetaDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> as underlying random number generator.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of beta distributed random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of beta distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> or <paramref name="beta"/> are less than or equal to zero.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.BetaDistribution.#ctor(System.UInt32,System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.BetaDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
            <param name="alpha">
              The parameter alpha which is used for generation of beta distributed random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of beta distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> or <paramref name="beta"/> are less than or equal to zero.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.BetaDistribution.#ctor(Troschuetz.Random.IGenerator,System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.BetaDistribution"/> class, using the
              specified <see cref="T:Troschuetz.Random.IGenerator"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator"/> object.</param>
            <param name="alpha">
              The parameter alpha which is used for generation of beta distributed random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of beta distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> or <paramref name="beta"/> are less than or equal to zero.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.BetaDistribution.IsValidAlpha(System.Double)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Continuous.BetaDistribution.Alpha"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/> if value is greater than 0.0; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.BetaDistribution.IsValidBeta(System.Double)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Continuous.BetaDistribution.Beta"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/> if value is greater than 0.0; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.BetaDistribution.Minimum">
            <summary>
              Gets the minimum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.BetaDistribution.Maximum">
            <summary>
              Gets the maximum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.BetaDistribution.Mean">
            <summary>
              Gets the mean of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mean is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.BetaDistribution.Median">
            <summary>
              Gets the median of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if median is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.BetaDistribution.Variance">
            <summary>
              Gets the variance of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if variance is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.BetaDistribution.Mode">
            <summary>
              Gets the mode of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mode is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.BetaDistribution.NextDouble">
            <summary>
              Returns a distributed floating point random number.
            </summary>
            <returns>A distributed double-precision floating point number.</returns>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.BetaDistribution.AreValidParams">
            <summary>
              Determines whether beta distribution is defined under given parameters. The default
              definition returns true if alpha and beta are greater than zero; otherwise, it returns false.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:Troschuetz.Random.Distributions.Continuous.BetaDistribution"/> class.
            </remarks>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.BetaDistribution.Sample">
            <summary>
              Declares a function returning a beta distributed floating point random number.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:Troschuetz.Random.Distributions.Continuous.BetaDistribution"/> class.
            </remarks>
        </member>
        <member name="T:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution">
            <summary>
              Provides generation of beta-prime distributed random numbers.
            </summary>
            <remarks>
              The implementation of the <see cref="T:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution"/> type bases upon information
              presented on <a href="http://www.xycoon.com/ibeta.htm">Xycoon - Inverted Beta Distribution</a>.
            
              The thread safety of this class depends on the one of the underlying generator.
            </remarks>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution.DefaultAlpha">
            <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution.Alpha"/> if none is specified.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution.DefaultBeta">
            <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution.Beta"/> if none is specified.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution._alpha">
            <summary>
              Stores the parameter alpha which is used for generation of beta-prime distributed
              random numbers.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution._beta">
            <summary>
              Stores the parameter beta which is used for generation of beta-prime distributed
              random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution.Alpha">
            <summary>
              Gets or sets the parameter alpha which is used for generation of beta-prime
              distributed random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is less than or equal to one.
            </exception>
            <remarks>
              Calls <see cref="P:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution.AreValidParams"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution.Beta">
            <summary>
              Gets or sets the parameter beta which is used for generation of beta-prime distributed
              random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is less than or equal to one.
            </exception>
            <remarks>
              Calls <see cref="P:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution.AreValidParams"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution.#ctor(System.UInt32)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution.#ctor(Troschuetz.Random.IGenerator)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution"/> class, using the
              specified <see cref="T:Troschuetz.Random.IGenerator"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator"/> object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution.#ctor(System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> as underlying random number generator.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of beta prime distributed random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of beta prime distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> or <paramref name="beta"/> are less than or equal to one.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution.#ctor(System.UInt32,System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
            <param name="alpha">
              The parameter alpha which is used for generation of beta prime distributed random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of beta prime distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> or <paramref name="beta"/> are less than or equal to one.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution.#ctor(Troschuetz.Random.IGenerator,System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution"/> class, using the
              specified <see cref="T:Troschuetz.Random.IGenerator"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator"/> object.</param>
            <param name="alpha">
              The parameter alpha which is used for generation of beta prime distributed random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of beta prime distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> or <paramref name="beta"/> are less than or equal to one.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution.IsValidAlpha(System.Double)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution.Alpha"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/> if value is greater than 1.0; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution.IsValidBeta(System.Double)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution.Beta"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/> if value is greater than 1.0; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution.Minimum">
            <summary>
              Gets the minimum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution.Maximum">
            <summary>
              Gets the maximum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution.Mean">
            <summary>
              Gets the mean of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mean is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution.Median">
            <summary>
              Gets the median of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if median is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution.Variance">
            <summary>
              Gets the variance of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if variance is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution.Mode">
            <summary>
              Gets the mode of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mode is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution.NextDouble">
            <summary>
              Returns a distributed floating point random number.
            </summary>
            <returns>A distributed double-precision floating point number.</returns>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution.AreValidParams">
            <summary>
              Determines whether beta prime distribution is defined under given parameters. The
              default definition returns true if alpha and beta are greater than one; otherwise, it
              returns false.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution"/> class.
            </remarks>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution.Sample">
            <summary>
              Declares a function returning a beta prime distributed floating point random number.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution"/> class.
            </remarks>
        </member>
        <member name="T:Troschuetz.Random.Distributions.Continuous.CauchyDistribution">
            <summary>
              Provides generation of cauchy distributed random numbers.
            </summary>
            <remarks>
              The implementation of the <see cref="T:Troschuetz.Random.Distributions.Continuous.CauchyDistribution"/> type bases upon information
              presented on <a href="http://en.wikipedia.org/wiki/Cauchy_distribution">Wikipedia - Cauchy
              distribution</a> and <a href="http://www.xycoon.com/cauchy2p_random.htm">Xycoon - Cauchy Distribution</a>.
            
              The thread safety of this class depends on the one of the underlying generator.
            </remarks>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.CauchyDistribution.DefaultAlpha">
            <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Continuous.CauchyDistribution.Alpha"/> if none is specified.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.CauchyDistribution.DefaultGamma">
            <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Continuous.CauchyDistribution.Gamma"/> if none is specified.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.CauchyDistribution._alpha">
            <summary>
              Stores the parameter alpha which is used for generation of cauchy distributed random numbers.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.CauchyDistribution._gamma">
            <summary>
              Stores the parameter gamma which is used for generation of cauchy distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.CauchyDistribution.Alpha">
            <summary>
              Gets or sets the parameter alpha of cauchy distributed random numbers which is used
              for their generation.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is equal to <see cref="F:System.Double.NaN"/>.
            </exception>
            <remarks>
              Calls <see cref="P:Troschuetz.Random.Distributions.Continuous.CauchyDistribution.AreValidParams"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.CauchyDistribution.Gamma">
            <summary>
              Gets or sets the parameter gamma which is used for generation of cauchy distributed
              random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is less than or equal to zero.
            </exception>
            <remarks>
              Calls <see cref="P:Troschuetz.Random.Distributions.Continuous.CauchyDistribution.AreValidParams"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.CauchyDistribution.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.CauchyDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.CauchyDistribution.#ctor(System.UInt32)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.CauchyDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.CauchyDistribution.#ctor(Troschuetz.Random.IGenerator)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.CauchyDistribution"/> class, using the
              specified <see cref="T:Troschuetz.Random.IGenerator"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator"/> object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.CauchyDistribution.#ctor(System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.CauchyDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> as underlying random number generator.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of cauchy distributed random numbers.
            </param>
            <param name="gamma">
              The parameter gamma which is used for generation of cauchy distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="gamma"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.CauchyDistribution.#ctor(System.UInt32,System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.CauchyDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
            <param name="alpha">
              The parameter alpha which is used for generation of cauchy distributed random numbers.
            </param>
            <param name="gamma">
              The parameter gamma which is used for generation of cauchy distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="gamma"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.CauchyDistribution.#ctor(Troschuetz.Random.IGenerator,System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.CauchyDistribution"/> class, using the
              specified <see cref="T:Troschuetz.Random.IGenerator"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator"/> object.</param>
            <param name="alpha">
              The parameter alpha which is used for generation of cauchy distributed random numbers.
            </param>
            <param name="gamma">
              The parameter gamma which is used for generation of cauchy distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="gamma"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.CauchyDistribution.IsValidAlpha(System.Double)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Continuous.CauchyDistribution.Alpha"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/>.</returns>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.CauchyDistribution.IsValidGamma(System.Double)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Continuous.CauchyDistribution.Gamma"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/> if value is greater than 0; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.CauchyDistribution.Minimum">
            <summary>
              Gets the minimum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.CauchyDistribution.Maximum">
            <summary>
              Gets the maximum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.CauchyDistribution.Mean">
            <summary>
              Gets the mean of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mean is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.CauchyDistribution.Median">
            <summary>
              Gets the median of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if median is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.CauchyDistribution.Variance">
            <summary>
              Gets the variance of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if variance is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.CauchyDistribution.Mode">
            <summary>
              Gets the mode of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mode is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.CauchyDistribution.NextDouble">
            <summary>
              Returns a distributed floating point random number.
            </summary>
            <returns>A distributed double-precision floating point number.</returns>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.CauchyDistribution.AreValidParams">
            <summary>
              Determines whether cauchy distribution is defined under given parameters. The default
              definition returns true if gamma is greater than zero; otherwise, it returns false.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:Troschuetz.Random.Distributions.Continuous.CauchyDistribution"/> class.
            </remarks>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.CauchyDistribution.Sample">
            <summary>
              Declares a function returning a cauchy distributed floating point random number.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:Troschuetz.Random.Distributions.Continuous.CauchyDistribution"/> class.
            </remarks>
        </member>
        <member name="T:Troschuetz.Random.Distributions.Continuous.ChiDistribution">
            <summary>
              Provides generation of chi distributed random numbers.
            </summary>
            <remarks>
              The implementation of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ChiDistribution"/> type bases upon information
              presented on <a href="http://en.wikipedia.org/wiki/Chi_distribution">Wikipedia - Chi distribution</a>.
            
              The thread safety of this class depends on the one of the underlying generator.
            </remarks>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.ChiDistribution.DefaultAlpha">
            <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Continuous.ChiDistribution.Alpha"/> if none is specified.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.ChiDistribution.LanczosCoefficients">
            <summary>
              Represents coefficients for the Lanczos approximation of the Gamma function.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.ChiDistribution._alpha">
            <summary>
              Stores the parameter alpha which is used for generation of chi distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.ChiDistribution.Alpha">
            <summary>
              Gets or sets the parameter alpha which is used for generation of chi distributed
              random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is less than or equal to zero.
            </exception>
            <remarks>
              Calls <see cref="P:Troschuetz.Random.Distributions.Continuous.ChiDistribution.IsValidParam"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.ChiDistribution.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ChiDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.ChiDistribution.#ctor(System.UInt32)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ChiDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.ChiDistribution.#ctor(Troschuetz.Random.IGenerator)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ChiDistribution"/> class, using the
              specified <see cref="T:Troschuetz.Random.IGenerator"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator"/> object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.ChiDistribution.#ctor(System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ChiDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> as underlying random number generator.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of chi distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.ChiDistribution.#ctor(System.UInt32,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ChiDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
            <param name="alpha">
              The parameter alpha which is used for generation of chi distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.ChiDistribution.#ctor(Troschuetz.Random.IGenerator,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ChiDistribution"/> class, using the
              specified <see cref="T:Troschuetz.Random.IGenerator"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator"/> object.</param>
            <param name="alpha">
              The parameter alpha which is used for generation of chi distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.ChiDistribution.IsValidAlpha(System.Int32)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Continuous.ChiDistribution.Alpha"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/> if value is greater than 0; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.ChiDistribution.Gamma(System.Double)">
            <summary>
              Represents a Lanczos approximation of the Gamma function.
            </summary>
            <param name="x">A double-precision floating point number.</param>
            <returns>
              A double-precision floating point number representing an approximation of Gamma( <paramref name="x"/>).
            </returns>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.ChiDistribution.Minimum">
            <summary>
              Gets the minimum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.ChiDistribution.Maximum">
            <summary>
              Gets the maximum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.ChiDistribution.Mean">
            <summary>
              Gets the mean of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mean is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.ChiDistribution.Median">
            <summary>
              Gets the median of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if median is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.ChiDistribution.Variance">
            <summary>
              Gets the variance of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if variance is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.ChiDistribution.Mode">
            <summary>
              Gets the mode of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mode is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.ChiDistribution.NextDouble">
            <summary>
              Returns a distributed floating point random number.
            </summary>
            <returns>A distributed double-precision floating point number.</returns>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.ChiDistribution.IsValidParam">
            <summary>
              Determines whether chi distribution is defined under given parameter. The default
              definition returns true if alpha is greater than zero; otherwise, it returns false.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:Troschuetz.Random.Distributions.Continuous.ChiDistribution"/> class.
            </remarks>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.ChiDistribution.Sample">
            <summary>
              Declares a function returning a chi distributed floating point random number.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:Troschuetz.Random.Distributions.Continuous.ChiDistribution"/> class.
            </remarks>
        </member>
        <member name="T:Troschuetz.Random.Distributions.Continuous.ChiSquareDistribution">
            <summary>
              Provides generation of chi-square distributed random numbers.
            </summary>
            <remarks>
              The implementation of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ChiSquareDistribution"/> type bases upon information
              presented on <a href="http://en.wikipedia.org/wiki/Chi-square_distribution">Wikipedia -
              Chi-square distribution</a>.
            
              The thread safety of this class depends on the one of the underlying generator.
            </remarks>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.ChiSquareDistribution.DefaultAlpha">
            <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Continuous.ChiSquareDistribution.Alpha"/> if none is specified.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.ChiSquareDistribution._alpha">
            <summary>
              Stores the parameter alpha which is used for generation of chi square distributed
              random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.ChiSquareDistribution.Alpha">
            <summary>
              Gets or sets the parameter alpha which is used for generation of chi-square
              distributed random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is less than or equal to zero.
            </exception>
            <remarks>
              Calls <see cref="P:Troschuetz.Random.Distributions.Continuous.ChiSquareDistribution.IsValidParam"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.ChiSquareDistribution.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ChiSquareDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.ChiSquareDistribution.#ctor(System.UInt32)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ChiSquareDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.ChiSquareDistribution.#ctor(Troschuetz.Random.IGenerator)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ChiSquareDistribution"/> class, using the
              specified <see cref="T:Troschuetz.Random.IGenerator"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator"/> object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.ChiSquareDistribution.#ctor(System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ChiSquareDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> as underlying random number generator.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of chi square distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.ChiSquareDistribution.#ctor(System.UInt32,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ChiSquareDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
            <param name="alpha">
              The parameter alpha which is used for generation of chi square distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.ChiSquareDistribution.#ctor(Troschuetz.Random.IGenerator,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ChiSquareDistribution"/> class, using the
              specified <see cref="T:Troschuetz.Random.IGenerator"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator"/> object.</param>
            <param name="alpha">
              The parameter alpha which is used for generation of chi square distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.ChiSquareDistribution.IsValidAlpha(System.Int32)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Continuous.ChiSquareDistribution.Alpha"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/> if value is greater than 0; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.ChiSquareDistribution.Minimum">
            <summary>
              Gets the minimum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.ChiSquareDistribution.Maximum">
            <summary>
              Gets the maximum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.ChiSquareDistribution.Mean">
            <summary>
              Gets the mean of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mean is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.ChiSquareDistribution.Median">
            <summary>
              Gets the median of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if median is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.ChiSquareDistribution.Variance">
            <summary>
              Gets the variance of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if variance is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.ChiSquareDistribution.Mode">
            <summary>
              Gets the mode of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mode is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.ChiSquareDistribution.NextDouble">
            <summary>
              Returns a distributed floating point random number.
            </summary>
            <returns>A distributed double-precision floating point number.</returns>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.ChiSquareDistribution.IsValidParam">
            <summary>
              Determines whether chi square distribution is defined under given parameter. The
              default definition returns true if alpha is greater than zero; otherwise, it returns false.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:Troschuetz.Random.Distributions.Continuous.ChiSquareDistribution"/> class.
            </remarks>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.ChiSquareDistribution.Sample">
            <summary>
              Declares a function returning a chi square distributed floating point random number.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:Troschuetz.Random.Distributions.Continuous.ChiSquareDistribution"/> class.
            </remarks>
        </member>
        <member name="T:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution">
            <summary>
              Provides generation of continuous uniformly distributed random numbers.
            </summary>
            <remarks>
              The implementation of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution"/> type bases upon
              information presented on
              <a href="http://en.wikipedia.org/wiki/Uniform_distribution_%28continuous%29">Wikipedia -
              Uniform distribution (continuous)</a>.
            
              The thread safety of this class depends on the one of the underlying generator.
            </remarks>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution.DefaultAlpha">
            <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution.Alpha"/> if none is specified.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution.DefaultBeta">
            <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution.Beta"/> if none is specified.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution._alpha">
            <summary>
              Stores the parameter alpha which is used for generation of uniformly distributed
              random numbers.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution._beta">
            <summary>
              Stores the parameter beta which is used for generation of uniformly distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution.Alpha">
            <summary>
              Gets or sets the parameter alpha which is used for generation of uniformly distributed
              random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is greater than <see cref="P:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution.Beta"/>.
            </exception>
            <remarks>
              Calls <see cref="P:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution.AreValidParams"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution.Beta">
            <summary>
              Gets or sets the parameter beta which is used for generation of uniformly distributed
              random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <see cref="P:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution.Alpha"/> is greater than <paramref name="value"/>.
            </exception>
            <remarks>
              Calls <see cref="P:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution.AreValidParams"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution"/> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution.#ctor(System.UInt32)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution"/> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution.#ctor(Troschuetz.Random.IGenerator)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution"/> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator"/> object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution.#ctor(System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution"/> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> as underlying random number generator.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of continuous uniform distributed
              random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of continuous uniform distributed
              random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is greater than <paramref name="beta"/>.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution.#ctor(System.UInt32,System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution"/> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
            <param name="alpha">
              The parameter alpha which is used for generation of continuous uniform distributed
              random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of continuous uniform distributed
              random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is greater than <paramref name="beta"/>.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution.#ctor(Troschuetz.Random.IGenerator,System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution"/> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator"/> object.</param>
            <param name="alpha">
              The parameter alpha which is used for generation of continuous uniform distributed
              random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of continuous uniform distributed
              random numbers.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is greater than <paramref name="beta"/>.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution.IsValidAlpha(System.Double)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution.Alpha"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
              <see langword="true"/> if value is less than or equal to <see cref="P:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution.Beta"/>;
              otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution.IsValidBeta(System.Double)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution.Beta"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
              <see langword="true"/> if value is greater than or equal to <see cref="P:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution.Alpha"/>;
              otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution.Minimum">
            <summary>
              Gets the minimum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution.Maximum">
            <summary>
              Gets the maximum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution.Mean">
            <summary>
              Gets the mean of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mean is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution.Median">
            <summary>
              Gets the median of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if median is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution.Variance">
            <summary>
              Gets the variance of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if variance is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution.Mode">
            <summary>
              Gets the mode of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mode is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution.NextDouble">
            <summary>
              Returns a distributed floating point random number.
            </summary>
            <returns>A distributed double-precision floating point number.</returns>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution.AreValidParams">
            <summary>
              Determines whether continuous uniform distribution is defined under given parameters.
              The default definition returns true if alpha is less than or equal to beta; otherwise,
              it returns false.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution"/> class.
            </remarks>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution.Sample">
            <summary>
              Declares a function returning a continuous uniform distributed floating point random number.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution"/> class.
            </remarks>
        </member>
        <member name="T:Troschuetz.Random.Distributions.Continuous.ErlangDistribution">
            <summary>
              Provides generation of erlang distributed random numbers.
            </summary>
            <remarks>
              The implementation of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ErlangDistribution"/> type bases upon information
              presented on <a href="http://en.wikipedia.org/wiki/Erlang_distribution">Wikipedia - Erlang
              distribution</a> and <a href="http://www.xycoon.com/erlang_random.htm">Xycoon - Erlang Distribution</a>.
            
              The thread safety of this class depends on the one of the underlying generator.
            </remarks>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.ErlangDistribution.DefaultAlpha">
            <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Continuous.ErlangDistribution.Alpha"/> if none is specified.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.ErlangDistribution.DefaultLambda">
            <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Continuous.ErlangDistribution.Lambda"/> if none is specified.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.ErlangDistribution._lambda">
            <summary>
              Stores the parameter lambda which is used for generation of rayleigh distributed
              random numbers.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.ErlangDistribution._alpha">
            <summary>
              Stores the parameter alpha which is used for generation of rayleigh distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.ErlangDistribution.Alpha">
            <summary>
              Gets or sets the parameter alpha which is used for generation of erlang distributed
              random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is less than or equal to zero.
            </exception>
            <remarks>
              Calls <see cref="P:Troschuetz.Random.Distributions.Continuous.ErlangDistribution.AreValidParams"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.ErlangDistribution.Lambda">
            <summary>
              Gets or sets the parameter lambda which is used for generation of erlang distributed
              random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is less than or equal to zero.
            </exception>
            <remarks>
              Calls <see cref="P:Troschuetz.Random.Distributions.Continuous.ErlangDistribution.AreValidParams"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.ErlangDistribution.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ErlangDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.ErlangDistribution.#ctor(System.UInt32)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ErlangDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.ErlangDistribution.#ctor(Troschuetz.Random.IGenerator)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ErlangDistribution"/> class, using the
              specified <see cref="T:Troschuetz.Random.IGenerator"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator"/> object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.ErlangDistribution.#ctor(System.Int32,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ErlangDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> as underlying random number generator.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of erlang distributed random numbers.
            </param>
            <param name="lambda">
              The parameter lambda which is used for generation of erlang distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> or <paramref name="lambda"/> are less than or equal to zero.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.ErlangDistribution.#ctor(System.UInt32,System.Int32,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ErlangDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
            <param name="alpha">
              The parameter alpha which is used for generation of erlang distributed random numbers.
            </param>
            <param name="lambda">
              The parameter lambda which is used for generation of erlang distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> or <paramref name="lambda"/> are less than or equal to zero.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.ErlangDistribution.#ctor(Troschuetz.Random.IGenerator,System.Int32,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ErlangDistribution"/> class, using the
              specified <see cref="T:Troschuetz.Random.IGenerator"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator"/> object.</param>
            <param name="alpha">
              The parameter alpha which is used for generation of erlang distributed random numbers.
            </param>
            <param name="lambda">
              The parameter lambda which is used for generation of erlang distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> or <paramref name="lambda"/> are less than or equal to zero.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.ErlangDistribution.IsValidAlpha(System.Int32)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Continuous.ErlangDistribution.Alpha"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/> if value is greater than 0; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.ErlangDistribution.IsValidLambda(System.Double)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Continuous.ErlangDistribution.Lambda"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/> if value is greater than 0.0; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.ErlangDistribution.Minimum">
            <summary>
              Gets the minimum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.ErlangDistribution.Maximum">
            <summary>
              Gets the maximum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.ErlangDistribution.Mean">
            <summary>
              Gets the mean of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mean is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.ErlangDistribution.Median">
            <summary>
              Gets the median of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if median is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.ErlangDistribution.Variance">
            <summary>
              Gets the variance of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if variance is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.ErlangDistribution.Mode">
            <summary>
              Gets the mode of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mode is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.ErlangDistribution.NextDouble">
            <summary>
              Returns a distributed floating point random number.
            </summary>
            <returns>A distributed double-precision floating point number.</returns>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.ErlangDistribution.AreValidParams">
            <summary>
              Determines whether erlang distribution is defined under given parameters. The default
              definition returns true if alpha and lambda are greater than zero; otherwise, it
              returns false.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:Troschuetz.Random.Distributions.Continuous.ErlangDistribution"/> class.
            </remarks>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.ErlangDistribution.Sample">
            <summary>
              Declares a function returning an erlang distributed floating point random number.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:Troschuetz.Random.Distributions.Continuous.ErlangDistribution"/> class.
            </remarks>
        </member>
        <member name="T:Troschuetz.Random.Distributions.Continuous.ExponentialDistribution">
            <summary>
              Provides generation of exponential distributed random numbers.
            </summary>
            <remarks>
              The implementation of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ExponentialDistribution"/> type bases upon
              information presented on
              <a href="http://en.wikipedia.org/wiki/Exponential_distribution">Wikipedia - Exponential distribution</a>.
            
              The thread safety of this class depends on the one of the underlying generator.
            </remarks>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.ExponentialDistribution.DefaultLambda">
            <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Continuous.ExponentialDistribution.Lambda"/> if none is specified.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.ExponentialDistribution._lambda">
            <summary>
              Stores the parameter lambda which is used for generation of exponential distributed
              random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.ExponentialDistribution.Lambda">
            <summary>
              Gets or sets the parameter lambda which is used for generation of exponential
              distributed random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is less than or equal to zero.
            </exception>
            <remarks>
              Calls <see cref="P:Troschuetz.Random.Distributions.Continuous.ExponentialDistribution.IsValidParam"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.ExponentialDistribution.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ExponentialDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.ExponentialDistribution.#ctor(System.UInt32)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ExponentialDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.ExponentialDistribution.#ctor(Troschuetz.Random.IGenerator)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ExponentialDistribution"/> class, using
              the specified <see cref="T:Troschuetz.Random.IGenerator"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator"/> object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.ExponentialDistribution.#ctor(System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ExponentialDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> as underlying random number generator.
            </summary>
            <param name="lambda">
              The parameter lambda which is used for generation of exponential distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="lambda"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.ExponentialDistribution.#ctor(System.UInt32,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ExponentialDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
            <param name="lambda">
              The parameter lambda which is used for generation of exponential distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="lambda"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.ExponentialDistribution.#ctor(Troschuetz.Random.IGenerator,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ExponentialDistribution"/> class, using
              the specified <see cref="T:Troschuetz.Random.IGenerator"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator"/> object.</param>
            <param name="lambda">
              The parameter lambda which is used for generation of exponential distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="lambda"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.ExponentialDistribution.IsValidLambda(System.Double)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Continuous.ExponentialDistribution.Lambda"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/> if value is greater than 0.0; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.ExponentialDistribution.Minimum">
            <summary>
              Gets the minimum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.ExponentialDistribution.Maximum">
            <summary>
              Gets the maximum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.ExponentialDistribution.Mean">
            <summary>
              Gets the mean of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mean is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.ExponentialDistribution.Median">
            <summary>
              Gets the median of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if median is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.ExponentialDistribution.Variance">
            <summary>
              Gets the variance of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if variance is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.ExponentialDistribution.Mode">
            <summary>
              Gets the mode of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mode is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.ExponentialDistribution.NextDouble">
            <summary>
              Returns a distributed floating point random number.
            </summary>
            <returns>A distributed double-precision floating point number.</returns>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.ExponentialDistribution.IsValidParam">
            <summary>
              Determines whether exponential distribution is defined under given parameter. The
              default definition returns true if lambda is greater than zero; otherwise, it returns false.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:Troschuetz.Random.Distributions.Continuous.ExponentialDistribution"/> class.
            </remarks>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.ExponentialDistribution.Sample">
            <summary>
              Declares a function returning an exponential distributed floating point random number.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:Troschuetz.Random.Distributions.Continuous.ExponentialDistribution"/> class.
            </remarks>
        </member>
        <member name="T:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution">
            <summary>
              Provides generation of Fisher-Snedecor distributed random numbers.
            </summary>
            <remarks>
              The implementation of the <see cref="T:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution"/> type bases upon
              information presented on <a href="http://en.wikipedia.org/wiki/F-distribution">Wikipedia - F-distribution</a>.
            
              The thread safety of this class depends on the one of the underlying generator.
            </remarks>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution.DefaultAlpha">
            <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution.Alpha"/> if none is specified.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution.DefaultBeta">
            <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution.Beta"/> if none is specified.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution._alpha">
            <summary>
              Stores the parameter alpha which is used for generation of Fisher-Snedecor distributed
              random numbers.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution._beta">
            <summary>
              Stores the parameter beta which is used for generation of Fisher-Snedecor distributed
              random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution.Alpha">
            <summary>
              Gets or sets the parameter alpha which is used for generation of Fisher-Snedecor
              distributed random numbers.
            </summary>
            <remarks>
              Calls <see cref="P:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution.AreValidParams"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution.Beta">
            <summary>
              Gets or sets the parameter beta which is used for generation of Fisher-Snedecor
              distributed random numbers.
            </summary>
            <remarks>
              Calls <see cref="P:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution.AreValidParams"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution"/> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution.#ctor(System.UInt32)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution"/> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution.#ctor(Troschuetz.Random.IGenerator)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution"/> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator"/> object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution.#ctor(System.Int32,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution"/> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> as underlying random number generator.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of fisher snedecor distributed random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of fisher snedecor distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> or <paramref name="beta"/> are less than or equal to zero.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution.#ctor(System.UInt32,System.Int32,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution"/> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
            <param name="alpha">
              The parameter alpha which is used for generation of fisher snedecor distributed random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of fisher snedecor distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> or <paramref name="beta"/> are less than or equal to zero.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution.#ctor(Troschuetz.Random.IGenerator,System.Int32,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution"/> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator"/> object.</param>
            <param name="alpha">
              The parameter alpha which is used for generation of fisher snedecor distributed random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of fisher snedecor distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> or <paramref name="beta"/> are less than or equal to zero.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution.IsValidAlpha(System.Int32)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution.Alpha"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/> if value is greater than 0; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution.IsValidBeta(System.Int32)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution.Beta"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/> if value is greater than 0; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution.Minimum">
            <summary>
              Gets the minimum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution.Maximum">
            <summary>
              Gets the maximum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution.Mean">
            <summary>
              Gets the mean of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mean is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution.Median">
            <summary>
              Gets the median of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if median is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution.Variance">
            <summary>
              Gets the variance of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if variance is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution.Mode">
            <summary>
              Gets the mode of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mode is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution.NextDouble">
            <summary>
              Returns a distributed floating point random number.
            </summary>
            <returns>A distributed double-precision floating point number.</returns>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution.AreValidParams">
            <summary>
              Determines whether fisher snedecor distribution is defined under given parameters. The
              default definition returns true if alpha and beta are greater than zero; otherwise, it
              returns false.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution"/> class.
            </remarks>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution.Sample">
            <summary>
              Declares a function returning a fisher snedecor distributed floating point random number.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution"/> class.
            </remarks>
        </member>
        <member name="T:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution">
            <summary>
              Provides generation of Fisher-Tippett distributed random numbers.
            </summary>
            <remarks>
              The implementation of the <see cref="T:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution"/> type bases upon
              information presented on
              <a href="http://en.wikipedia.org/wiki/Laplace_distribution">Wikipedia - Fisher-Tippett distribution</a>.
            
              The thread safety of this class depends on the one of the underlying generator.
            </remarks>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution.DefaultAlpha">
            <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution.Alpha"/> if none is specified.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution.DefaultMu">
            <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution.Mu"/> if none is specified.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution._alpha">
            <summary>
              Stores the parameter alpha which is used for generation of fisher tippett distributed
              random numbers.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution._mu">
            <summary>
              Stores the parameter mu which is used for generation of fisher tippett distributed
              random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution.Alpha">
            <summary>
              Gets or sets the parameter alpha which is used for generation of Fisher-Tippett
              distributed random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is less than or equal to zero.
            </exception>
            <remarks>
              Calls <see cref="P:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution.AreValidParams"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution.Mu">
            <summary>
              Gets or sets the parameter mu which is used for generation of Fisher-Tippett
              distributed random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is equal to <see cref="F:System.Double.NaN"/>.
            </exception>
            <remarks>
              Call <see cref="P:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution.AreValidParams"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution"/> class, using
              a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution.#ctor(System.UInt32)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution"/> class, using
              a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution.#ctor(Troschuetz.Random.IGenerator)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution"/> class, using
              the specified <see cref="T:Troschuetz.Random.IGenerator"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator"/> object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution.#ctor(System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution"/> class, using
              a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> as underlying random number generator.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of fisher tippett distributed random numbers.
            </param>
            <param name="mu">
              The parameter mu which is used for generation of fisher tippett distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution.#ctor(System.UInt32,System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution"/> class, using
              a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
            <param name="alpha">
              The parameter alpha which is used for generation of fisher tippett distributed random numbers.
            </param>
            <param name="mu">
              The parameter mu which is used for generation of fisher tippett distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution.#ctor(Troschuetz.Random.IGenerator,System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution"/> class, using
              the specified <see cref="T:Troschuetz.Random.IGenerator"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator"/> object.</param>
            <param name="alpha">
              The parameter alpha which is used for generation of fisher tippett distributed random numbers.
            </param>
            <param name="mu">
              The parameter mu which is used for generation of fisher tippett distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution.IsValidAlpha(System.Double)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution.Alpha"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/> if value is greater than 0.0; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution.IsValidMu(System.Double)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution.Mu"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/>.</returns>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution.Minimum">
            <summary>
              Gets the minimum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution.Maximum">
            <summary>
              Gets the maximum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution.Mean">
            <summary>
              Gets the mean of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mean is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution.Median">
            <summary>
              Gets the median of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if median is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution.Variance">
            <summary>
              Gets the variance of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if variance is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution.Mode">
            <summary>
              Gets the mode of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mode is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution.NextDouble">
            <summary>
              Returns a distributed floating point random number.
            </summary>
            <returns>A distributed double-precision floating point number.</returns>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution.AreValidParams">
            <summary>
              Determines whether fisher tippett distribution is defined under given parameters. The
              default definition returns true if alpha is greater than zero; otherwise, it returns false.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution"/> class.
            </remarks>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution.Sample">
            <summary>
              Declares a function returning a fisher tippett distributed floating point random number.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution"/> class.
            </remarks>
        </member>
        <member name="T:Troschuetz.Random.Distributions.Continuous.GammaDistribution">
            <summary>
              Provides generation of gamma distributed random numbers.
            </summary>
            <remarks>
              The implementation of the <see cref="T:Troschuetz.Random.Distributions.Continuous.GammaDistribution"/> type bases upon information
              presented on <a href="http://en.wikipedia.org/wiki/Gamma_distribution">Wikipedia - Gamma distribution</a>.
            
              The thread safety of this class depends on the one of the underlying generator.
            </remarks>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.GammaDistribution.DefaultAlpha">
            <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Continuous.GammaDistribution.Alpha"/> if none is specified.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.GammaDistribution.DefaultBeta">
            <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Continuous.GammaDistribution.Beta"/> if none is specified.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.GammaDistribution._alpha">
            <summary>
              Stores the parameter alpha which is used for generation of gamma distributed random numbers.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.GammaDistribution._beta">
            <summary>
              Stores the parameter beta which is used for generation of gamma distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.GammaDistribution.Alpha">
            <summary>
              Gets or sets the parameter alpha which is used for generation of gamma distributed
              random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is less than or equal to zero.
            </exception>
            <remarks>
              Calls <see cref="P:Troschuetz.Random.Distributions.Continuous.GammaDistribution.AreValidParams"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.GammaDistribution.Beta">
            <summary>
              Gets or sets the parameter beta which is used for generation of gamma distributed
              random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is less than or equal to zero.
            </exception>
            <remarks>
              Calls <see cref="P:Troschuetz.Random.Distributions.Continuous.GammaDistribution.AreValidParams"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.GammaDistribution.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.GammaDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.GammaDistribution.#ctor(System.UInt32)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.GammaDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.GammaDistribution.#ctor(Troschuetz.Random.IGenerator)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.GammaDistribution"/> class, using the
              specified <see cref="T:Troschuetz.Random.IGenerator"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator"/> object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.GammaDistribution.#ctor(System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.GammaDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> as underlying random number generator.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of gamma distributed random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of gamma distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> or <paramref name="beta"/> are less than or equal to zero.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.GammaDistribution.#ctor(System.UInt32,System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.GammaDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
            <param name="alpha">
              The parameter alpha which is used for generation of gamma distributed random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of gamma distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> or <paramref name="beta"/> are less than or equal to zero.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.GammaDistribution.#ctor(Troschuetz.Random.IGenerator,System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.GammaDistribution"/> class, using the
              specified <see cref="T:Troschuetz.Random.IGenerator"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator"/> object.</param>
            <param name="alpha">
              The parameter alpha which is used for generation of gamma distributed random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of gamma distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> or <paramref name="beta"/> are less than or equal to zero.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.GammaDistribution.IsValidAlpha(System.Double)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Continuous.GammaDistribution.Alpha"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/> if value is greater than 0.0; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.GammaDistribution.IsValidBeta(System.Double)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Continuous.GammaDistribution.Beta"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/> if value is greater than 0.0; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.GammaDistribution.Minimum">
            <summary>
              Gets the minimum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.GammaDistribution.Maximum">
            <summary>
              Gets the maximum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.GammaDistribution.Mean">
            <summary>
              Gets the mean of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mean is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.GammaDistribution.Median">
            <summary>
              Gets the median of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if median is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.GammaDistribution.Variance">
            <summary>
              Gets the variance of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if variance is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.GammaDistribution.Mode">
            <summary>
              Gets the mode of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mode is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.GammaDistribution.NextDouble">
            <summary>
              Returns a distributed floating point random number.
            </summary>
            <returns>A distributed double-precision floating point number.</returns>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.GammaDistribution.AreValidParams">
            <summary>
              Determines whether gamma distribution is defined under given parameters. The default
              definition returns true if alpha and beta are greater than zero; otherwise, it
              returns false.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:Troschuetz.Random.Distributions.Continuous.GammaDistribution"/> class.
            </remarks>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.GammaDistribution.Sample">
            <summary>
              Declares a function returning a gamma distributed floating point random number.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:Troschuetz.Random.Distributions.Continuous.GammaDistribution"/> class.
            </remarks>
        </member>
        <member name="T:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution">
            <summary>
              Provides generation of laplace distributed random numbers.
            </summary>
            <remarks>
              The implementation of the <see cref="T:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution"/> type bases upon information
              presented on <a href="http://en.wikipedia.org/wiki/Laplace_distribution">Wikipedia -
              Laplace distribution</a>.
            
              The thread safety of this class depends on the one of the underlying generator.
            </remarks>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution.DefaultAlpha">
            <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution.Alpha"/> if none is specified.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution.DefaultMu">
            <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution.Mu"/> if none is specified.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution._alpha">
            <summary>
              Stores the parameter alpha which is used for generation of laplace distributed random numbers.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution._mu">
            <summary>
              Stores the parameter mu which is used for generation of laplace distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution.Alpha">
            <summary>
              Gets or sets the parameter alpha which is used for generation of laplace distributed
              random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is less than or equal to zero.
            </exception>
            <remarks>
              Calls <see cref="P:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution.AreValidParams"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution.Mu">
            <summary>
              Gets or sets the parameter mu which is used for generation of laplace distributed
              random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is equal to <see cref="F:System.Double.NaN"/>.
            </exception>
            <remarks>
              Calls <see cref="P:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution.AreValidParams"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution.#ctor(System.UInt32)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution.#ctor(Troschuetz.Random.IGenerator)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution"/> class, using the
              specified <see cref="T:Troschuetz.Random.IGenerator"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator"/> object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution.#ctor(System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> as underlying random number generator.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of laplace distributed random numbers.
            </param>
            <param name="mu">
              The parameter mu which is used for generation of laplace distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution.#ctor(System.UInt32,System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
            <param name="alpha">
              The parameter alpha which is used for generation of laplace distributed random numbers.
            </param>
            <param name="mu">
              The parameter mu which is used for generation of laplace distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution.#ctor(Troschuetz.Random.IGenerator,System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution"/> class, using the
              specified <see cref="T:Troschuetz.Random.IGenerator"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator"/> object.</param>
            <param name="alpha">
              The parameter alpha which is used for generation of laplace distributed random numbers.
            </param>
            <param name="mu">
              The parameter mu which is used for generation of laplace distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution.IsValidAlpha(System.Double)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution.Alpha"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/> if value is greater than 0.0; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution.IsValidMu(System.Double)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution.Mu"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/>.</returns>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution.Minimum">
            <summary>
              Gets the minimum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution.Maximum">
            <summary>
              Gets the maximum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution.Mean">
            <summary>
              Gets the mean of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mean is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution.Median">
            <summary>
              Gets the median of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if median is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution.Variance">
            <summary>
              Gets the variance of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if variance is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution.Mode">
            <summary>
              Gets the mode of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mode is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution.NextDouble">
            <summary>
              Returns a distributed floating point random number.
            </summary>
            <returns>A distributed double-precision floating point number.</returns>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution.AreValidParams">
            <summary>
              Determines whether laplace distribution is defined under given parameters. The default
              definition returns true if alpha is greater than zero; otherwise, it returns false.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution"/> class.
            </remarks>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution.Sample">
            <summary>
              Declares a function returning a laplace distributed floating point random number.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution"/> class.
            </remarks>
        </member>
        <member name="T:Troschuetz.Random.Distributions.Continuous.LogisticDistribution">
            <summary>
              Provides generation of logistic distributed random numbers.
            </summary>
            <remarks>
              The implementation of the <see cref="T:Troschuetz.Random.Distributions.Continuous.LogisticDistribution"/> type bases upon information
              presented on <a href="http://en.wikipedia.org/wiki/Log-normal_distribution">Wikipedia -
              Logistic Distribution</a> and the implementation in the
              <a href="http://www.boost.org/libs/random/index.html">Boost Random Number Library</a>.
            
              The thread safety of this class depends on the one of the underlying generator.
            </remarks>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.LogisticDistribution.DefaultMu">
            <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Continuous.LogisticDistribution.Mu"/> if none is specified.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.LogisticDistribution.DefaultSigma">
            <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Continuous.LogisticDistribution.Sigma"/> if none is specified.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.LogisticDistribution._mu">
            <summary>
              Stores the parameter mu which is used for generation of logistic distributed random numbers.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.LogisticDistribution._sigma">
            <summary>
              Stores the parameter sigma which is used for generation of logistic distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.LogisticDistribution.Mu">
            <summary>
              Gets or sets the parameter mu which is used for generation of logistic distributed
              random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is equal to <see cref="F:System.Double.NaN"/>.
            </exception>
            <remarks>
              Calls <see cref="P:Troschuetz.Random.Distributions.Continuous.LogisticDistribution.AreValidParams"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.LogisticDistribution.Sigma">
            <summary>
              Gets or sets the parameter sigma which is used for generation of logistic distributed
              random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is less than zero.
            </exception>
            <remarks>
              Calls <see cref="P:Troschuetz.Random.Distributions.Continuous.LogisticDistribution.AreValidParams"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.LogisticDistribution.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.LogisticDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.LogisticDistribution.#ctor(System.UInt32)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.LogisticDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.LogisticDistribution.#ctor(Troschuetz.Random.IGenerator)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.LogisticDistribution"/> class, using the
              specified <see cref="T:Troschuetz.Random.IGenerator"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator"/> object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.LogisticDistribution.#ctor(System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.LogisticDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> as underlying random number generator.
            </summary>
            <param name="mu">
              The parameter mu which is used for generation of logistic distributed random numbers.
            </param>
            <param name="sigma">
              The parameter sigma which is used for generation of logistic distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="sigma"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.LogisticDistribution.#ctor(System.UInt32,System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.LogisticDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
            <param name="mu">
              The parameter mu which is used for generation of logistic distributed random numbers.
            </param>
            <param name="sigma">
              The parameter sigma which is used for generation of logistic distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="sigma"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.LogisticDistribution.#ctor(Troschuetz.Random.IGenerator,System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.LogisticDistribution"/> class, using the
              specified <see cref="T:Troschuetz.Random.IGenerator"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator"/> object.</param>
            <param name="mu">
              The parameter mu which is used for generation of logistic distributed random numbers.
            </param>
            <param name="sigma">
              The parameter sigma which is used for generation of logistic distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="sigma"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.LogisticDistribution.IsValidMu(System.Double)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Continuous.LogisticDistribution.Mu"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/>.</returns>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.LogisticDistribution.IsValidSigma(System.Double)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Continuous.LogisticDistribution.Sigma"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/> if value is greater than 0.0; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.LogisticDistribution.Minimum">
            <summary>
              Gets the minimum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.LogisticDistribution.Maximum">
            <summary>
              Gets the maximum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.LogisticDistribution.Mean">
            <summary>
              Gets the mean of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mean is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.LogisticDistribution.Median">
            <summary>
              Gets the median of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if median is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.LogisticDistribution.Variance">
            <summary>
              Gets the variance of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if variance is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.LogisticDistribution.Mode">
            <summary>
              Gets the mode of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mode is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.LogisticDistribution.NextDouble">
            <summary>
              Returns a distributed floating point random number.
            </summary>
            <returns>A distributed double-precision floating point number.</returns>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.LogisticDistribution.AreValidParams">
            <summary>
              Determines whether logistic distribution is defined under given parameters. The
              default definition returns true if sigma is greater than zero; otherwise, it returns false.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:Troschuetz.Random.Distributions.Continuous.LogisticDistribution"/> class.
            </remarks>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.LogisticDistribution.Sample">
            <summary>
              Declares a function returning a logistic distributed floating point random number.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:Troschuetz.Random.Distributions.Continuous.LogisticDistribution"/> class.
            </remarks>
        </member>
        <member name="T:Troschuetz.Random.Distributions.Continuous.LognormalDistribution">
            <summary>
              Provides generation of lognormal distributed random numbers.
            </summary>
            <remarks>
              The implementation of the <see cref="T:Troschuetz.Random.Distributions.Continuous.LognormalDistribution"/> type bases upon information
              presented on <a href="http://en.wikipedia.org/wiki/Log-normal_distribution">Wikipedia -
              Lognormal Distribution</a> and the implementation in the
              <a href="http://www.boost.org/libs/random/index.html">Boost Random Number Library</a>.
            
              The thread safety of this class depends on the one of the underlying generator.
            </remarks>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.LognormalDistribution.DefaultMu">
            <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Continuous.LognormalDistribution.Mu"/> if none is specified.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.LognormalDistribution.DefaultSigma">
            <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Continuous.LognormalDistribution.Sigma"/> if none is specified.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.LognormalDistribution._mu">
            <summary>
              Stores the parameter mu which is used for generation of lognormal distributed random numbers.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.LognormalDistribution._sigma">
            <summary>
              Stores the parameter sigma which is used for generation of lognormal distributed
              random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.LognormalDistribution.Mu">
            <summary>
              Gets or sets the parameter mu which is used for generation of lognormal distributed
              random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is equal to <see cref="F:System.Double.NaN"/>.
            </exception>
            <remarks>
              Calls <see cref="P:Troschuetz.Random.Distributions.Continuous.LognormalDistribution.AreValidParams"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.LognormalDistribution.Sigma">
            <summary>
              Gets or sets the parameter sigma which is used for generation of lognormal distributed
              random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is less than zero.
            </exception>
            <remarks>
              Calls <see cref="P:Troschuetz.Random.Distributions.Continuous.LognormalDistribution.AreValidParams"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.LognormalDistribution.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.LognormalDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.LognormalDistribution.#ctor(System.UInt32)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.LognormalDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.LognormalDistribution.#ctor(Troschuetz.Random.IGenerator)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.LognormalDistribution"/> class, using the
              specified <see cref="T:Troschuetz.Random.IGenerator"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator"/> object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.LognormalDistribution.#ctor(System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.LognormalDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> as underlying random number generator.
            </summary>
            <param name="mu">
              The parameter mu which is used for generation of lognormal distributed random numbers.
            </param>
            <param name="sigma">
              The parameter sigma which is used for generation of lognormal distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="sigma"/> is less than zero.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.LognormalDistribution.#ctor(System.UInt32,System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.LognormalDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
            <param name="mu">
              The parameter mu which is used for generation of lognormal distributed random numbers.
            </param>
            <param name="sigma">
              The parameter sigma which is used for generation of lognormal distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="sigma"/> is less than zero.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.LognormalDistribution.#ctor(Troschuetz.Random.IGenerator,System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.LognormalDistribution"/> class, using the
              specified <see cref="T:Troschuetz.Random.IGenerator"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator"/> object.</param>
            <param name="mu">
              The parameter mu which is used for generation of lognormal distributed random numbers.
            </param>
            <param name="sigma">
              The parameter sigma which is used for generation of lognormal distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="sigma"/> is less than zero.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.LognormalDistribution.IsValidMu(System.Double)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Continuous.LognormalDistribution.Mu"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/>.</returns>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.LognormalDistribution.IsValidSigma(System.Double)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Continuous.LognormalDistribution.Sigma"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
              <see langword="true"/> if value is greater than or equal to 0.0; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.LognormalDistribution.Minimum">
            <summary>
              Gets the minimum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.LognormalDistribution.Maximum">
            <summary>
              Gets the maximum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.LognormalDistribution.Mean">
            <summary>
              Gets the mean of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mean is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.LognormalDistribution.Median">
            <summary>
              Gets the median of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if median is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.LognormalDistribution.Variance">
            <summary>
              Gets the variance of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if variance is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.LognormalDistribution.Mode">
            <summary>
              Gets the mode of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mode is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.LognormalDistribution.NextDouble">
            <summary>
              Returns a distributed floating point random number.
            </summary>
            <returns>A distributed double-precision floating point number.</returns>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.LognormalDistribution.AreValidParams">
            <summary>
              Determines whether lognormal distribution is defined under given parameters. The
              default definition returns true if sigma is greater than or equal to zero; otherwise,
              it returns false.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:Troschuetz.Random.Distributions.Continuous.LognormalDistribution"/> class.
            </remarks>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.LognormalDistribution.Sample">
            <summary>
              Declares a function returning a lognormal distributed floating point random number.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:Troschuetz.Random.Distributions.Continuous.LognormalDistribution"/> class.
            </remarks>
        </member>
        <member name="T:Troschuetz.Random.Distributions.Continuous.NormalDistribution">
            <summary>
              Provides generation of normal distributed random numbers.
            </summary>
            <remarks>
              The implementation of the <see cref="T:Troschuetz.Random.Distributions.Continuous.NormalDistribution"/> type bases upon information
              presented on <a href="http://en.wikipedia.org/wiki/Normal_distribution">Wikipedia - Normal
              distribution</a> and the implementation in the
              <a href="http://www.lkn.ei.tum.de/lehre/scn/cncl/doc/html/cncl_toc.html">Communication
              Networks Class Library</a>.
            
              The thread safety of this class depends on the one of the underlying generator.
            </remarks>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.NormalDistribution.DefaultMu">
            <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Continuous.NormalDistribution.Mu"/> if none is specified.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.NormalDistribution.DefaultSigma">
            <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Continuous.NormalDistribution.Sigma"/> if none is specified.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.NormalDistribution._mu">
            <summary>
              Stores the parameter mu which is used for generation of normal distributed random numbers.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.NormalDistribution._sigma">
            <summary>
              Stores the parameter sigma which is used for generation of normal distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.NormalDistribution.Mu">
            <summary>
              Gets or sets the parameter mu which is used for generation of normal distributed
              random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is equal to <see cref="F:System.Double.NaN"/>.
            </exception>
            <remarks>
              Calls <see cref="P:Troschuetz.Random.Distributions.Continuous.NormalDistribution.AreValidParams"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.NormalDistribution.Sigma">
            <summary>
              Gets or sets the parameter sigma which is used for generation of normal distributed
              random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is less than or equal to zero.
            </exception>
            <remarks>
              Calls <see cref="P:Troschuetz.Random.Distributions.Continuous.NormalDistribution.AreValidParams"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.NormalDistribution.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.NormalDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.NormalDistribution.#ctor(System.UInt32)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.NormalDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.NormalDistribution.#ctor(Troschuetz.Random.IGenerator)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.NormalDistribution"/> class, using the
              specified <see cref="T:Troschuetz.Random.IGenerator"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator"/> object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.NormalDistribution.#ctor(System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.NormalDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> as underlying random number generator.
            </summary>
            <param name="mu">
              The parameter mu which is used for generation of normal distributed random numbers.
            </param>
            <param name="sigma">
              The parameter sigma which is used for generation of normal distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="sigma"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.NormalDistribution.#ctor(System.UInt32,System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.NormalDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
            <param name="mu">
              The parameter mu which is used for generation of normal distributed random numbers.
            </param>
            <param name="sigma">
              The parameter sigma which is used for generation of normal distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="sigma"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.NormalDistribution.#ctor(Troschuetz.Random.IGenerator,System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.NormalDistribution"/> class, using the
              specified <see cref="T:Troschuetz.Random.IGenerator"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator"/> object.</param>
            <param name="mu">
              The parameter mu which is used for generation of normal distributed random numbers.
            </param>
            <param name="sigma">
              The parameter sigma which is used for generation of normal distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="sigma"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.NormalDistribution.IsValidMu(System.Double)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Continuous.NormalDistribution.Mu"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/>.</returns>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.NormalDistribution.IsValidSigma(System.Double)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Continuous.NormalDistribution.Sigma"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/> if value is greater than 0.0; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.NormalDistribution.Minimum">
            <summary>
              Gets the minimum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.NormalDistribution.Maximum">
            <summary>
              Gets the maximum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.NormalDistribution.Mean">
            <summary>
              Gets the mean of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mean is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.NormalDistribution.Median">
            <summary>
              Gets the median of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if median is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.NormalDistribution.Variance">
            <summary>
              Gets the variance of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if variance is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.NormalDistribution.Mode">
            <summary>
              Gets the mode of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mode is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.NormalDistribution.NextDouble">
            <summary>
              Returns a distributed floating point random number.
            </summary>
            <returns>A distributed double-precision floating point number.</returns>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.NormalDistribution.AreValidParams">
            <summary>
              Determines whether normal distribution is defined under given parameters. The default
              definition returns true if sigma is greater than zero; otherwise, it returns false.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:Troschuetz.Random.Distributions.Continuous.NormalDistribution"/> class.
            </remarks>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.NormalDistribution.Sample">
            <summary>
              Declares a function returning a normal distributed floating point random number.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:Troschuetz.Random.Distributions.Continuous.NormalDistribution"/> class.
            </remarks>
        </member>
        <member name="T:Troschuetz.Random.Distributions.Continuous.ParetoDistribution">
            <summary>
              Provides generation of pareto distributed random numbers.
            </summary>
            <remarks>
              The implementation of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ParetoDistribution"/> type bases upon information
              presented on <a href="http://en.wikipedia.org/wiki/Pareto_distribution">Wikipedia - Pareto
              distribution</a> and <a href="http://www.xycoon.com/par_random.htm">Xycoon - Pareto Distribution</a>.
            
              The thread safety of this class depends on the one of the underlying generator.
            </remarks>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.ParetoDistribution.DefaultAlpha">
            <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Continuous.ParetoDistribution.Alpha"/> if none is specified.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.ParetoDistribution.DefaultBeta">
            <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Continuous.ParetoDistribution.Beta"/> if none is specified.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.ParetoDistribution._beta">
            <summary>
              Stores the parameter beta which is used for generation of pareto distributed random numbers.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.ParetoDistribution._alpha">
            <summary>
              Stores the parameter alpha which is used for generation of pareto distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.ParetoDistribution.Alpha">
            <summary>
              Gets or sets the parameter alpha which is used for generation of pareto distributed
              random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is less than or equal to zero.
            </exception>
            <remarks>
              Calls <see cref="P:Troschuetz.Random.Distributions.Continuous.ParetoDistribution.AreValidParams"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.ParetoDistribution.Beta">
            <summary>
              Gets or sets the parameter beta which is used for generation of pareto distributed
              random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is less than or equal to zero.
            </exception>
            <remarks>
              Calls <see cref="P:Troschuetz.Random.Distributions.Continuous.ParetoDistribution.AreValidParams"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.ParetoDistribution.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ParetoDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.ParetoDistribution.#ctor(System.UInt32)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ParetoDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.ParetoDistribution.#ctor(Troschuetz.Random.IGenerator)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ParetoDistribution"/> class, using the
              specified <see cref="T:Troschuetz.Random.IGenerator"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator"/> object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.ParetoDistribution.#ctor(System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ParetoDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> as underlying random number generator.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of pareto distributed random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of pareto distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> or <paramref name="beta"/> are less than or equal to zero.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.ParetoDistribution.#ctor(System.UInt32,System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ParetoDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
            <param name="alpha">
              The parameter alpha which is used for generation of pareto distributed random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of pareto distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> or <paramref name="beta"/> are less than or equal to zero.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.ParetoDistribution.#ctor(Troschuetz.Random.IGenerator,System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ParetoDistribution"/> class, using the
              specified <see cref="T:Troschuetz.Random.IGenerator"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator"/> object.</param>
            <param name="alpha">
              The parameter alpha which is used for generation of pareto distributed random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of pareto distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> or <paramref name="beta"/> are less than or equal to zero.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.ParetoDistribution.IsValidAlpha(System.Double)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Continuous.ParetoDistribution.Alpha"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/> if value is greater than 0.0; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.ParetoDistribution.IsValidBeta(System.Double)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Continuous.ParetoDistribution.Beta"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/> if value is greater than 0.0; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.ParetoDistribution.Minimum">
            <summary>
              Gets the minimum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.ParetoDistribution.Maximum">
            <summary>
              Gets the maximum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.ParetoDistribution.Mean">
            <summary>
              Gets the mean of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mean is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.ParetoDistribution.Median">
            <summary>
              Gets the median of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if median is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.ParetoDistribution.Variance">
            <summary>
              Gets the variance of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if variance is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.ParetoDistribution.Mode">
            <summary>
              Gets the mode of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mode is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.ParetoDistribution.NextDouble">
            <summary>
              Returns a distributed floating point random number.
            </summary>
            <returns>A distributed double-precision floating point number.</returns>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.ParetoDistribution.AreValidParams">
            <summary>
              Determines whether pareto distribution is defined under given parameters. The default
              definition returns true if alpha and beta are greater than zero; otherwise, it returns false.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:Troschuetz.Random.Distributions.Continuous.ParetoDistribution"/> class.
            </remarks>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.ParetoDistribution.Sample">
            <summary>
              Declares a function returning a pareto distributed floating point random number.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:Troschuetz.Random.Distributions.Continuous.ParetoDistribution"/> class.
            </remarks>
        </member>
        <member name="T:Troschuetz.Random.Distributions.Continuous.PowerDistribution">
            <summary>
              Provides generation of power distributed random numbers.
            </summary>
            <remarks>
              The implementation of the <see cref="T:Troschuetz.Random.Distributions.Continuous.PowerDistribution"/> type bases upon information
              presented on <a href="http://www.xycoon.com/power.htm">Xycoon - Power Distribution</a>.
            
              The thread safety of this class depends on the one of the underlying generator.
            </remarks>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.PowerDistribution.DefaultAlpha">
            <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Continuous.PowerDistribution.Alpha"/> if none is specified.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.PowerDistribution.DefaultBeta">
            <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Continuous.PowerDistribution.Beta"/> if none is specified.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.PowerDistribution._alpha">
            <summary>
              Stores the parameter alpha which is used for generation of power distributed random numbers.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.PowerDistribution._beta">
            <summary>
              Stores the parameter beta which is used for generation of power distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.PowerDistribution.Alpha">
            <summary>
              Gets or sets the parameter alpha which is used for generation of power distributed
              random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is less than or equal to zero.
            </exception>
            <remarks>
              Calls <see cref="M:Troschuetz.Random.Distributions.Continuous.PowerDistribution.IsValidAlpha(System.Double)"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.PowerDistribution.Beta">
            <summary>
              Gets or sets the parameter beta which is used for generation of power distributed
              random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is less than or equal to zero.
            </exception>
            <remarks>
              Calls <see cref="M:Troschuetz.Random.Distributions.Continuous.PowerDistribution.IsValidBeta(System.Double)"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.PowerDistribution.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.PowerDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.PowerDistribution.#ctor(System.UInt32)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.PowerDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.PowerDistribution.#ctor(Troschuetz.Random.IGenerator)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.PowerDistribution"/> class, using the
              specified <see cref="T:Troschuetz.Random.IGenerator"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator"/> object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.PowerDistribution.#ctor(System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.PowerDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> as underlying random number generator.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of power distributed random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of power distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> or <paramref name="beta"/> are less than or equal to zero.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.PowerDistribution.#ctor(System.UInt32,System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.PowerDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
            <param name="alpha">
              The parameter alpha which is used for generation of power distributed random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of power distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> or <paramref name="beta"/> are less than or equal to zero.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.PowerDistribution.#ctor(Troschuetz.Random.IGenerator,System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.PowerDistribution"/> class, using the
              specified <see cref="T:Troschuetz.Random.IGenerator"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator"/> object.</param>
            <param name="alpha">
              The parameter alpha which is used for generation of power distributed random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of power distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> or <paramref name="beta"/> are less than or equal to zero.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.PowerDistribution.IsValidAlpha(System.Double)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Continuous.PowerDistribution.Alpha"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/> if value is greater than 0.0; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.PowerDistribution.IsValidBeta(System.Double)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Continuous.PowerDistribution.Beta"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/> if value is greater than 0.0; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.PowerDistribution.Minimum">
            <summary>
              Gets the minimum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.PowerDistribution.Maximum">
            <summary>
              Gets the maximum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.PowerDistribution.Mean">
            <summary>
              Gets the mean of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mean is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.PowerDistribution.Median">
            <summary>
              Gets the median of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if median is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.PowerDistribution.Variance">
            <summary>
              Gets the variance of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if variance is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.PowerDistribution.Mode">
            <summary>
              Gets the mode of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mode is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.PowerDistribution.NextDouble">
            <summary>
              Returns a distributed floating point random number.
            </summary>
            <returns>A distributed double-precision floating point number.</returns>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.PowerDistribution.AreValidParams">
            <summary>
              Determines whether power distribution is defined under given parameters. The default
              definition returns true if alpha and beta are greater than zero; otherwise, it returns false.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:Troschuetz.Random.Distributions.Continuous.PowerDistribution"/> class.
            </remarks>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.PowerDistribution.Sample">
            <summary>
              Declares a function returning a power distributed floating point random number.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:Troschuetz.Random.Distributions.Continuous.PowerDistribution"/> class.
            </remarks>
        </member>
        <member name="T:Troschuetz.Random.Distributions.Continuous.RayleighDistribution">
            <summary>
              Provides generation of rayleigh distributed random numbers.
            </summary>
            <remarks>
              The implementation of the <see cref="T:Troschuetz.Random.Distributions.Continuous.RayleighDistribution"/> type bases upon information
              presented on <a href="http://en.wikipedia.org/wiki/Rayleigh_distribution">Wikipedia -
              Rayleigh Distribution</a>.
            
              The thread safety of this class depends on the one of the underlying generator.
            </remarks>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.RayleighDistribution.DefaultSigma">
            <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Continuous.RayleighDistribution.Sigma"/> if none is specified.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.RayleighDistribution._sigma">
            <summary>
              Stores the parameter sigma which is used for generation of rayleigh distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.RayleighDistribution.Sigma">
            <summary>
              Gets or sets the parameter sigma which is used for generation of rayleigh distributed
              random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is less than or equal to zero.
            </exception>
            <remarks>
              Calls <see cref="P:Troschuetz.Random.Distributions.Continuous.RayleighDistribution.IsValidParam"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.RayleighDistribution.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.RayleighDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.RayleighDistribution.#ctor(System.UInt32)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.RayleighDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.RayleighDistribution.#ctor(Troschuetz.Random.IGenerator)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.RayleighDistribution"/> class, using the
              specified <see cref="T:Troschuetz.Random.IGenerator"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator"/> object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.RayleighDistribution.#ctor(System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.RayleighDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> as underlying random number generator.
            </summary>
            <param name="sigma">
              The parameter sigma which is used for generation of rayleigh distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="sigma"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.RayleighDistribution.#ctor(System.UInt32,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.RayleighDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
            <param name="sigma">
              The parameter sigma which is used for generation of rayleigh distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="sigma"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.RayleighDistribution.#ctor(Troschuetz.Random.IGenerator,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.RayleighDistribution"/> class, using the
              specified <see cref="T:Troschuetz.Random.IGenerator"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator"/> object.</param>
            <param name="sigma">
              The parameter sigma which is used for generation of rayleigh distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="sigma"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.RayleighDistribution.IsValidSigma(System.Double)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Continuous.RayleighDistribution.Sigma"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/> if value is greater than 0.0; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.RayleighDistribution.Minimum">
            <summary>
              Gets the minimum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.RayleighDistribution.Maximum">
            <summary>
              Gets the maximum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.RayleighDistribution.Mean">
            <summary>
              Gets the mean of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mean is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.RayleighDistribution.Median">
            <summary>
              Gets the median of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if median is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.RayleighDistribution.Variance">
            <summary>
              Gets the variance of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if variance is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.RayleighDistribution.Mode">
            <summary>
              Gets the mode of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mode is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.RayleighDistribution.NextDouble">
            <summary>
              Returns a distributed floating point random number.
            </summary>
            <returns>A distributed double-precision floating point number.</returns>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.RayleighDistribution.IsValidParam">
            <summary>
              Determines whether rayleigh distribution is defined under given parameter. The default
              definition returns true if sigma is greater than zero; otherwise, it returns false.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:Troschuetz.Random.Distributions.Continuous.RayleighDistribution"/> class.
            </remarks>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.RayleighDistribution.Sample">
            <summary>
              Declares a function returning a rayleigh distributed floating point random number.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:Troschuetz.Random.Distributions.Continuous.RayleighDistribution"/> class.
            </remarks>
        </member>
        <member name="T:Troschuetz.Random.Distributions.Continuous.StudentsTDistribution">
            <summary>
              Provides generation of t-distributed random numbers.
            </summary>
            <remarks>
              The implementation of the <see cref="T:Troschuetz.Random.Distributions.Continuous.StudentsTDistribution"/> type bases upon information
              presented on <a href="http://en.wikipedia.org/wiki/Student%27s_t-distribution">Wikipedia -
              Student's t-distribution</a> and <a href="http://www.xycoon.com/stt_random.htm">Xycoon -
              Student t Distribution</a>.
            
              The thread safety of this class depends on the one of the underlying generator.
            </remarks>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.StudentsTDistribution.DefaultNu">
            <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Continuous.StudentsTDistribution.Nu"/> if none is specified.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.StudentsTDistribution._nu">
            <summary>
              Stores the parameter nu which is used for generation of t-distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.StudentsTDistribution.Nu">
            <summary>
              Gets or sets the parameter nu which is used for generation of t-distributed random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is less than or equal to zero.
            </exception>
            <remarks>
              Calls <see cref="P:Troschuetz.Random.Distributions.Continuous.StudentsTDistribution.IsValidParam"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.StudentsTDistribution.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.StudentsTDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.StudentsTDistribution.#ctor(System.UInt32)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.StudentsTDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.StudentsTDistribution.#ctor(Troschuetz.Random.IGenerator)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.StudentsTDistribution"/> class, using the
              specified <see cref="T:Troschuetz.Random.IGenerator"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator"/> object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.StudentsTDistribution.#ctor(System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.StudentsTDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> as underlying random number generator.
            </summary>
            <param name="nu">
              The parameter nu which is used for generation of student's t distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="nu"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.StudentsTDistribution.#ctor(System.UInt32,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.StudentsTDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
            <param name="nu">
              The parameter nu which is used for generation of student's t distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="nu"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.StudentsTDistribution.#ctor(Troschuetz.Random.IGenerator,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.StudentsTDistribution"/> class, using the
              specified <see cref="T:Troschuetz.Random.IGenerator"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator"/> object.</param>
            <param name="nu">
              The parameter nu which is used for generation of student's t distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="nu"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.StudentsTDistribution.IsValidNu(System.Int32)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Continuous.StudentsTDistribution.Nu"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/> if value is greater than 0; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.StudentsTDistribution.Minimum">
            <summary>
              Gets the minimum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.StudentsTDistribution.Maximum">
            <summary>
              Gets the maximum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.StudentsTDistribution.Mean">
            <summary>
              Gets the mean of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mean is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.StudentsTDistribution.Median">
            <summary>
              Gets the median of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if median is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.StudentsTDistribution.Variance">
            <summary>
              Gets the variance of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if variance is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.StudentsTDistribution.Mode">
            <summary>
              Gets the mode of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mode is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.StudentsTDistribution.NextDouble">
            <summary>
              Returns a distributed floating point random number.
            </summary>
            <returns>A distributed double-precision floating point number.</returns>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.StudentsTDistribution.IsValidParam">
            <summary>
              Determines whether student's t distribution is defined under given parameter. The
              default definition returns true if nu is greater than zero; otherwise, it returns false.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:Troschuetz.Random.Distributions.Continuous.StudentsTDistribution"/> class.
            </remarks>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.StudentsTDistribution.Sample">
            <summary>
              Declares a function returning a student's t distributed floating point random number.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:Troschuetz.Random.Distributions.Continuous.StudentsTDistribution"/> class.
            </remarks>
        </member>
        <member name="T:Troschuetz.Random.Distributions.Continuous.TriangularDistribution">
            <summary>
              Provides generation of triangular distributed random numbers.
            </summary>
            <remarks>
              The implementation of the <see cref="T:Troschuetz.Random.Distributions.Continuous.TriangularDistribution"/> type bases upon information
              presented on <a href="http://en.wikipedia.org/wiki/Triangular_distribution">Wikipedia -
              Triangular distribution</a> and the implementation in the
              <a href="http://www.boost.org/libs/random/index.html">Boost Random Number Library</a>.
            
              The thread safety of this class depends on the one of the underlying generator.
            </remarks>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.TriangularDistribution.DefaultAlpha">
            <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Continuous.TriangularDistribution.Alpha"/> if none is specified.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.TriangularDistribution.DefaultBeta">
            <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Continuous.TriangularDistribution.Beta"/> if none is specified.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.TriangularDistribution.DefaultGamma">
            <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Continuous.TriangularDistribution.Gamma"/> if none is specified.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.TriangularDistribution._alpha">
            <summary>
              Stores the parameter alpha which is used for generation of triangular distributed
              random numbers.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.TriangularDistribution._beta">
            <summary>
              Stores the parameter beta which is used for generation of triangular distributed
              random numbers.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.TriangularDistribution._gamma">
            <summary>
              Stores the parameter gamma which is used for generation of triangular distributed
              random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.TriangularDistribution.Alpha">
            <summary>
              Gets or sets the parameter alpha which is used for generation of triangular
              distributed random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is greater than or equal to <see cref="P:Troschuetz.Random.Distributions.Continuous.TriangularDistribution.Beta"/>, or
              <paramref name="value"/> is greater than <see cref="P:Troschuetz.Random.Distributions.Continuous.TriangularDistribution.Gamma"/>.
            </exception>
            <remarks>
              Calls <see cref="P:Troschuetz.Random.Distributions.Continuous.TriangularDistribution.AreValidParams"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.TriangularDistribution.Beta">
            <summary>
              Gets or sets the parameter beta which is used for generation of triangular distributed
              random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <see cref="P:Troschuetz.Random.Distributions.Continuous.TriangularDistribution.Alpha"/> is greater than or equal to <paramref name="value"/>, or
              <paramref name="value"/> is less than <see cref="P:Troschuetz.Random.Distributions.Continuous.TriangularDistribution.Gamma"/>.
            </exception>
            <remarks>
              Calls <see cref="P:Troschuetz.Random.Distributions.Continuous.TriangularDistribution.AreValidParams"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.TriangularDistribution.Gamma">
            <summary>
              Gets or sets the parameter gamma which is used for generation of triangular
              distributed random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <see cref="P:Troschuetz.Random.Distributions.Continuous.TriangularDistribution.Alpha"/> is greater than <paramref name="value"/>, or <see cref="P:Troschuetz.Random.Distributions.Continuous.TriangularDistribution.Beta"/> is
              less than <paramref name="value"/>.
            </exception>
            <remarks>
              Calls <see cref="P:Troschuetz.Random.Distributions.Continuous.TriangularDistribution.AreValidParams"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.TriangularDistribution.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.TriangularDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.TriangularDistribution.#ctor(System.UInt32)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.TriangularDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.TriangularDistribution.#ctor(Troschuetz.Random.IGenerator)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.TriangularDistribution"/> class, using
              the specified <see cref="T:Troschuetz.Random.IGenerator"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator"/> object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.TriangularDistribution.#ctor(System.Double,System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.TriangularDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> as underlying random number generator.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of triangular distributed random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of triangular distributed random numbers.
            </param>
            <param name="gamma">
              The parameter gamma which is used for generation of triangular distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is greater than or equal to <paramref name="beta"/>, or
              <paramref name="alpha"/> is greater than <paramref name="gamma"/>, or
              <paramref name="beta"/> is less than <paramref name="gamma"/>.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.TriangularDistribution.#ctor(System.UInt32,System.Double,System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.TriangularDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
            <param name="alpha">
              The parameter alpha which is used for generation of triangular distributed random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of triangular distributed random numbers.
            </param>
            <param name="gamma">
              The parameter gamma which is used for generation of triangular distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is greater than or equal to <paramref name="beta"/>, or
              <paramref name="alpha"/> is greater than <paramref name="gamma"/>, or
              <paramref name="beta"/> is less than <paramref name="gamma"/>.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.TriangularDistribution.#ctor(Troschuetz.Random.IGenerator,System.Double,System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.TriangularDistribution"/> class, using
              the specified <see cref="T:Troschuetz.Random.IGenerator"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator"/> object.</param>
            <param name="alpha">
              The parameter alpha which is used for generation of triangular distributed random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of triangular distributed random numbers.
            </param>
            <param name="gamma">
              The parameter gamma which is used for generation of triangular distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is greater than or equal to <paramref name="beta"/>, or
              <paramref name="alpha"/> is greater than <paramref name="gamma"/>, or
              <paramref name="beta"/> is less than <paramref name="gamma"/>.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.TriangularDistribution.IsValidAlpha(System.Double)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Continuous.TriangularDistribution.Alpha"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
              <see langword="true"/> if value is less than <see cref="P:Troschuetz.Random.Distributions.Continuous.TriangularDistribution.Beta"/>, and less than or
              equal to <see cref="P:Troschuetz.Random.Distributions.Continuous.TriangularDistribution.Gamma"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.TriangularDistribution.IsValidBeta(System.Double)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Continuous.TriangularDistribution.Beta"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
              <see langword="true"/> if value is greater than <see cref="P:Troschuetz.Random.Distributions.Continuous.TriangularDistribution.Alpha"/>, and greater than
              or equal to <see cref="P:Troschuetz.Random.Distributions.Continuous.TriangularDistribution.Gamma"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.TriangularDistribution.IsValidGamma(System.Double)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Continuous.TriangularDistribution.Gamma"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
              <see langword="true"/> if value is greater than or equal to <see cref="P:Troschuetz.Random.Distributions.Continuous.TriangularDistribution.Alpha"/>, and
              greater than or equal to <see cref="P:Troschuetz.Random.Distributions.Continuous.TriangularDistribution.Beta"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.TriangularDistribution.Minimum">
            <summary>
              Gets the minimum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.TriangularDistribution.Maximum">
            <summary>
              Gets the maximum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.TriangularDistribution.Mean">
            <summary>
              Gets the mean of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mean is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.TriangularDistribution.Median">
            <summary>
              Gets the median of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if median is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.TriangularDistribution.Variance">
            <summary>
              Gets the variance of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if variance is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.TriangularDistribution.Mode">
            <summary>
              Gets the mode of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mode is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.TriangularDistribution.NextDouble">
            <summary>
              Returns a distributed floating point random number.
            </summary>
            <returns>A distributed double-precision floating point number.</returns>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.TriangularDistribution.AreValidParams">
            <summary>
              Determines whether triangular distribution is defined under given parameters. The
              default definition returns true if alpha is less than beta, and if alpha is less than
              or equal to gamma, and if beta is greater than or equal to gamma; otherwise, it
              returns false.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:Troschuetz.Random.Distributions.Continuous.TriangularDistribution"/> class.
            </remarks>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.TriangularDistribution.Sample">
            <summary>
              Declares a function returning a triangular distributed floating point random number.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:Troschuetz.Random.Distributions.Continuous.TriangularDistribution"/> class.
            </remarks>
        </member>
        <member name="T:Troschuetz.Random.Distributions.Continuous.WeibullDistribution">
            <summary>
              Provides generation of weibull distributed random numbers.
            </summary>
            <remarks>
              The implementation of the <see cref="T:Troschuetz.Random.Distributions.Continuous.WeibullDistribution"/> type bases upon information
              presented on <a href="http://en.wikipedia.org/wiki/Weibull_distribution">Wikipedia -
              Weibull distribution</a>.
            
              The thread safety of this class depends on the one of the underlying generator.
            </remarks>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.WeibullDistribution.DefaultAlpha">
            <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Continuous.WeibullDistribution.Alpha"/> if none is specified.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.WeibullDistribution.DefaultLambda">
            <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Continuous.WeibullDistribution.Lambda"/> if none is specified.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.WeibullDistribution.LanczosCoefficients">
            <summary>
              Represents coefficients for the Lanczos approximation of the Gamma function.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.WeibullDistribution._alpha">
            <summary>
              Stores the parameter alpha which is used for generation of weibull distributed random numbers.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Continuous.WeibullDistribution._lambda">
            <summary>
              Stores the parameter lambda which is used for generation of weibull distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.WeibullDistribution.Alpha">
            <summary>
              Gets or sets the parameter alpha which is used for generation of weibull distributed
              random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is less than or equal to zero.
            </exception>
            <remarks>
              Calls <see cref="M:Troschuetz.Random.Distributions.Continuous.WeibullDistribution.IsValidAlpha(System.Double)"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.WeibullDistribution.Lambda">
            <summary>
              Gets or sets the parameter lambda which is used for generation of erlang distributed
              random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is less than or equal to zero.
            </exception>
            <remarks>
              Calls <see cref="M:Troschuetz.Random.Distributions.Continuous.WeibullDistribution.IsValidLambda(System.Double)"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.WeibullDistribution.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.WeibullDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.WeibullDistribution.#ctor(System.UInt32)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.WeibullDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.WeibullDistribution.#ctor(Troschuetz.Random.IGenerator)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.WeibullDistribution"/> class, using the
              specified <see cref="T:Troschuetz.Random.IGenerator"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator"/> object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.WeibullDistribution.#ctor(System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.WeibullDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> as underlying random number generator.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of weibull distributed random numbers.
            </param>
            <param name="lambda">
              The parameter lambda which is used for generation of weibull distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> or <paramref name="lambda"/> are less than or equal to zero.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.WeibullDistribution.#ctor(System.UInt32,System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.WeibullDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
            <param name="alpha">
              The parameter alpha which is used for generation of weibull distributed random numbers.
            </param>
            <param name="lambda">
              The parameter lambda which is used for generation of weibull distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> or <paramref name="lambda"/> are less than or equal to zero.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.WeibullDistribution.#ctor(Troschuetz.Random.IGenerator,System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.WeibullDistribution"/> class, using the
              specified <see cref="T:Troschuetz.Random.IGenerator"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator"/> object.</param>
            <param name="alpha">
              The parameter alpha which is used for generation of weibull distributed random numbers.
            </param>
            <param name="lambda">
              The parameter lambda which is used for generation of weibull distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> or <paramref name="lambda"/> are less than or equal to zero.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.WeibullDistribution.IsValidAlpha(System.Double)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Continuous.WeibullDistribution.Alpha"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/> if value is greater than 0.0; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.WeibullDistribution.IsValidLambda(System.Double)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Continuous.WeibullDistribution.Lambda"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/> if value is greater than 0.0; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.WeibullDistribution.Gamma(System.Double)">
            <summary>
              Represents a Lanczos approximation of the Gamma function.
            </summary>
            <param name="x">A double-precision floating point number.</param>
            <returns>
              A double-precision floating point number representing an approximation of Gamma( <paramref name="x"/>).
            </returns>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.WeibullDistribution.Minimum">
            <summary>
              Gets the minimum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.WeibullDistribution.Maximum">
            <summary>
              Gets the maximum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.WeibullDistribution.Mean">
            <summary>
              Gets the mean of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mean is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.WeibullDistribution.Median">
            <summary>
              Gets the median of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if median is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.WeibullDistribution.Variance">
            <summary>
              Gets the variance of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if variance is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.WeibullDistribution.Mode">
            <summary>
              Gets the mode of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mode is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Continuous.WeibullDistribution.NextDouble">
            <summary>
              Returns a distributed floating point random number.
            </summary>
            <returns>A distributed double-precision floating point number.</returns>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.WeibullDistribution.AreValidParams">
            <summary>
              Determines whether weibull distribution is defined under given parameters. The default
              definition returns true if alpha and lambda are greater than zero; otherwise, it
              returns false.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:Troschuetz.Random.Distributions.Continuous.WeibullDistribution"/> class.
            </remarks>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Continuous.WeibullDistribution.Sample">
            <summary>
              Declares a function returning a weibull distributed floating point random number.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:Troschuetz.Random.Distributions.Continuous.WeibullDistribution"/> class.
            </remarks>
        </member>
        <member name="T:Troschuetz.Random.Distributions.Discrete.BernoulliDistribution">
            <summary>
              Provides generation of bernoulli distributed random numbers.
            </summary>
            <remarks>
              The bernoulli distribution generates only discrete numbers. <br/> The implementation of
              the <see cref="T:Troschuetz.Random.Distributions.Discrete.BernoulliDistribution"/> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Bernoulli_distribution">Wikipedia - Bernoulli distribution</a>.
            
              The thread safety of this class depends on the one of the underlying generator.
            </remarks>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Discrete.BernoulliDistribution.DefaultAlpha">
            <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Discrete.BernoulliDistribution.Alpha"/> if none is specified.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Discrete.BernoulliDistribution._alpha">
            <summary>
              Stores the parameter alpha which is used for generation of bernoulli distributed
              random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Discrete.BernoulliDistribution.Alpha">
            <summary>
              Gets or sets the parameter alpha which is used for generation of bernoulli distributed
              random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is less than zero or greater than one.
            </exception>
            <remarks>
              Calls <see cref="P:Troschuetz.Random.Distributions.Discrete.BernoulliDistribution.IsValidParam"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Discrete.BernoulliDistribution.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.BernoulliDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Discrete.BernoulliDistribution.#ctor(System.UInt32)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.BernoulliDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Discrete.BernoulliDistribution.#ctor(Troschuetz.Random.IGenerator)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.BernoulliDistribution"/> class, using the
              specified <see cref="T:Troschuetz.Random.IGenerator"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator"/> object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Discrete.BernoulliDistribution.#ctor(System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.BernoulliDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> as underlying random number generator.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of bernoulli distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is less than zero or greater than one.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Discrete.BernoulliDistribution.#ctor(System.UInt32,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.BernoulliDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
            <param name="alpha">
              The parameter alpha which is used for generation of bernoulli distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is less than zero or greater than one.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Discrete.BernoulliDistribution.#ctor(Troschuetz.Random.IGenerator,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.BernoulliDistribution"/> class, using the
              specified <see cref="T:Troschuetz.Random.IGenerator"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator"/> object.</param>
            <param name="alpha">
              The parameter alpha which is used for generation of bernoulli distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is less than zero or greater than one.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Discrete.BernoulliDistribution.IsValidAlpha(System.Double)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Discrete.BernoulliDistribution.Alpha"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
              <see langword="true"/> if value is greater than or equal to 0.0, and less than or
              equal to 1.0; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Discrete.BernoulliDistribution.Minimum">
            <summary>
              Gets the minimum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Discrete.BernoulliDistribution.Maximum">
            <summary>
              Gets the maximum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Discrete.BernoulliDistribution.Mean">
            <summary>
              Gets the mean of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mean is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Discrete.BernoulliDistribution.Median">
            <summary>
              Gets the median of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if median is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Discrete.BernoulliDistribution.Variance">
            <summary>
              Gets the variance of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if variance is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Discrete.BernoulliDistribution.Mode">
            <summary>
              Gets the mode of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mode is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Discrete.BernoulliDistribution.Next">
            <summary>
              Returns a distributed random number.
            </summary>
            <returns>A distributed 32-bit signed integer.</returns>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Discrete.BernoulliDistribution.NextDouble">
            <summary>
              Returns a distributed floating point random number.
            </summary>
            <returns>A distributed double-precision floating point number.</returns>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Discrete.BernoulliDistribution.IsValidParam">
            <summary>
              Determines whether bernoulli distribution is defined under given parameter. The
              default definition returns true if alpha is greater than or equal to zero and less
              than or equal to one; otherwise, it returns false.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:Troschuetz.Random.Distributions.Discrete.BernoulliDistribution"/> class.
            </remarks>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Discrete.BernoulliDistribution.Sample">
            <summary>
              Declares a function returning a bernoulli distributed 32-bit signed integer.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:Troschuetz.Random.Distributions.Discrete.BernoulliDistribution"/> class.
            </remarks>
        </member>
        <member name="T:Troschuetz.Random.Distributions.Discrete.BinomialDistribution">
            <summary>
              Provides generation of binomial distributed random numbers.
            </summary>
            <remarks>
              The binomial distribution generates only discrete numbers. <br/> The implementation of the
              <see cref="T:Troschuetz.Random.Distributions.Discrete.BinomialDistribution"/> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/binomial_distribution">Wikipedia - Binomial distribution</a>.
            
              The thread safety of this class depends on the one of the underlying generator.
            </remarks>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Discrete.BinomialDistribution.DefaultAlpha">
            <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Discrete.BinomialDistribution.Alpha"/> if none is specified.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Discrete.BinomialDistribution.DefaultBeta">
            <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Discrete.BinomialDistribution.Beta"/> if none is specified.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Discrete.BinomialDistribution._alpha">
            <summary>
              Stores the parameter alpha which is used for generation of binomial distributed random numbers.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Discrete.BinomialDistribution._beta">
            <summary>
              Stores the parameter beta which is used for generation of binomial distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Discrete.BinomialDistribution.Alpha">
            <summary>
              Gets or sets the parameter alpha which is used for generation of binomial distributed
              random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is less than zero or greater than one.
            </exception>
            <remarks>
              Calls <see cref="P:Troschuetz.Random.Distributions.Discrete.BinomialDistribution.AreValidParams"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Discrete.BinomialDistribution.Beta">
            <summary>
              Gets or sets the parameter beta which is used for generation of binomial distributed
              random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is less than zero.
            </exception>
            <remarks>
              Calls <see cref="P:Troschuetz.Random.Distributions.Discrete.BinomialDistribution.AreValidParams"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Discrete.BinomialDistribution.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.BinomialDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Discrete.BinomialDistribution.#ctor(System.UInt32)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.BinomialDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Discrete.BinomialDistribution.#ctor(Troschuetz.Random.IGenerator)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.BinomialDistribution"/> class, using the
              specified <see cref="T:Troschuetz.Random.IGenerator"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator"/> object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Discrete.BinomialDistribution.#ctor(System.Double,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.BinomialDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> as underlying random number generator.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of binomial distributed random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of binomial distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is less than zero or greater than one, or
              <paramref name="beta"/> is less than zero.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Discrete.BinomialDistribution.#ctor(System.UInt32,System.Double,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.BinomialDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
            <param name="alpha">
              The parameter alpha which is used for generation of binomial distributed random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of binomial distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is less than zero or greater than one, or
              <paramref name="beta"/> is less than zero.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Discrete.BinomialDistribution.#ctor(Troschuetz.Random.IGenerator,System.Double,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.BinomialDistribution"/> class, using the
              specified <see cref="T:Troschuetz.Random.IGenerator"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator"/> object.</param>
            <param name="alpha">
              The parameter alpha which is used for generation of binomial distributed random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of binomial distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is less than zero or greater than one, or
              <paramref name="beta"/> is less than zero.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Discrete.BinomialDistribution.IsValidAlpha(System.Double)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Discrete.BinomialDistribution.Alpha"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
              <see langword="true"/> if value is greater than or equal to 0.0, and less than or
              equal to 1.0; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Discrete.BinomialDistribution.IsValidBeta(System.Int32)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Discrete.BinomialDistribution.Beta"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
              <see langword="true"/> if value is greater than or equal to 0; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Discrete.BinomialDistribution.Minimum">
            <summary>
              Gets the minimum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Discrete.BinomialDistribution.Maximum">
            <summary>
              Gets the maximum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Discrete.BinomialDistribution.Mean">
            <summary>
              Gets the mean of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mean is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Discrete.BinomialDistribution.Median">
            <summary>
              Gets the median of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if median is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Discrete.BinomialDistribution.Variance">
            <summary>
              Gets the variance of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if variance is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Discrete.BinomialDistribution.Mode">
            <summary>
              Gets the mode of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mode is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Discrete.BinomialDistribution.Next">
            <summary>
              Returns a distributed random number.
            </summary>
            <returns>A distributed 32-bit signed integer.</returns>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Discrete.BinomialDistribution.NextDouble">
            <summary>
              Returns a distributed floating point random number.
            </summary>
            <returns>A distributed double-precision floating point number.</returns>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Discrete.BinomialDistribution.AreValidParams">
            <summary>
              Determines whether binomial distribution is defined under given parameters. The
              default definition returns true if alpha is greater than or equal to zero and less
              than or equal to one, and if beta is greater than or equal to zero; otherwise, it
              returns false.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:Troschuetz.Random.Distributions.Discrete.BinomialDistribution"/> class.
            </remarks>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Discrete.BinomialDistribution.Sample">
            <summary>
              Declares a function returning a binomial distributed 32-bit signed integer.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:Troschuetz.Random.Distributions.Discrete.BinomialDistribution"/> class.
            </remarks>
        </member>
        <member name="T:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution">
            <summary>
              Implements the categorical distribution. For details about this distribution, see
              <a href="http://en.wikipedia.org/wiki/Categorical_distribution">Wikipedia - Categorical
              distribution</a>. This distribution is sometimes called the Discrete distribution.
            </summary>
            <remarks>
              The distribution is parameterized by a vector of ratios: in other words, the parameter
              does not have to be normalized and sum to 1. The reason is that some vectors can't be
              exactly normalized to sum to 1 in floating point representation.
            
              The thread safety of this class depends on the one of the underlying generator.
            </remarks>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution.DefaultValueCount">
            <summary>
              The default number of values used for categorical distribution, if not specified otherwise.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution._cdf">
            <summary>
              Stores the cumulative distribution of current weights.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution._weights">
            <summary>
              Stores the unnormalized categorical weights.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution._weightsSum">
            <summary>
              Stores the sum of all weights currently available.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution.Weights">
            <summary>
              Gets or sets the normalized probability vector of the categorical distribution.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> is empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              Any of the weights in <paramref name="value"/> are negative or they sum to zero.
            </exception>
            <remarks>
              Sometimes the normalized probability vector cannot be represented exactly in a
              floating point representation.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.BinomialDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution.#ctor(System.UInt32)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.BinomialDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution.#ctor(Troschuetz.Random.IGenerator)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution"/> class, using
              the specified <see cref="T:Troschuetz.Random.IGenerator"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator"/> object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution.#ctor(System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.BinomialDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> as underlying random number generator.
            </summary>
            <param name="valueCount">
              The parameter valueCount which is used for generation of binomial distributed random
              numbers by setting the number of equi-distributed "weights" the distribution will have.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="valueCount"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution.#ctor(System.UInt32,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.BinomialDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
            <param name="valueCount">
              The parameter valueCount which is used for generation of binomial distributed random
              numbers by setting the number of equi-distributed "weights" the distribution will have.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="valueCount"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution.#ctor(System.Collections.Generic.ICollection{System.Double})">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.BinomialDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> as underlying random number generator.
            </summary>
            <param name="weights">
              An enumerable of nonnegative weights: this enumerable does not need to be normalized
              as this is often impossible using floating point arithmetic.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="weights"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="weights"/> is empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              Any of the weights in <paramref name="weights"/> are negative or they sum to zero.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution.#ctor(System.UInt32,System.Collections.Generic.ICollection{System.Double})">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.BinomialDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
            <param name="weights">
              An enumerable of nonnegative weights: this enumerable does not need to be normalized
              as this is often impossible using floating point arithmetic.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="weights"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="weights"/> is empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              Any of the weights in <paramref name="weights"/> are negative or they sum to zero.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution.#ctor(Troschuetz.Random.IGenerator,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution"/> class, using
              the specified <see cref="T:Troschuetz.Random.IGenerator"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator"/> object.</param>
            <param name="valueCount">
              The parameter valueCount which is used for generation of binomial distributed random
              numbers by setting the number of equi-distributed "weights" the distribution will have.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="valueCount"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution.#ctor(Troschuetz.Random.IGenerator,System.Collections.Generic.ICollection{System.Double})">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution"/> class, using
              the specified <see cref="T:Troschuetz.Random.IGenerator"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator"/> object.</param>
            <param name="weights">
              An enumerable of nonnegative weights: this enumerable does not need to be normalized
              as this is often impossible using floating point arithmetic.
            </param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="generator"/> or <paramref name="weights"/> are null.
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="weights"/> is empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              Any of the weights in <paramref name="weights"/> are negative or they sum to zero.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution.Ones(System.Int32)">
            <summary>
              Generates a list containing only ones.
            </summary>
            <param name="valueCount">The number of ones list will have.</param>
            <returns>A list containing only ones.</returns>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution.AreValidWeights(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
              Determines whether categorical distribution is defined under given weights.
            </summary>
            <param name="weights">
              The weights which are used for generation of categorical distributed random numbers.
              Weights do not need to be normalized as this is often impossible using floating point arithmetic.
            </param>
            <returns>
              False if any of the weights is negative or if the sum of parameters is 0.0; otherwise,
              it returns true.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution.UpdateHelpers">
            <summary>
              Computes the unnormalized cumulative distribution function and other attributes for
              the distribution (like mean, variance, and so on).
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution.Minimum">
            <summary>
              Gets the minimum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution.Maximum">
            <summary>
              Gets the maximum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution.Mean">
            <summary>
              Gets the mean of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mean is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution.Median">
            <summary>
              Gets the median of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if median is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution.Variance">
            <summary>
              Gets the variance of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if variance is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution.Mode">
            <summary>
              Gets the mode of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mode is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution.Next">
            <summary>
              Returns a distributed random number.
            </summary>
            <returns>A distributed 32-bit signed integer.</returns>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution.NextDouble">
            <summary>
              Returns a distributed floating point random number.
            </summary>
            <returns>A distributed double-precision floating point number.</returns>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution.ToString">
            <summary>
              Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution.IsValidParam">
            <summary>
              Determines whether categorical distribution is defined under given weights. The
              default definition returns false if any of the weights is negative or if the sum of
              parameters is 0.0; otherwise, it returns true.
            
              Weights do not need to be normalized as this is often impossible using floating point arithmetic.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution"/> class.
            </remarks>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution.Sample">
            <summary>
              Declares a function returning a categorical distributed 32-bit signed integer.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution"/> class.
            </remarks>
        </member>
        <member name="T:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution">
            <summary>
              Provides generation of discrete uniformly distributed random numbers.
            </summary>
            <remarks>
              The discrete uniform distribution generates only discrete numbers. <br/> The
              implementation of the <see cref="T:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution"/> type bases upon
              information presented on
              <a href="http://en.wikipedia.org/wiki/Uniform_distribution_%28discrete%29">Wikipedia -
              Uniform distribution (discrete)</a>.
            
              The thread safety of this class depends on the one of the underlying generator.
            </remarks>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution.DefaultAlpha">
            <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution.Alpha"/> if none is specified.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution.DefaultBeta">
            <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution.Beta"/> if none is specified.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution._beta">
            <summary>
              Stores the parameter beta which is used for generation of uniformly distributed random numbers.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution._alpha">
            <summary>
              Stores the parameter beta which is used for generation of uniformly distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution.Alpha">
            <summary>
              Gets or sets the parameter alpha which is used for generation of uniformly distributed
              random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is greater than <see cref="P:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution.Beta"/>.
            </exception>
            <remarks>
              Calls <see cref="P:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution.AreValidParams"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution.Beta">
            <summary>
              Gets or sets the parameter beta which is used for generation of uniformly distributed
              random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <see cref="P:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution.Alpha"/> is greater than <paramref name="value"/>, or
              <paramref name="value"/> is equal to <see cref="F:System.Int32.MaxValue"/>.
            </exception>
            <remarks>
              Calls <see cref="P:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution.AreValidParams"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution"/> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution.#ctor(System.UInt32)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution"/> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution.#ctor(Troschuetz.Random.IGenerator)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution"/> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator"/> object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution.#ctor(System.Int32,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution"/> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> as underlying random number generator.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of discrete uniform distributed
              random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of discrete uniform distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is greater than <paramref name="beta"/>, or
              <paramref name="beta"/> is equal to <see cref="F:System.Int32.MaxValue"/>.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution.#ctor(System.UInt32,System.Int32,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution"/> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
            <param name="alpha">
              The parameter alpha which is used for generation of discrete uniform distributed
              random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of discrete uniform distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is greater than <paramref name="beta"/>, or
              <paramref name="beta"/> is equal to <see cref="F:System.Int32.MaxValue"/>.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution.#ctor(Troschuetz.Random.IGenerator,System.Int32,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution"/> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator"/> object.</param>
            <param name="alpha">
              The parameter alpha which is used for generation of discrete uniform distributed
              random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of discrete uniform distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is greater than <paramref name="beta"/>, or
              <paramref name="beta"/> is equal to <see cref="F:System.Int32.MaxValue"/>.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution.IsValidAlpha(System.Int32)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution.Alpha"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
              <see langword="true"/> if value is less than or equal to <see cref="P:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution.Beta"/>;
              otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution.IsValidBeta(System.Int32)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution.Beta"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
              <see langword="true"/> if value is greater than or equal to <see cref="P:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution.Alpha"/>, and
              less than <see cref="F:System.Int32.MaxValue"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution.Minimum">
            <summary>
              Gets the minimum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution.Maximum">
            <summary>
              Gets the maximum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution.Mean">
            <summary>
              Gets the mean of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mean is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution.Median">
            <summary>
              Gets the median of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if median is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution.Variance">
            <summary>
              Gets the variance of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if variance is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution.Mode">
            <summary>
              Gets the mode of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mode is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution.Next">
            <summary>
              Returns a distributed random number.
            </summary>
            <returns>A distributed 32-bit signed integer.</returns>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution.NextDouble">
            <summary>
              Returns a distributed floating point random number.
            </summary>
            <returns>A distributed double-precision floating point number.</returns>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution.AreValidParams">
            <summary>
              Determines whether discrete uniform distribution is defined under given parameters.
              The default definition returns true if alpha is less than or equal to beta, and if
              beta is less than <see cref="F:System.Int32.MaxValue"/>; otherwise, it returns false.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution"/> class.
            </remarks>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution.Sample">
            <summary>
              Declares a function returning a discrete uniform distributed 32-bit signed integer.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution"/> class.
            </remarks>
        </member>
        <member name="T:Troschuetz.Random.Distributions.Discrete.GeometricDistribution">
            <summary>
              Provides generation of geometric distributed random numbers.
            </summary>
            <remarks>
              The geometric distribution generates only discrete numbers. <br/> The implementation of
              the <see cref="T:Troschuetz.Random.Distributions.Discrete.GeometricDistribution"/> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Geometric_distribution">Wikipedia - Geometric
              distribution</a> and the implementation in the
              <a href="http://www.lkn.ei.tum.de/lehre/scn/cncl/doc/html/cncl_toc.html">Communication
              Networks Class Library</a>.
            
              The thread safety of this class depends on the one of the underlying generator.
            </remarks>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Discrete.GeometricDistribution.DefaultAlpha">
            <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Discrete.GeometricDistribution.Alpha"/> if none is specified.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Discrete.GeometricDistribution._alpha">
            <summary>
              Stores the parameter beta which is used for generation of uniformly distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Discrete.GeometricDistribution.Alpha">
            <summary>
              Gets or sets the parameter alpha which is used for generation of geometric distributed
              random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is less than or equal to zero or it is greater than one.
            </exception>
            <remarks>
              Calls <see cref="P:Troschuetz.Random.Distributions.Discrete.GeometricDistribution.IsValidParam"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Discrete.GeometricDistribution.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.GeometricDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Discrete.GeometricDistribution.#ctor(System.UInt32)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.GeometricDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Discrete.GeometricDistribution.#ctor(Troschuetz.Random.IGenerator)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.GeometricDistribution"/> class, using the
              specified <see cref="T:Troschuetz.Random.IGenerator"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator"/> object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Discrete.GeometricDistribution.#ctor(System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.GeometricDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> as underlying random number generator.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of geometric distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is less than or equal to zero or it is greater than one.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Discrete.GeometricDistribution.#ctor(System.UInt32,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.GeometricDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
            <param name="alpha">
              The parameter alpha which is used for generation of geometric distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is less than or equal to zero or it is greater than one.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Discrete.GeometricDistribution.#ctor(Troschuetz.Random.IGenerator,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.GeometricDistribution"/> class, using the
              specified <see cref="T:Troschuetz.Random.IGenerator"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator"/> object.</param>
            <param name="alpha">
              The parameter alpha which is used for generation of geometric distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is less than or equal to zero or it is greater than one.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Discrete.GeometricDistribution.IsValidAlpha(System.Double)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Discrete.GeometricDistribution.Alpha"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
              <see langword="true"/> if value is greater than 0.0, and less than or equal to 1.0;
              otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Discrete.GeometricDistribution.Minimum">
            <summary>
              Gets the minimum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Discrete.GeometricDistribution.Maximum">
            <summary>
              Gets the maximum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Discrete.GeometricDistribution.Mean">
            <summary>
              Gets the mean of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mean is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Discrete.GeometricDistribution.Median">
            <summary>
              Gets the median of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if median is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Discrete.GeometricDistribution.Variance">
            <summary>
              Gets the variance of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if variance is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Discrete.GeometricDistribution.Mode">
            <summary>
              Gets the mode of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mode is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Discrete.GeometricDistribution.Next">
            <summary>
              Returns a distributed random number.
            </summary>
            <returns>A distributed 32-bit signed integer.</returns>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Discrete.GeometricDistribution.NextDouble">
            <summary>
              Returns a distributed floating point random number.
            </summary>
            <returns>A distributed double-precision floating point number.</returns>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Discrete.GeometricDistribution.IsValidParam">
            <summary>
              Determines whether geometric distribution is defined under given parameter. The
              default definition returns true if alpha is greater than zero and if it is less than
              or equal to one; otherwise, it returns false.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:Troschuetz.Random.Distributions.Discrete.GeometricDistribution"/> class.
            </remarks>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Discrete.GeometricDistribution.Sample">
            <summary>
              Declares a function returning a geometric distributed 32-bit signed integer.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:Troschuetz.Random.Distributions.Discrete.GeometricDistribution"/> class.
            </remarks>
        </member>
        <member name="T:Troschuetz.Random.Distributions.Discrete.PoissonDistribution">
            <summary>
              Provides generation of poisson distributed random numbers.
            </summary>
            <remarks>
              The poisson distribution generates only discrete numbers. <br/> The implementation of the
              <see cref="T:Troschuetz.Random.Distributions.Discrete.PoissonDistribution"/> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Poisson_distribution">Wikipedia - Poisson
              distribution</a> and the implementation in the
              <a href="http://www.lkn.ei.tum.de/lehre/scn/cncl/doc/html/cncl_toc.html">Communication
              Networks Class Library</a>.
            
              The thread safety of this class depends on the one of the underlying generator.
            </remarks>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Discrete.PoissonDistribution.DefaultLambda">
            <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Discrete.PoissonDistribution.Lambda"/> if none is specified.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Distributions.Discrete.PoissonDistribution._lambda">
            <summary>
              Stores the the parameter lambda which is used for generation of poisson distributed
              random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Discrete.PoissonDistribution.Lambda">
            <summary>
              Gets or sets the parameter lambda which is used for generation of poisson distributed
              random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is less than or equal to zero.
            </exception>
            <remarks>
              Calls <see cref="M:Troschuetz.Random.Distributions.Discrete.PoissonDistribution.IsValidLambda(System.Double)"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Discrete.PoissonDistribution.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.PoissonDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Discrete.PoissonDistribution.#ctor(System.UInt32)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.PoissonDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Discrete.PoissonDistribution.#ctor(Troschuetz.Random.IGenerator)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.PoissonDistribution"/> class, using the
              specified <see cref="T:Troschuetz.Random.IGenerator"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator"/> object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Discrete.PoissonDistribution.#ctor(System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.PoissonDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> as underlying random number generator.
            </summary>
            <param name="lambda">
              The parameter lambda which is used for generation of poisson distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="lambda"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Discrete.PoissonDistribution.#ctor(System.UInt32,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.PoissonDistribution"/> class, using a
              <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
            <param name="lambda">
              The parameter lambda which is used for generation of poisson distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="lambda"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Discrete.PoissonDistribution.#ctor(Troschuetz.Random.IGenerator,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.PoissonDistribution"/> class, using the
              specified <see cref="T:Troschuetz.Random.IGenerator"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator"/> object.</param>
            <param name="lambda">
              The parameter lambda which is used for generation of poisson distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="lambda"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Discrete.PoissonDistribution.IsValidLambda(System.Double)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Discrete.PoissonDistribution.Lambda"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/> if value is greater than 0.0; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Discrete.PoissonDistribution.Minimum">
            <summary>
              Gets the minimum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Discrete.PoissonDistribution.Maximum">
            <summary>
              Gets the maximum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Discrete.PoissonDistribution.Mean">
            <summary>
              Gets the mean of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mean is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Discrete.PoissonDistribution.Median">
            <summary>
              Gets the median of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if median is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Discrete.PoissonDistribution.Variance">
            <summary>
              Gets the variance of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if variance is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Discrete.PoissonDistribution.Mode">
            <summary>
              Gets the mode of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mode is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Discrete.PoissonDistribution.Next">
            <summary>
              Returns a distributed random number.
            </summary>
            <returns>A distributed 32-bit signed integer.</returns>
        </member>
        <member name="M:Troschuetz.Random.Distributions.Discrete.PoissonDistribution.NextDouble">
            <summary>
              Returns a distributed floating point random number.
            </summary>
            <returns>A distributed double-precision floating point number.</returns>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Discrete.PoissonDistribution.IsValidParam">
            <summary>
              Determines whether poisson distribution is defined under given parameter. The default
              definition returns true if lambda is greater than zero; otherwise, it returns false.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:Troschuetz.Random.Distributions.Discrete.PoissonDistribution"/> class.
            </remarks>
        </member>
        <member name="P:Troschuetz.Random.Distributions.Discrete.PoissonDistribution.Sample">
            <summary>
              Declares a function returning a poisson distributed 32-bit signed integer.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:Troschuetz.Random.Distributions.Discrete.PoissonDistribution"/> class.
            </remarks>
        </member>
        <member name="T:Troschuetz.Random.Extensions">
            <summary>
              Module containing extension methods for many interfaces exposed by this library.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.Extensions.DistributedDoubles``1(``0)">
            <summary>
              Returns an infinites series of random double numbers, by repeating calls to
              NextDouble. Therefore, the series obtained will follow given distribution.
            </summary>
            <param name="distribution">The distribution.</param>
            <returns>An infinites series of random double numbers, following given distribution.</returns>
        </member>
        <member name="M:Troschuetz.Random.Extensions.DistributedIntegers``1(``0)">
            <summary>
              Returns an infinites series of random numbers, by repeating calls to Next. Therefore,
              the series obtained will follow given distribution.
            </summary>
            <param name="distribution">The distribution.</param>
            <returns>An infinites series of random numbers, following given distribution.</returns>
        </member>
        <member name="M:Troschuetz.Random.Extensions.Booleans``1(``0)">
            <summary>
              Returns an infinite sequence random Boolean values.
            </summary>
            <remarks>
              Buffers 31 random bits for future calls, so the random number generator is only
              invoked once in every 31 calls.
            </remarks>
            <typeparam name="TGen">The type of the random numbers generator.</typeparam>
            <param name="generator">The generator from which random numbers are drawn.</param>
            <returns>An infinite sequence random Boolean values.</returns>
        </member>
        <member name="M:Troschuetz.Random.Extensions.Bytes``1(``0,System.Byte[])">
            <summary>
              Repeatedly fills the elements of a specified array of bytes with random numbers.
            </summary>
            <remarks>
              Each element of the array of bytes is set to a random number greater than or equal to
              0, and less than or equal to <see cref="F:System.Byte.MaxValue"/>.
            </remarks>
            <typeparam name="TGen">The type of the random numbers generator.</typeparam>
            <param name="generator">The generator from which random numbers are drawn.</param>
            <param name="buffer">An array of bytes to contain random numbers.</param>
            <returns>An infinite sequence of true values.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is null.</exception>
        </member>
        <member name="M:Troschuetz.Random.Extensions.Choice``2(``0,System.Collections.Generic.IList{``1})">
            <summary>
              Returns a random item from given list, according to a uniform distribution.
            </summary>
            <typeparam name="TGen">The type of the random numbers generator.</typeparam>
            <typeparam name="TItem">The type of the elements of the list.</typeparam>
            <param name="generator">The generator from which random numbers are drawn.</param>
            <param name="list">The list from which an item should be randomly picked.</param>
            <returns>A random item belonging to given list.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="list"/> is empty.</exception>
        </member>
        <member name="M:Troschuetz.Random.Extensions.Choices``2(``0,System.Collections.Generic.IList{``1})">
            <summary>
              Returns an infinite sequence of random items from given list, according to a uniform distribution.
            </summary>
            <typeparam name="TGen">The type of the random numbers generator.</typeparam>
            <typeparam name="TItem">The type of the elements of the list.</typeparam>
            <param name="generator">The generator from which random numbers are drawn.</param>
            <param name="list">The list from which items should be randomly picked.</param>
            <returns>An infinite sequence of random items belonging to given list.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="list"/> is empty.</exception>
        </member>
        <member name="M:Troschuetz.Random.Extensions.Doubles``1(``0)">
            <summary>
              Returns an infinite sequence of nonnegative floating point random numbers less than 1.0.
            </summary>
            <typeparam name="TGen">The type of the random numbers generator.</typeparam>
            <param name="generator">The generator from which random numbers are drawn.</param>
            <returns>
              An infinite sequence of double-precision floating point numbers greater than or equal
              to 0.0, and less than 1.0; that is, the range of return values includes 0.0 but not 1.0.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.Extensions.Doubles``1(``0,System.Double)">
            <summary>
              Returns an infinite sequence of nonnegative floating point random numbers less than
              the specified maximum.
            </summary>
            <typeparam name="TGen">The type of the random numbers generator.</typeparam>
            <param name="generator">The generator from which random numbers are drawn.</param>
            <param name="maxValue">The exclusive upper bound of the random number to be generated.</param>
            <returns>
              An infinite sequence of double-precision floating point numbers greater than or equal
              to 0.0, and less than <paramref name="maxValue"/>; that is, the range of return values
              includes 0 but not <paramref name="maxValue"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="maxValue"/> must be greater than 0.0.
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="maxValue"/> cannot be <see cref="F:System.Double.PositiveInfinity"/>.</exception>
        </member>
        <member name="M:Troschuetz.Random.Extensions.Doubles``1(``0,System.Double,System.Double)">
            <summary>
              Returns an infinite sequence of floating point random numbers within the specified range.
            </summary>
            <typeparam name="TGen">The type of the random numbers generator.</typeparam>
            <param name="generator">The generator from which random numbers are drawn.</param>
            <param name="minValue">The inclusive lower bound of the random number to be generated.</param>
            <param name="maxValue">The exclusive upper bound of the random number to be generated.</param>
            <returns>
              Returns an infinite sequence of double-precision floating point numbers greater than
              or equal to <paramref name="minValue"/>, and less than <paramref name="maxValue"/>;
              that is, the range of return values includes <paramref name="minValue"/> but not <paramref name="maxValue"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="maxValue"/> must be greater than or equal to <paramref name="minValue"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              The difference between <paramref name="maxValue"/> and <paramref name="minValue"/>
              cannot be <see cref="F:System.Double.PositiveInfinity"/>.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Extensions.Integers``1(``0)">
            <summary>
              Returns an infinite sequence of nonnegative random numbers less than <see cref="F:System.Int32.MaxValue"/>.
            </summary>
            <typeparam name="TGen">The type of the random numbers generator.</typeparam>
            <param name="generator">The generator from which random numbers are drawn.</param>
            <returns>
              An infinite sequence of 32-bit signed integers greater than or equal to 0, and less
              than <see cref="F:System.Int32.MaxValue"/>; that is, the range of return values includes 0 but
              not <see cref="F:System.Int32.MaxValue"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.Extensions.Integers``1(``0,System.Int32)">
            <summary>
              Returns an infinite sequence of nonnegative random numbers less than the specified maximum.
            </summary>
            <typeparam name="TGen">The type of the random numbers generator.</typeparam>
            <param name="generator">The generator from which random numbers are drawn.</param>
            <param name="maxValue">The exclusive upper bound of the random numbers to be generated.</param>
            <returns>
              An infinite sequence of 32-bit signed integers greater than or equal to 0, and less
              than <paramref name="maxValue"/>; that is, the range of return values includes 0 but
              not <paramref name="maxValue"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="maxValue"/> must be greater than or equal to 1.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Extensions.Integers``1(``0,System.Int32,System.Int32)">
            <summary>
              Returns an infinite sequence of random numbers within the specified range.
            </summary>
            <typeparam name="TGen">The type of the random numbers generator.</typeparam>
            <param name="generator">The generator from which random numbers are drawn.</param>
            <param name="minValue">The inclusive lower bound of the random number to be generated.</param>
            <param name="maxValue">The exclusive upper bound of the random number to be generated.</param>
            <returns>
              An infinite sequence of 32-bit signed integers greater than or equal to
              <paramref name="minValue"/>, and less than <paramref name="maxValue"/>; that is, the
              range of return values includes <paramref name="minValue"/> but not <paramref name="maxValue"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="maxValue"/> must be greater than <paramref name="minValue"/>.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Extensions.UnsignedIntegers``1(``0)">
            <summary>
              Returns an infinite sequence of unsigned random numbers.
            </summary>
            <typeparam name="TGen">The type of the random numbers generator.</typeparam>
            <param name="generator">The generator from which random numbers are drawn.</param>
            <returns>An infinite sequence of 32-bit unsigned integers.</returns>
        </member>
        <member name="M:Troschuetz.Random.Extensions.UnsignedIntegers``1(``0,System.UInt32)">
            <summary>
              Returns an infinite sequence of unsigned random numbers less than the specified maximum.
            </summary>
            <typeparam name="TGen">The type of the random numbers generator.</typeparam>
            <param name="generator">The generator from which random numbers are drawn.</param>
            <param name="maxValue">The exclusive upper bound of the random number to be generated.</param>
            <returns>
              An infinite sequence of 32-bit unsigned integers greater than or equal to 0, and less
              than <paramref name="maxValue"/>; that is, the range of return values includes 0 but
              not <paramref name="maxValue"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="maxValue"/> must be greater than or equal to 1.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Extensions.UnsignedIntegers``1(``0,System.UInt32,System.UInt32)">
            <summary>
              Returns an infinite sequence of unsigned random numbers within the specified range.
            </summary>
            <typeparam name="TGen">The type of the random numbers generator.</typeparam>
            <param name="generator">The generator from which random numbers are drawn.</param>
            <param name="minValue">The inclusive lower bound of the random number to be generated.</param>
            <param name="maxValue">The exclusive upper bound of the random number to be generated.</param>
            <returns>
              An infinite sequence of 32-bit unsigned integers greater than or equal to
              <paramref name="minValue"/>, and less than <paramref name="maxValue"/>; that is, the
              range of return values includes <paramref name="minValue"/> but not <paramref name="maxValue"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="maxValue"/> must be greater than <paramref name="minValue"/>.
            </exception>
        </member>
        <member name="T:Troschuetz.Random.Generators.AbstractGenerator">
            <summary>
              An abstract generator which efficiently implements everything required by the
              <see cref="T:Troschuetz.Random.IGenerator"/> interface using only few methods: <see cref="M:Troschuetz.Random.Generators.AbstractGenerator.NextUInt"/>,
              <see cref="M:Troschuetz.Random.Generators.AbstractGenerator.NextDouble"/>, <see cref="M:Troschuetz.Random.Generators.AbstractGenerator.NextInclusiveMaxValue"/>.
            
              Therefore, in order to build a new generator, one must "simply" override the
              <see cref="M:Troschuetz.Random.Generators.AbstractGenerator.Reset(System.UInt32)"/>, which is used to automatically initialize the generator, and
              the generator methods, which, as stated above, are used to generate every kind of random
              object exposed by the interface.
            
              All generators implemented in this library extend this abstract class.
            </summary>
            <remarks>
              Methods <see cref="M:Troschuetz.Random.Generators.AbstractGenerator.NextBoolean"/> and <see cref="M:Troschuetz.Random.Generators.AbstractGenerator.NextBytes(System.Byte[])"/> are NOT thread
              safe. The thread safety of other methods depends on the one of the extending class, that
              is, if all abstract methods are implemented in a thread safe manner, then other methods,
              excluding <see cref="M:Troschuetz.Random.Generators.AbstractGenerator.NextBoolean"/> and <see cref="M:Troschuetz.Random.Generators.AbstractGenerator.NextBytes(System.Byte[])"/>, are thread safe too.
            
              Please note that all generators implemented in this library are NOT thread safe.
            </remarks>
        </member>
        <member name="F:Troschuetz.Random.Generators.AbstractGenerator.ULongToIntShift">
            <summary>
              The number of left shifts required to transform a 64-bit unsigned integer into a
              nonnegative 32-bit signed integer.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Generators.AbstractGenerator.ULongToUIntShift">
            <summary>
              The number of left shifts required to transform a 64-bit unsigned integer into a
              32-bit unsigned integer.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Generators.AbstractGenerator.IntToDoubleMultiplier">
            <summary>
              Represents the multiplier that computes a double-precision floating point number
              greater than or equal to 0.0 and less than 1.0 when it gets applied to a nonnegative
              32-bit signed integer.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Generators.AbstractGenerator.UIntToDoubleMultiplier">
            <summary>
              Represents the multiplier that computes a double-precision floating point number
              greater than or equal to 0.0 and less than 1.0 when it gets applied to a 32-bit
              unsigned integer.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Generators.AbstractGenerator.ULongToDoubleMultiplier">
            <summary>
              Represents the multiplier that computes a double-precision floating point number
              greater than or equal to 0.0 and less than 1.0 when it gets applied to a 64-bit
              unsigned integer.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Generators.AbstractGenerator._bitBuffer">
            <summary>
              Stores an <see cref="T:System.UInt32"/> used to generate up to 32 random <see cref="T:System.Boolean"/> values.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Generators.AbstractGenerator._bitCount">
            <summary>
              Stores how many random <see cref="T:System.Boolean"/> values still can be generated from <see cref="F:Troschuetz.Random.Generators.AbstractGenerator._bitBuffer"/>.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.Generators.AbstractGenerator.#ctor(System.UInt32)">
            <summary>
              Initializes a new instance of the generator, using the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
        </member>
        <member name="P:Troschuetz.Random.Generators.AbstractGenerator.Seed">
            <summary>
              The seed value used by the generator.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Generators.AbstractGenerator.CanReset">
            <summary>
              Gets a value indicating whether the random number generator can be reset, so that it
              produces the same random number sequence again.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.Generators.AbstractGenerator.Reset">
            <summary>
              Resets the random number generator using the initial seed, so that it produces the
              same random number sequence again. To understand whether this generator can be reset,
              you can query the <see cref="P:Troschuetz.Random.Generators.AbstractGenerator.CanReset"/> property.
            </summary>
            <returns>True if the random number generator was reset; otherwise, false.</returns>
        </member>
        <member name="M:Troschuetz.Random.Generators.AbstractGenerator.Reset(System.UInt32)">
            <summary>
              Resets the random number generator using the specified seed, so that it produces the
              same random number sequence again. To understand whether this generator can be reset,
              you can query the <see cref="P:Troschuetz.Random.Generators.AbstractGenerator.CanReset"/> property.
            </summary>
            <param name="seed">The seed value used by the generator.</param>
            <returns>True if the random number generator was reset; otherwise, false.</returns>
            <remarks>
              If this method is overridden, always remember to call it inside the override.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.Generators.AbstractGenerator.Next">
            <summary>
              Returns a nonnegative random number less than <see cref="F:System.Int32.MaxValue"/>.
            </summary>
            <returns>
              A 32-bit signed integer greater than or equal to 0, and less than
              <see cref="F:System.Int32.MaxValue"/>; that is, the range of return values includes 0 but not <see cref="F:System.Int32.MaxValue"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.Generators.AbstractGenerator.NextInclusiveMaxValue">
            <summary>
              Returns a nonnegative random number less than or equal to <see cref="F:System.Int32.MaxValue"/>.
            </summary>
            <returns>
              A 32-bit signed integer greater than or equal to 0, and less than or equal to
              <see cref="F:System.Int32.MaxValue"/>; that is, the range of return values includes 0 and <see cref="F:System.Int32.MaxValue"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.Generators.AbstractGenerator.Next(System.Int32)">
            <summary>
              Returns a nonnegative random number less than the specified maximum.
            </summary>
            <param name="maxValue">The exclusive upper bound of the random number to be generated.</param>
            <returns>
              A 32-bit signed integer greater than or equal to 0, and less than
              <paramref name="maxValue"/>; that is, the range of return values includes 0 but not <paramref name="maxValue"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="maxValue"/> must be greater than or equal to 0.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Generators.AbstractGenerator.Next(System.Int32,System.Int32)">
            <summary>
              Returns a random number within the specified range.
            </summary>
            <param name="minValue">The inclusive lower bound of the random number to be generated.</param>
            <param name="maxValue">
              The exclusive upper bound of the random number to be generated.
              <paramref name="maxValue"/> must be greater than or equal to <paramref name="minValue"/>.
            </param>
            <returns>
              A 32-bit signed integer greater than or equal to <paramref name="minValue"/>, and less
              than <paramref name="maxValue"/>; that is, the range of return values includes
              <paramref name="minValue"/> but not <paramref name="maxValue"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="maxValue"/> must be greater than or equal to <paramref name="minValue"/>.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Generators.AbstractGenerator.NextDouble">
            <summary>
              Returns a nonnegative floating point random number less than 1.0.
            </summary>
            <returns>
              A double-precision floating point number greater than or equal to 0.0, and less than
              1.0; that is, the range of return values includes 0.0 but not 1.0.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.Generators.AbstractGenerator.NextDouble(System.Double)">
            <summary>
              Returns a nonnegative floating point random number less than the specified maximum.
            </summary>
            <param name="maxValue">The exclusive upper bound of the random number to be generated.</param>
            <returns>
              A double-precision floating point number greater than or equal to 0.0, and less than
              <paramref name="maxValue"/>; that is, the range of return values includes 0 but not <paramref name="maxValue"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="maxValue"/> must be greater than or equal to 0.0.
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="maxValue"/> cannot be <see cref="F:System.Double.PositiveInfinity"/>.</exception>
        </member>
        <member name="M:Troschuetz.Random.Generators.AbstractGenerator.NextDouble(System.Double,System.Double)">
            <summary>
              Returns a floating point random number within the specified range.
            </summary>
            <param name="minValue">The inclusive lower bound of the random number to be generated.</param>
            <param name="maxValue">The exclusive upper bound of the random number to be generated.</param>
            <returns>
              A double-precision floating point number greater than or equal to
              <paramref name="minValue"/>, and less than <paramref name="maxValue"/>; that is, the
              range of return values includes <paramref name="minValue"/> but not <paramref name="maxValue"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="maxValue"/> must be greater than or equal to <paramref name="minValue"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              The difference between <paramref name="maxValue"/> and <paramref name="minValue"/>
              cannot be <see cref="F:System.Double.PositiveInfinity"/>.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Generators.AbstractGenerator.NextUInt">
            <summary>
              Returns an unsigned random number.
            </summary>
            <returns>
              A 32-bit unsigned integer greater than or equal to <see cref="F:System.UInt32.MinValue"/> and
              less than or equal to <see cref="F:System.UInt32.MaxValue"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.Generators.AbstractGenerator.NextUIntExclusiveMaxValue">
            <summary>
              Returns an unsigned random number less than <see cref="F:System.UInt32.MaxValue"/>.
            </summary>
            <returns>
              A 32-bit unsigned integer greater than or equal to <see cref="F:System.UInt32.MinValue"/> and
              less than <see cref="F:System.UInt32.MaxValue"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.Generators.AbstractGenerator.NextUInt(System.UInt32)">
            <summary>
              Returns an unsigned random number less than the specified maximum.
            </summary>
            <param name="maxValue">The exclusive upper bound of the random number to be generated.</param>
            <returns>
              A 32-bit unsigned integer greater than or equal to <see cref="F:System.UInt32.MinValue"/> and
              less than <paramref name="maxValue"/>; that is, the range of return values includes
              <see cref="F:System.UInt32.MinValue"/> but not <paramref name="maxValue"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.Generators.AbstractGenerator.NextUInt(System.UInt32,System.UInt32)">
            <summary>
              Returns an unsigned random number within the specified range.
            </summary>
            <param name="minValue">The inclusive lower bound of the random number to be generated.</param>
            <param name="maxValue">The exclusive upper bound of the random number to be generated.</param>
            <returns>
              A 32-bit unsigned integer greater than or equal to <paramref name="minValue"/> and
              less than <paramref name="maxValue"/>; that is, the range of return values includes
              <paramref name="minValue"/> but not <paramref name="maxValue"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="maxValue"/> must be greater than or equal to <paramref name="minValue"/>.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Generators.AbstractGenerator.NextBoolean">
            <summary>
              Returns a random Boolean value.
            </summary>
            <remarks>
              Buffers 31 random bits for future calls, so the random number generator is only
              invoked once in every 31 calls.
            </remarks>
            <returns>A <see cref="T:System.Boolean"/> value.</returns>
        </member>
        <member name="M:Troschuetz.Random.Generators.AbstractGenerator.NextBytes(System.Byte[])">
            <summary>
              Fills the elements of a specified array of bytes with random numbers.
            </summary>
            <remarks>
              Each element of the array of bytes is set to a random number greater than or equal to
              0, and less than or equal to <see cref="F:System.Byte.MaxValue"/>.
            </remarks>
            <param name="buffer">An array of bytes to contain random numbers.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is null.</exception>
        </member>
        <member name="M:Troschuetz.Random.Generators.AbstractGenerator.Equals(System.Object)">
            <summary>
              Two <see cref="T:Troschuetz.Random.Generators.AbstractGenerator"/> instances are equal if they have the same state.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="M:Troschuetz.Random.Generators.AbstractGenerator.GetHashCode">
            <summary>
              Hash code is computed from the state of the generator.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.Generators.AbstractGenerator.ToString">
            <summary>
              A string with the name of the generator and the seed.
            </summary>
        </member>
        <member name="T:Troschuetz.Random.Generators.ALFGenerator">
            <summary>
              Represents a Additive Lagged Fibonacci pseudo-random number generator.
            </summary>
            <remarks>
              The <see cref="T:Troschuetz.Random.Generators.ALFGenerator"/> type bases upon the implementation in the
              <a href="http://www.boost.org/libs/random/index.html">Boost Random Number Library</a>. It
              uses the modulus 2 <sup>32</sup> and by default the "lags" 418 and 1279, which can be
              adjusted through the associated <see cref="P:Troschuetz.Random.Generators.ALFGenerator.ShortLag"/> and <see cref="P:Troschuetz.Random.Generators.ALFGenerator.LongLag"/> properties.
            
              Some popular pairs are presented on
              <a href="http://en.wikipedia.org/wiki/Lagged_Fibonacci_generator">Wikipedia - Lagged
              Fibonacci generator</a>.
            
              This generator is NOT thread safe.
            </remarks>
        </member>
        <member name="F:Troschuetz.Random.Generators.ALFGenerator._i">
            <summary>
              Stores an index for the random number array element that will be accessed next.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Generators.ALFGenerator._longLag">
            <summary>
              Stores the long lag of the Lagged Fibonacci pseudo-random number generator.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Generators.ALFGenerator._shortLag">
            <summary>
              Stores the short lag of the Lagged Fibonacci pseudo-random number generator.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Generators.ALFGenerator._x">
            <summary>
              Stores an array of <see cref="F:Troschuetz.Random.Generators.ALFGenerator._longLag"/> random numbers
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Generators.ALFGenerator.ShortLag">
            <summary>
              Gets or sets the short lag of the Lagged Fibonacci pseudo-random number generator.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is less than or equal to zero.
            </exception>
            <remarks>
              Calls <see cref="M:Troschuetz.Random.Generators.ALFGenerator.IsValidShortLag(System.Int32)"/> to determine whether a value is valid and
              therefore assignable.
            </remarks>
        </member>
        <member name="P:Troschuetz.Random.Generators.ALFGenerator.LongLag">
            <summary>
              Gets or sets the long lag of the Lagged Fibonacci pseudo-random number generator.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is less than or equal to <see cref="P:Troschuetz.Random.Generators.ALFGenerator.ShortLag"/>.
            </exception>
            <remarks>
              Calls <see cref="M:Troschuetz.Random.Generators.ALFGenerator.IsValidLongLag(System.Int32)"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.Generators.ALFGenerator.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Generators.ALFGenerator"/> class, using a
              time-dependent default seed value.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.Generators.ALFGenerator.#ctor(System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Generators.ALFGenerator"/> class, using the
              specified seed value.
            </summary>
            <param name="seed">
              A number used to calculate a starting value for the pseudo-random number sequence. If
              a negative number is specified, the absolute value of the number is used.
            </param>
        </member>
        <member name="M:Troschuetz.Random.Generators.ALFGenerator.#ctor(System.UInt32)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Generators.StandardGenerator"/> class, using the
              specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
        </member>
        <member name="M:Troschuetz.Random.Generators.ALFGenerator.IsValidShortLag(System.Int32)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Generators.ALFGenerator.ShortLag"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/> if value is greater than 0; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Troschuetz.Random.Generators.ALFGenerator.IsValidLongLag(System.Int32)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Generators.ALFGenerator.LongLag"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
              <see langword="true"/> if value is greater than <see cref="P:Troschuetz.Random.Generators.ALFGenerator.ShortLag"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.Generators.ALFGenerator.Fill">
            <summary>
              Fills the array <see cref="F:Troschuetz.Random.Generators.ALFGenerator._x"/> with <see cref="F:Troschuetz.Random.Generators.ALFGenerator._longLag"/> new unsigned random numbers.
            </summary>
            <remarks>
              Generated random numbers are 32-bit unsigned integers greater than or equal to
              <see cref="F:System.UInt32.MinValue"/> and less than or equal to <see cref="F:System.UInt32.MaxValue"/>.
            </remarks>
        </member>
        <member name="P:Troschuetz.Random.Generators.ALFGenerator.CanReset">
            <summary>
              Gets a value indicating whether the random number generator can be reset, so that it
              produces the same random number sequence again.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.Generators.ALFGenerator.Reset(System.UInt32)">
            <summary>
              Resets the random number generator using the specified seed, so that it produces the
              same random number sequence again. To understand whether this generator can be reset,
              you can query the <see cref="P:Troschuetz.Random.Generators.ALFGenerator.CanReset"/> property.
            </summary>
            <param name="seed">The seed value used by the generator.</param>
            <returns>True if the random number generator was reset; otherwise, false.</returns>
        </member>
        <member name="M:Troschuetz.Random.Generators.ALFGenerator.NextInclusiveMaxValue">
            <summary>
              Returns a nonnegative random number less than or equal to <see cref="F:System.Int32.MaxValue"/>.
            </summary>
            <returns>
              A 32-bit signed integer greater than or equal to 0, and less than or equal to
              <see cref="F:System.Int32.MaxValue"/>; that is, the range of return values includes 0 and <see cref="F:System.Int32.MaxValue"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.Generators.ALFGenerator.NextDouble">
            <summary>
              Returns a nonnegative floating point random number less than 1.0.
            </summary>
            <returns>
              A double-precision floating point number greater than or equal to 0.0, and less than
              1.0; that is, the range of return values includes 0.0 but not 1.0.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.Generators.ALFGenerator.NextUInt">
            <summary>
              Returns an unsigned random number.
            </summary>
            <returns>
              A 32-bit unsigned integer greater than or equal to <see cref="F:System.UInt32.MinValue"/> and
              less than or equal to <see cref="F:System.UInt32.MaxValue"/>.
            </returns>
        </member>
        <member name="T:Troschuetz.Random.Generators.MT19937Generator">
            <summary>
              Represents a Mersenne Twister pseudo-random number generator with period 2^19937-1.
            </summary>
            <remarks>
              The <see cref="T:Troschuetz.Random.Generators.MT19937Generator"/> type bases upon information and the implementation
              presented on the
              <a href="http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html">Mersenne Twister Home Page</a>.
            
              This generator is NOT thread safe.
            </remarks>
        </member>
        <member name="F:Troschuetz.Random.Generators.MT19937Generator.N">
            <summary>
              Represents the number of unsigned random numbers generated at one time. This field is constant.
            </summary>
            <remarks>The value of this constant is 624.</remarks>
        </member>
        <member name="F:Troschuetz.Random.Generators.MT19937Generator.M">
            <summary>
              Represents a constant used for generation of unsigned random numbers. This field is constant.
            </summary>
            <remarks>The value of this constant is 397.</remarks>
        </member>
        <member name="F:Troschuetz.Random.Generators.MT19937Generator.VectorA">
            <summary>
              Represents the constant vector a. This field is constant.
            </summary>
            <remarks>The value of this constant is 0x9908b0dfU.</remarks>
        </member>
        <member name="F:Troschuetz.Random.Generators.MT19937Generator.UpperMask">
            <summary>
              Represents the most significant w-r bits. This field is constant.
            </summary>
            <remarks>The value of this constant is 0x80000000.</remarks>
        </member>
        <member name="F:Troschuetz.Random.Generators.MT19937Generator.LowerMask">
            <summary>
              Represents the least significant r bits. This field is constant.
            </summary>
            <remarks>The value of this constant is 0x7fffffff.</remarks>
        </member>
        <member name="F:Troschuetz.Random.Generators.MT19937Generator._mt">
            <summary>
              Stores the state vector array.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Generators.MT19937Generator._seedArray">
            <summary>
              Stores the used seed array.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Generators.MT19937Generator._mti">
            <summary>
              Stores an index for the state vector array element that will be accessed next.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.Generators.MT19937Generator.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Generators.MT19937Generator"/> class, using a
              time-dependent default seed value.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.Generators.MT19937Generator.#ctor(System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Generators.MT19937Generator"/> class, using the
              specified seed value.
            </summary>
            <param name="seed">
              A number used to calculate a starting value for the pseudo-random number sequence. If
              a negative number is specified, the absolute value of the number is used.
            </param>
        </member>
        <member name="M:Troschuetz.Random.Generators.MT19937Generator.#ctor(System.UInt32)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Generators.MT19937Generator"/> class, using the
              specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
        </member>
        <member name="M:Troschuetz.Random.Generators.MT19937Generator.#ctor(System.Collections.Generic.IList{System.Int32})">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Generators.MT19937Generator"/> class, using the
              specified seed array.
            </summary>
            <param name="seedArray">
              An array of numbers used to calculate a starting values for the pseudo-random number
              sequence. If negative numbers are specified, the absolute values of them are used.
            </param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="seedArray"/> is NULL ( <see langword="Nothing"/> in Visual Basic).
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Generators.MT19937Generator.#ctor(System.UInt32[])">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Generators.MT19937Generator"/> class, using the
              specified seed array.
            </summary>
            <param name="seedArray">
              An array of unsigned numbers used to calculate a starting values for the pseudo-random
              number sequence.
            </param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="seedArray"/> is NULL ( <see langword="Nothing"/> in Visual Basic).
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Generators.MT19937Generator.ResetBySeedArray">
            <summary>
              Extends resetting of the <see cref="T:Troschuetz.Random.Generators.MT19937Generator"/> using the <see cref="F:Troschuetz.Random.Generators.MT19937Generator._seedArray"/>.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.Generators.MT19937Generator.GenerateNUInts">
            <summary>
              Generates <see cref="F:Troschuetz.Random.Generators.MT19937Generator.N"/> unsigned random numbers.
            </summary>
            <remarks>
              Generated random numbers are 32-bit unsigned integers greater than or equal to
              <see cref="F:System.UInt32.MinValue"/> and less than or equal to <see cref="F:System.UInt32.MaxValue"/>.
            </remarks>
        </member>
        <member name="P:Troschuetz.Random.Generators.MT19937Generator.CanReset">
            <summary>
              Gets a value indicating whether the random number generator can be reset, so that it
              produces the same random number sequence again.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.Generators.MT19937Generator.Reset(System.UInt32)">
            <summary>
              Resets the random number generator using the specified seed, so that it produces the
              same random number sequence again. To understand whether this generator can be reset,
              you can query the <see cref="P:Troschuetz.Random.Generators.MT19937Generator.CanReset"/> property.
            </summary>
            <param name="seed">The seed value used by the generator.</param>
            <returns>True if the random number generator was reset; otherwise, false.</returns>
        </member>
        <member name="M:Troschuetz.Random.Generators.MT19937Generator.NextInclusiveMaxValue">
            <summary>
              Returns a nonnegative random number less than or equal to <see cref="F:System.Int32.MaxValue"/>.
            </summary>
            <returns>
              A 32-bit signed integer greater than or equal to 0, and less than or equal to
              <see cref="F:System.Int32.MaxValue"/>; that is, the range of return values includes 0 and <see cref="F:System.Int32.MaxValue"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.Generators.MT19937Generator.NextDouble">
            <summary>
              Returns a nonnegative floating point random number less than 1.0.
            </summary>
            <returns>
              A double-precision floating point number greater than or equal to 0.0, and less than
              1.0; that is, the range of return values includes 0.0 but not 1.0.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.Generators.MT19937Generator.NextUInt">
            <summary>
              Returns an unsigned random number.
            </summary>
            <returns>
              A 32-bit unsigned integer greater than or equal to <see cref="F:System.UInt32.MinValue"/> and
              less than or equal to <see cref="F:System.UInt32.MaxValue"/>.
            </returns>
        </member>
        <member name="T:Troschuetz.Random.Generators.NR3Generator">
            <summary>
              A generator whose original code has been found in a famous book about numerical analysis.
              Inside the book, it is the highest quality recommended generator.
            </summary>
            <remarks>
              This generator has a period of ~ 3.138 * 10^57.
            
              This generator is NOT thread safe.
            </remarks>
        </member>
        <member name="F:Troschuetz.Random.Generators.NR3Generator.SeedV">
            <summary>
              Represents the seed for the <see cref="F:Troschuetz.Random.Generators.NR3Generator._v"/> variable. This field is constant.
            </summary>
            <remarks>The value of this constant is 4101842887655102017.</remarks>
        </member>
        <member name="F:Troschuetz.Random.Generators.NR3Generator.SeedW">
            <summary>
              Represents the seed for the <see cref="F:Troschuetz.Random.Generators.NR3Generator._w"/> variable. This field is constant.
            </summary>
            <remarks>The value of this constant is 1.</remarks>
        </member>
        <member name="F:Troschuetz.Random.Generators.NR3Generator.SeedU1">
            <summary>
              Represents the seed for the <see cref="T:System.UInt64"/> numbers generation. This field is constant.
            </summary>
            <remarks>The value of this constant is 2862933555777941757.</remarks>
        </member>
        <member name="F:Troschuetz.Random.Generators.NR3Generator.SeedU2">
            <summary>
              Represents the seed for the <see cref="T:System.UInt64"/> numbers generation. This field is constant.
            </summary>
            <remarks>The value of this constant is 7046029254386353087.</remarks>
        </member>
        <member name="F:Troschuetz.Random.Generators.NR3Generator.SeedU3">
            <summary>
              Represents the seed for the <see cref="T:System.UInt64"/> numbers generation. This field is constant.
            </summary>
            <remarks>The value of this constant is 2685821657736338717.</remarks>
        </member>
        <member name="F:Troschuetz.Random.Generators.NR3Generator._bytesAvailable">
            <summary>
              Generators like <see cref="M:Troschuetz.Random.Generators.NR3Generator.NextDouble"/> and <see cref="M:Troschuetz.Random.Generators.NR3Generator.NextInclusiveMaxValue"/> use
              only 32 bits to produce a random result, even if the core algorithm of this generator
              produces 64 random bits at each iteration. Therefore, instead of throwing 32 bits away
              every time those methods are called, we use this flag to signal that there 32 bits
              still available and ready to be used.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.Generators.NR3Generator.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Generators.NR3Generator"/> class, using a
              time-dependent default seed value.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.Generators.NR3Generator.#ctor(System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Generators.NR3Generator"/> class, using the
              specified seed value.
            </summary>
            <param name="seed">
              A number used to calculate a starting value for the pseudo-random number sequence. If
              a negative number is specified, the absolute value of the number is used.
            </param>
        </member>
        <member name="M:Troschuetz.Random.Generators.NR3Generator.#ctor(System.UInt32)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Generators.NR3Generator"/> class, using the
              specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
        </member>
        <member name="P:Troschuetz.Random.Generators.NR3Generator.CanReset">
            <summary>
              Gets a value indicating whether the random number generator can be reset, so that it
              produces the same random number sequence again.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.Generators.NR3Generator.Reset(System.UInt32)">
            <summary>
              Resets the random number generator using the specified seed, so that it produces the
              same random number sequence again. To understand whether this generator can be reset,
              you can query the <see cref="P:Troschuetz.Random.Generators.NR3Generator.CanReset"/> property.
            </summary>
            <param name="seed">The seed value used by the generator.</param>
            <returns>True if the random number generator was reset; otherwise, false.</returns>
        </member>
        <member name="M:Troschuetz.Random.Generators.NR3Generator.NextInclusiveMaxValue">
            <summary>
              Returns a nonnegative random number less than or equal to <see cref="F:System.Int32.MaxValue"/>.
            </summary>
            <returns>
              A 32-bit signed integer greater than or equal to 0, and less than or equal to
              <see cref="F:System.Int32.MaxValue"/>; that is, the range of return values includes 0 and <see cref="F:System.Int32.MaxValue"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.Generators.NR3Generator.NextDouble">
            <summary>
              Returns a nonnegative floating point random number less than 1.0.
            </summary>
            <returns>
              A double-precision floating point number greater than or equal to 0.0, and less than
              1.0; that is, the range of return values includes 0.0 but not 1.0.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.Generators.NR3Generator.NextUInt">
            <summary>
              Returns an unsigned random number.
            </summary>
            <returns>
              A 32-bit unsigned integer greater than or equal to <see cref="F:System.UInt32.MinValue"/> and
              less than or equal to <see cref="F:System.UInt32.MaxValue"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.Generators.NR3Generator.NextULong">
            <summary>
              Returns an unsigned long random number.
            </summary>
            <returns>
              A 64-bit unsigned integer greater than or equal to <see cref="F:System.UInt64.MinValue"/> and
              less than or equal to <see cref="F:System.UInt64.MaxValue"/>.
            </returns>
        </member>
        <member name="T:Troschuetz.Random.Generators.NR3Q1Generator">
            <summary>
              A generator whose original code has been found in a famous book about numerical analysis.
              Inside the book, it is the recommended generator for everyday use.
            </summary>
            <remarks>
              This generator has a period of ~ 1.8 * 10^19.
            
              This generator is NOT thread safe.
            </remarks>
        </member>
        <member name="F:Troschuetz.Random.Generators.NR3Q1Generator.SeedV">
            <summary>
              Represents the seed for the <see cref="F:Troschuetz.Random.Generators.NR3Q1Generator._v"/> variable. This field is constant.
            </summary>
            <remarks>The value of this constant is 4101842887655102017.</remarks>
        </member>
        <member name="F:Troschuetz.Random.Generators.NR3Q1Generator.SeedU">
            <summary>
              Represents the seed for the <see cref="T:System.UInt64"/> numbers generation. This field is constant.
            </summary>
            <remarks>The value of this constant is 2685821657736338717.</remarks>
        </member>
        <member name="F:Troschuetz.Random.Generators.NR3Q1Generator._bytesAvailable">
            <summary>
              Generators like <see cref="M:Troschuetz.Random.Generators.NR3Q1Generator.NextDouble"/> and <see cref="M:Troschuetz.Random.Generators.NR3Q1Generator.NextInclusiveMaxValue"/> use
              only 32 bits to produce a random result, even if the core algorithm of this generator
              produces 64 random bits at each iteration. Therefore, instead of throwing 32 bits away
              every time those methods are called, we use this flag to signal that there 32 bits
              still available and ready to be used.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.Generators.NR3Q1Generator.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Generators.NR3Q1Generator"/> class, using a
              time-dependent default seed value.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.Generators.NR3Q1Generator.#ctor(System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Generators.NR3Q1Generator"/> class, using the
              specified seed value.
            </summary>
            <param name="seed">
              A number used to calculate a starting value for the pseudo-random number sequence. If
              a negative number is specified, the absolute value of the number is used.
            </param>
        </member>
        <member name="M:Troschuetz.Random.Generators.NR3Q1Generator.#ctor(System.UInt32)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Generators.NR3Q1Generator"/> class, using the
              specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
        </member>
        <member name="P:Troschuetz.Random.Generators.NR3Q1Generator.CanReset">
            <summary>
              Gets a value indicating whether the random number generator can be reset, so that it
              produces the same random number sequence again.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.Generators.NR3Q1Generator.Reset(System.UInt32)">
            <summary>
              Resets the random number generator using the specified seed, so that it produces the
              same random number sequence again. To understand whether this generator can be reset,
              you can query the <see cref="P:Troschuetz.Random.Generators.NR3Q1Generator.CanReset"/> property.
            </summary>
            <param name="seed">The seed value used by the generator.</param>
            <returns>True if the random number generator was reset; otherwise, false.</returns>
        </member>
        <member name="M:Troschuetz.Random.Generators.NR3Q1Generator.NextInclusiveMaxValue">
            <summary>
              Returns a nonnegative random number less than or equal to <see cref="F:System.Int32.MaxValue"/>.
            </summary>
            <returns>
              A 32-bit signed integer greater than or equal to 0, and less than or equal to
              <see cref="F:System.Int32.MaxValue"/>; that is, the range of return values includes 0 and <see cref="F:System.Int32.MaxValue"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.Generators.NR3Q1Generator.NextDouble">
            <summary>
              Returns a nonnegative floating point random number less than 1.0.
            </summary>
            <returns>
              A double-precision floating point number greater than or equal to 0.0, and less than
              1.0; that is, the range of return values includes 0.0 but not 1.0.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.Generators.NR3Q1Generator.NextUInt">
            <summary>
              Returns an unsigned random number.
            </summary>
            <returns>
              A 32-bit unsigned integer greater than or equal to <see cref="F:System.UInt32.MinValue"/> and
              less than or equal to <see cref="F:System.UInt32.MaxValue"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.Generators.NR3Q1Generator.NextULong">
            <summary>
              Returns an unsigned long random number.
            </summary>
            <returns>
              A 64-bit unsigned integer greater than or equal to <see cref="F:System.UInt64.MinValue"/> and
              less than or equal to <see cref="F:System.UInt64.MaxValue"/>.
            </returns>
        </member>
        <member name="T:Troschuetz.Random.Generators.NR3Q2Generator">
            <summary>
              A generator whose original code has been found in a famous book about numerical analysis.
              Inside the book, it is a "backup" generator which should be used
              <see cref="T:Troschuetz.Random.Generators.NR3Q1Generator"/> has too short a period and <see cref="T:Troschuetz.Random.Generators.NR3Generator"/> is too slow.
            </summary>
            <remarks>
              This generator has a period of ~ 8.5 * 10^37.
            
              This generator is NOT thread safe.
            </remarks>
        </member>
        <member name="F:Troschuetz.Random.Generators.NR3Q2Generator.SeedV">
            <summary>
              Represents the seed for the <see cref="F:Troschuetz.Random.Generators.NR3Q2Generator._v"/> variable. This field is constant.
            </summary>
            <remarks>The value of this constant is 4101842887655102017.</remarks>
        </member>
        <member name="F:Troschuetz.Random.Generators.NR3Q2Generator.SeedW">
            <summary>
              Represents the seed for the <see cref="F:Troschuetz.Random.Generators.NR3Q2Generator._w"/> variable. This field is constant.
            </summary>
            <remarks>The value of this constant is 1.</remarks>
        </member>
        <member name="F:Troschuetz.Random.Generators.NR3Q2Generator.SeedU">
            <summary>
              Represents the seed for the <see cref="T:System.UInt64"/> numbers generation. This field is constant.
            </summary>
            <remarks>The value of this constant is 4294957665.</remarks>
        </member>
        <member name="F:Troschuetz.Random.Generators.NR3Q2Generator._bytesAvailable">
            <summary>
              Generators like <see cref="M:Troschuetz.Random.Generators.NR3Q2Generator.NextDouble"/> and <see cref="M:Troschuetz.Random.Generators.NR3Q2Generator.NextInclusiveMaxValue"/> use
              only 32 bits to produce a random result, even if the core algorithm of this generator
              produces 64 random bits at each iteration. Therefore, instead of throwing 32 bits away
              every time those methods are called, we use this flag to signal that there 32 bits
              still available and ready to be used.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.Generators.NR3Q2Generator.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Generators.NR3Q2Generator"/> class, using a
              time-dependent default seed value.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.Generators.NR3Q2Generator.#ctor(System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Generators.NR3Q2Generator"/> class, using the
              specified seed value.
            </summary>
            <param name="seed">
              A number used to calculate a starting value for the pseudo-random number sequence. If
              a negative number is specified, the absolute value of the number is used.
            </param>
        </member>
        <member name="M:Troschuetz.Random.Generators.NR3Q2Generator.#ctor(System.UInt32)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Generators.NR3Q2Generator"/> class, using the
              specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
        </member>
        <member name="P:Troschuetz.Random.Generators.NR3Q2Generator.CanReset">
            <summary>
              Gets a value indicating whether the random number generator can be reset, so that it
              produces the same random number sequence again.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.Generators.NR3Q2Generator.Reset(System.UInt32)">
            <summary>
              Resets the random number generator using the specified seed, so that it produces the
              same random number sequence again. To understand whether this generator can be reset,
              you can query the <see cref="P:Troschuetz.Random.Generators.NR3Q2Generator.CanReset"/> property.
            </summary>
            <param name="seed">The seed value used by the generator.</param>
            <returns>True if the random number generator was reset; otherwise, false.</returns>
        </member>
        <member name="M:Troschuetz.Random.Generators.NR3Q2Generator.NextInclusiveMaxValue">
            <summary>
              Returns a nonnegative random number less than or equal to <see cref="F:System.Int32.MaxValue"/>.
            </summary>
            <returns>
              A 32-bit signed integer greater than or equal to 0, and less than or equal to
              <see cref="F:System.Int32.MaxValue"/>; that is, the range of return values includes 0 and <see cref="F:System.Int32.MaxValue"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.Generators.NR3Q2Generator.NextDouble">
            <summary>
              Returns a nonnegative floating point random number less than 1.0.
            </summary>
            <returns>
              A double-precision floating point number greater than or equal to 0.0, and less than
              1.0; that is, the range of return values includes 0.0 but not 1.0.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.Generators.NR3Q2Generator.NextUInt">
            <summary>
              Returns an unsigned random number.
            </summary>
            <returns>
              A 32-bit unsigned integer greater than or equal to <see cref="F:System.UInt32.MinValue"/> and
              less than or equal to <see cref="F:System.UInt32.MaxValue"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.Generators.NR3Q2Generator.NextULong">
            <summary>
              Returns an unsigned long random number.
            </summary>
            <returns>
              A 64-bit unsigned integer greater than or equal to <see cref="F:System.UInt64.MinValue"/> and
              less than or equal to <see cref="F:System.UInt64.MaxValue"/>.
            </returns>
        </member>
        <member name="T:Troschuetz.Random.Generators.StandardGenerator">
            <summary>
              Represents a simple pseudo-random number generator.
            </summary>
            <remarks>
              The <see cref="T:Troschuetz.Random.Generators.StandardGenerator"/> type internally uses an instance of the
              <see cref="T:System.Random"/> type to generate pseudo-random numbers.
            
              This generator is NOT thread safe.
            </remarks>
        </member>
        <member name="F:Troschuetz.Random.Generators.StandardGenerator._uintBuffer">
            <summary>
              Stores a byte array used to compute the result of <see cref="M:Troschuetz.Random.Generators.StandardGenerator.NextUInt"/>, starting
              from the output of <see cref="M:Troschuetz.Random.Generators.AbstractGenerator.NextBytes(System.Byte[])"/>.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Generators.StandardGenerator._generator">
            <summary>
              Stores an instance of <see cref="T:System.Random"/> type that is used to generate random numbers.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.Generators.StandardGenerator.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Generators.StandardGenerator"/> class, using a
              time-dependent default seed value.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.Generators.StandardGenerator.#ctor(System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Generators.StandardGenerator"/> class, using the
              specified seed value.
            </summary>
            <param name="seed">
              A number used to calculate a starting value for the pseudo-random number sequence. If
              a negative number is specified, the absolute value of the number is used.
            </param>
        </member>
        <member name="P:Troschuetz.Random.Generators.StandardGenerator.CanReset">
            <summary>
              Gets a value indicating whether the random number generator can be reset, so that it
              produces the same random number sequence again.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.Generators.StandardGenerator.Reset(System.UInt32)">
            <summary>
              Resets the random number generator using the specified seed, so that it produces the
              same random number sequence again. To understand whether this generator can be reset,
              you can query the <see cref="P:Troschuetz.Random.Generators.StandardGenerator.CanReset"/> property.
            </summary>
            <param name="seed">The seed value used by the generator.</param>
            <returns>True if the random number generator was reset; otherwise, false.</returns>
        </member>
        <member name="M:Troschuetz.Random.Generators.StandardGenerator.NextInclusiveMaxValue">
            <summary>
              Returns a nonnegative random number less than or equal to <see cref="F:System.Int32.MaxValue"/>.
            </summary>
            <returns>
              A 32-bit signed integer greater than or equal to 0, and less than or equal to
              <see cref="F:System.Int32.MaxValue"/>; that is, the range of return values includes 0 and <see cref="F:System.Int32.MaxValue"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.Generators.StandardGenerator.NextDouble">
            <summary>
              Returns a nonnegative floating point random number less than 1.0.
            </summary>
            <returns>
              A double-precision floating point number greater than or equal to 0.0, and less than
              1.0; that is, the range of return values includes 0.0 but not 1.0.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.Generators.StandardGenerator.NextUInt">
            <summary>
              Returns an unsigned random number.
            </summary>
            <returns>
              A 32-bit unsigned integer greater than or equal to <see cref="F:System.UInt32.MinValue"/> and
              less than or equal to <see cref="F:System.UInt32.MaxValue"/>.
            </returns>
        </member>
        <member name="T:Troschuetz.Random.Generators.XorShift128Generator">
            <summary>
              Represents a xorshift pseudo-random number generator with period 2^128-1.
            </summary>
            <remarks>
              The <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> type bases upon the implementation presented in the
              CP article " <a href="http://www.codeproject.com/csharp/fastrandom.asp">A fast equivalent
              for System.Random</a>" and the theoretical background on xorshift random number generators
              published by George Marsaglia in this paper "
              <a href="http://www.jstatsoft.org/v08/i14/xorshift.pdf">Xorshift RNGs</a>".
            
              This generator is NOT thread safe.
            </remarks>
        </member>
        <member name="F:Troschuetz.Random.Generators.XorShift128Generator.SeedX">
            <summary>
              Represents the seed for the <see cref="F:Troschuetz.Random.Generators.XorShift128Generator._x"/> variable. This field is constant.
            </summary>
            <remarks>
              The value of this constant is 521288629, left shifted by 32 bits. The right side will
              be filled with the specified seed.
            </remarks>
        </member>
        <member name="F:Troschuetz.Random.Generators.XorShift128Generator.SeedY">
            <summary>
              Represents the seed for the <see cref="F:Troschuetz.Random.Generators.XorShift128Generator._y"/> variable. This field is constant.
            </summary>
            <remarks>The value of this constant is 362436069.</remarks>
        </member>
        <member name="F:Troschuetz.Random.Generators.XorShift128Generator._x">
            <summary>
              The first part of the generator state. It is important that <see cref="F:Troschuetz.Random.Generators.XorShift128Generator._x"/> and
              <see cref="F:Troschuetz.Random.Generators.XorShift128Generator._y"/> are not zero at the same time.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Generators.XorShift128Generator._y">
            <summary>
              The second part of the generator state. It is important that <see cref="F:Troschuetz.Random.Generators.XorShift128Generator._x"/> and
              <see cref="F:Troschuetz.Random.Generators.XorShift128Generator._y"/> are not zero at the same time.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Generators.XorShift128Generator._bytesAvailable">
            <summary>
              Generators like <see cref="M:Troschuetz.Random.Generators.XorShift128Generator.NextDouble"/> and <see cref="M:Troschuetz.Random.Generators.XorShift128Generator.NextInclusiveMaxValue"/> use
              only 32 bits to produce a random result, even if the core algorithm of this generator
              produces 64 random bits at each iteration. Therefore, instead of throwing 32 bits away
              every time those methods are called, we use this flag to signal that there 32 bits
              still available and ready to be used.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.Generators.XorShift128Generator.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> class, using a
              time-dependent default seed value.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.Generators.XorShift128Generator.#ctor(System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> class, using the
              specified seed value.
            </summary>
            <param name="seed">
              A number used to calculate a starting value for the pseudo-random number sequence. If
              a negative number is specified, the absolute value of the number is used.
            </param>
        </member>
        <member name="M:Troschuetz.Random.Generators.XorShift128Generator.#ctor(System.UInt32)">
            <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> class, using the
              specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
        </member>
        <member name="P:Troschuetz.Random.Generators.XorShift128Generator.CanReset">
            <summary>
              Gets a value indicating whether the random number generator can be reset, so that it
              produces the same random number sequence again.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.Generators.XorShift128Generator.Reset(System.UInt32)">
            <summary>
              Resets the random number generator using the specified seed, so that it produces the
              same random number sequence again. To understand whether this generator can be reset,
              you can query the <see cref="P:Troschuetz.Random.Generators.XorShift128Generator.CanReset"/> property.
            </summary>
            <param name="seed">The seed value used by the generator.</param>
            <returns>True if the random number generator was reset; otherwise, false.</returns>
        </member>
        <member name="M:Troschuetz.Random.Generators.XorShift128Generator.NextInclusiveMaxValue">
            <summary>
              Returns a nonnegative random number less than or equal to <see cref="F:System.Int32.MaxValue"/>.
            </summary>
            <returns>
              A 32-bit signed integer greater than or equal to 0, and less than or equal to
              <see cref="F:System.Int32.MaxValue"/>; that is, the range of return values includes 0 and <see cref="F:System.Int32.MaxValue"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.Generators.XorShift128Generator.NextDouble">
            <summary>
              Returns a nonnegative floating point random number less than 1.0.
            </summary>
            <returns>
              A double-precision floating point number greater than or equal to 0.0, and less than
              1.0; that is, the range of return values includes 0.0 but not 1.0.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.Generators.XorShift128Generator.NextUInt">
            <summary>
              Returns an unsigned random number.
            </summary>
            <returns>
              A 32-bit unsigned integer greater than or equal to <see cref="F:System.UInt32.MinValue"/> and
              less than or equal to <see cref="F:System.UInt32.MaxValue"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.Generators.XorShift128Generator.NextULong">
            <summary>
              Returns an unsigned long random number.
            </summary>
            <returns>
              A 64-bit unsigned integer greater than or equal to <see cref="F:System.UInt64.MinValue"/> and
              less than or equal to <see cref="F:System.UInt64.MaxValue"/>.
            </returns>
        </member>
        <member name="T:Troschuetz.Random.IDistribution">
            <summary>
              Declares common functionality for all random number distributions.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.IDistribution.Generator">
            <summary>
              Gets the <see cref="T:Troschuetz.Random.IGenerator"/> object that is used as underlying random number generator.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.IDistribution.CanReset">
            <summary>
              Gets a value indicating whether the random number distribution can be reset, so that
              it produces the same random number sequence again.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.IDistribution.Minimum">
            <summary>
              Gets the minimum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.IDistribution.Maximum">
            <summary>
              Gets the maximum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.IDistribution.Mean">
            <summary>
              Gets the mean of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mean is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.IDistribution.Median">
            <summary>
              Gets the median of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if median is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.IDistribution.Variance">
            <summary>
              Gets the variance of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if variance is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:Troschuetz.Random.IDistribution.Mode">
            <summary>
              Gets the mode of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mode is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.IDistribution.Reset">
            <summary>
              Resets the random number distribution, so that it produces the same random number
              sequence again.
            </summary>
            <returns>
              <see langword="true"/>, if the random number distribution was reset; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.IDistribution.NextDouble">
            <summary>
              Returns a distributed floating point random number.
            </summary>
            <returns>A distributed double-precision floating point number.</returns>
        </member>
        <member name="T:Troschuetz.Random.IContinuousDistribution">
            <summary>
              Declares common functionality for all continuous random number distributions.
            </summary>
        </member>
        <member name="T:Troschuetz.Random.IDiscreteDistribution">
            <summary>
              Declares common functionality for all discrete random number distributions.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.IDiscreteDistribution.Next">
            <summary>
              Returns a distributed random number.
            </summary>
            <returns>A distributed 32-bit signed integer.</returns>
        </member>
        <member name="T:Troschuetz.Random.IAlphaDistribution`1">
            <summary>
              Models a distribution with an alpha parameter.
            </summary>
            <typeparam name="TNum">The numeric type of the parameter.</typeparam>
        </member>
        <member name="P:Troschuetz.Random.IAlphaDistribution`1.Alpha">
            <summary>
              Gets or sets the parameter alpha which is used for generation of distributed random numbers.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.IAlphaDistribution`1.IsValidAlpha(`0)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.IAlphaDistribution`1.Alpha"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
              <see langword="true"/> if value is valid for parameter <see cref="P:Troschuetz.Random.IAlphaDistribution`1.Alpha"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Troschuetz.Random.IBetaDistribution`1">
            <summary>
              Models a distribution with a beta parameter.
            </summary>
            <typeparam name="TNum">The numeric type of the parameter.</typeparam>
        </member>
        <member name="P:Troschuetz.Random.IBetaDistribution`1.Beta">
            <summary>
              Gets or sets the parameter beta which is used for generation of distributed random numbers.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.IBetaDistribution`1.IsValidBeta(`0)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.IBetaDistribution`1.Beta"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
              <see langword="true"/> if value is valid for parameter <see cref="P:Troschuetz.Random.IBetaDistribution`1.Beta"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Troschuetz.Random.IGammaDistribution`1">
            <summary>
              Models a distribution with a gamma parameter.
            </summary>
            <typeparam name="TNum">The numeric type of the parameter.</typeparam>
        </member>
        <member name="P:Troschuetz.Random.IGammaDistribution`1.Gamma">
            <summary>
              Gets or sets the parameter gamma which is used for generation of distributed random numbers.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.IGammaDistribution`1.IsValidGamma(`0)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.IGammaDistribution`1.Gamma"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
              <see langword="true"/> if value is valid for parameter <see cref="P:Troschuetz.Random.IGammaDistribution`1.Gamma"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Troschuetz.Random.ILambdaDistribution`1">
            <summary>
              Models a distribution with a lambda parameter.
            </summary>
            <typeparam name="TNum">The numeric type of the parameter.</typeparam>
        </member>
        <member name="P:Troschuetz.Random.ILambdaDistribution`1.Lambda">
            <summary>
              Gets or sets the parameter lambda which is used for generation of distributed random numbers.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.ILambdaDistribution`1.IsValidLambda(`0)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.ILambdaDistribution`1.Lambda"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
              <see langword="true"/> if value is valid for parameter <see cref="P:Troschuetz.Random.ILambdaDistribution`1.Lambda"/>;
              otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Troschuetz.Random.IMuDistribution`1">
            <summary>
              Models a distribution with a mu parameter.
            </summary>
            <typeparam name="TNum">The numeric type of the parameter.</typeparam>
        </member>
        <member name="P:Troschuetz.Random.IMuDistribution`1.Mu">
            <summary>
              Gets or sets the parameter mu which is used for generation of distributed random numbers.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.IMuDistribution`1.IsValidMu(`0)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.IMuDistribution`1.Mu"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
              <see langword="true"/> if value is valid for parameter <see cref="P:Troschuetz.Random.IMuDistribution`1.Mu"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Troschuetz.Random.INuDistribution`1">
            <summary>
              Models a distribution with a nu parameter.
            </summary>
            <typeparam name="TNum">The numeric type of the parameter.</typeparam>
        </member>
        <member name="P:Troschuetz.Random.INuDistribution`1.Nu">
            <summary>
              Gets or sets the parameter nu which is used for generation of distributed random numbers.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.INuDistribution`1.IsValidNu(`0)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.INuDistribution`1.Nu"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
              <see langword="true"/> if value is valid for parameter <see cref="P:Troschuetz.Random.INuDistribution`1.Nu"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Troschuetz.Random.ISigmaDistribution`1">
            <summary>
              Models a distribution with a sigma parameter.
            </summary>
            <typeparam name="TNum">The numeric type of the parameter.</typeparam>
        </member>
        <member name="P:Troschuetz.Random.ISigmaDistribution`1.Sigma">
            <summary>
              Gets or sets the parameter sigma which is used for generation of distributed random numbers.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.ISigmaDistribution`1.IsValidSigma(`0)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.ISigmaDistribution`1.Sigma"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
              <see langword="true"/> if value is valid for parameter <see cref="P:Troschuetz.Random.ISigmaDistribution`1.Sigma"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Troschuetz.Random.IThetaDistribution`1">
            <summary>
              Models a distribution with a theta parameter.
            </summary>
            <typeparam name="TNum">The numeric type of the parameter.</typeparam>
        </member>
        <member name="P:Troschuetz.Random.IThetaDistribution`1.Theta">
            <summary>
              Gets or sets the parameter theta which is used for generation of distributed random numbers.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.IThetaDistribution`1.IsValidTheta(`0)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.IThetaDistribution`1.Theta"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
              <see langword="true"/> if value is valid for parameter <see cref="P:Troschuetz.Random.IThetaDistribution`1.Theta"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Troschuetz.Random.IWeightsDistribution`1">
            <summary>
              Models a distribution with a weights parameter.
            </summary>
            <typeparam name="T">The numeric type of the parameter.</typeparam>
        </member>
        <member name="P:Troschuetz.Random.IWeightsDistribution`1.Weights">
            <summary>
              Gets or sets the parameter weights which is used for generation of distributed random numbers.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.IWeightsDistribution`1.AreValidWeights(System.Collections.Generic.IEnumerable{`0})">
            <summary>
              Determines whether specified values are valid for parameter <see cref="P:Troschuetz.Random.IWeightsDistribution`1.Weights"/>.
            </summary>
            <param name="values">The values to check.</param>
            <returns>
              <see langword="true"/> if value is valid for parameter <see cref="P:Troschuetz.Random.IWeightsDistribution`1.Weights"/>;
              otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Troschuetz.Random.IGenerator">
            <summary>
              Declares common functionalities for all random number generators.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.IGenerator.Seed">
            <summary>
              The seed value used by the generator.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.IGenerator.CanReset">
            <summary>
              Gets a value indicating whether the random number generator can be reset, so that it
              produces the same random number sequence again.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.IGenerator.Reset">
            <summary>
              Resets the random number generator using the initial seed, so that it produces the
              same random number sequence again. To understand whether this generator can be reset,
              you can query the <see cref="P:Troschuetz.Random.IGenerator.CanReset"/> property.
            </summary>
            <returns>True if the random number generator was reset; otherwise, false.</returns>
        </member>
        <member name="M:Troschuetz.Random.IGenerator.Reset(System.UInt32)">
            <summary>
              Resets the random number generator using the specified seed, so that it produces the
              same random number sequence again. To understand whether this generator can be reset,
              you can query the <see cref="P:Troschuetz.Random.IGenerator.CanReset"/> property.
            </summary>
            <param name="seed">The seed value used by the generator.</param>
            <returns>True if the random number generator was reset; otherwise, false.</returns>
        </member>
        <member name="M:Troschuetz.Random.IGenerator.Next">
            <summary>
              Returns a nonnegative random number less than <see cref="F:System.Int32.MaxValue"/>.
            </summary>
            <returns>
              A 32-bit signed integer greater than or equal to 0, and less than
              <see cref="F:System.Int32.MaxValue"/>; that is, the range of return values includes 0 but not <see cref="F:System.Int32.MaxValue"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.IGenerator.NextInclusiveMaxValue">
            <summary>
              Returns a nonnegative random number less than or equal to <see cref="F:System.Int32.MaxValue"/>.
            </summary>
            <returns>
              A 32-bit signed integer greater than or equal to 0, and less than or equal to
              <see cref="F:System.Int32.MaxValue"/>; that is, the range of return values includes 0 and <see cref="F:System.Int32.MaxValue"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.IGenerator.Next(System.Int32)">
            <summary>
              Returns a nonnegative random number less than the specified maximum.
            </summary>
            <param name="maxValue">The exclusive upper bound of the random number to be generated.</param>
            <returns>
              A 32-bit signed integer greater than or equal to 0, and less than
              <paramref name="maxValue"/>; that is, the range of return values includes 0 but not <paramref name="maxValue"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="maxValue"/> must be greater than or equal to 0.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.IGenerator.Next(System.Int32,System.Int32)">
            <summary>
              Returns a random number within the specified range.
            </summary>
            <param name="minValue">The inclusive lower bound of the random number to be generated.</param>
            <param name="maxValue">
              The exclusive upper bound of the random number to be generated.
              <paramref name="maxValue"/> must be greater than or equal to <paramref name="minValue"/>.
            </param>
            <returns>
              A 32-bit signed integer greater than or equal to <paramref name="minValue"/>, and less
              than <paramref name="maxValue"/>; that is, the range of return values includes
              <paramref name="minValue"/> but not <paramref name="maxValue"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="maxValue"/> must be greater than or equal to <paramref name="minValue"/>.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.IGenerator.NextDouble">
            <summary>
              Returns a nonnegative floating point random number less than 1.0.
            </summary>
            <returns>
              A double-precision floating point number greater than or equal to 0.0, and less than
              1.0; that is, the range of return values includes 0.0 but not 1.0.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.IGenerator.NextDouble(System.Double)">
            <summary>
              Returns a nonnegative floating point random number less than the specified maximum.
            </summary>
            <param name="maxValue">The exclusive upper bound of the random number to be generated.</param>
            <returns>
              A double-precision floating point number greater than or equal to 0.0, and less than
              <paramref name="maxValue"/>; that is, the range of return values includes 0 but not <paramref name="maxValue"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="maxValue"/> must be greater than or equal to 0.0.
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="maxValue"/> cannot be <see cref="F:System.Double.PositiveInfinity"/>.</exception>
        </member>
        <member name="M:Troschuetz.Random.IGenerator.NextDouble(System.Double,System.Double)">
            <summary>
              Returns a floating point random number within the specified range.
            </summary>
            <param name="minValue">The inclusive lower bound of the random number to be generated.</param>
            <param name="maxValue">The exclusive upper bound of the random number to be generated.</param>
            <returns>
              A double-precision floating point number greater than or equal to
              <paramref name="minValue"/>, and less than <paramref name="maxValue"/>; that is, the
              range of return values includes <paramref name="minValue"/> but not <paramref name="maxValue"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="maxValue"/> must be greater than or equal to <paramref name="minValue"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              The difference between <paramref name="maxValue"/> and <paramref name="minValue"/>
              cannot be <see cref="F:System.Double.PositiveInfinity"/>.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.IGenerator.NextUInt">
            <summary>
              Returns an unsigned random number.
            </summary>
            <returns>
              A 32-bit unsigned integer greater than or equal to <see cref="F:System.UInt32.MinValue"/> and
              less than or equal to <see cref="F:System.UInt32.MaxValue"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.IGenerator.NextUIntExclusiveMaxValue">
            <summary>
              Returns an unsigned random number less than <see cref="F:System.UInt32.MaxValue"/>.
            </summary>
            <returns>
              A 32-bit unsigned integer greater than or equal to <see cref="F:System.UInt32.MinValue"/> and
              less than <see cref="F:System.UInt32.MaxValue"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.IGenerator.NextUInt(System.UInt32)">
            <summary>
              Returns an unsigned random number less than the specified maximum.
            </summary>
            <param name="maxValue">The exclusive upper bound of the random number to be generated.</param>
            <returns>
              A 32-bit unsigned integer greater than or equal to <see cref="F:System.UInt32.MinValue"/> and
              less than <paramref name="maxValue"/>; that is, the range of return values includes
              <see cref="F:System.UInt32.MinValue"/> but not <paramref name="maxValue"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.IGenerator.NextUInt(System.UInt32,System.UInt32)">
            <summary>
              Returns an unsigned random number within the specified range.
            </summary>
            <param name="minValue">The inclusive lower bound of the random number to be generated.</param>
            <param name="maxValue">The exclusive upper bound of the random number to be generated.</param>
            <returns>
              A 32-bit unsigned integer greater than or equal to <paramref name="minValue"/> and
              less than <paramref name="maxValue"/>; that is, the range of return values includes
              <paramref name="minValue"/> but not <paramref name="maxValue"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="maxValue"/> must be greater than or equal to <paramref name="minValue"/>.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.IGenerator.NextBoolean">
            <summary>
              Returns a random Boolean value.
            </summary>
            <remarks>
              Buffers 31 random bits for future calls, so the random number generator is only
              invoked once in every 31 calls.
            </remarks>
            <returns>A <see cref="T:System.Boolean"/> value.</returns>
        </member>
        <member name="M:Troschuetz.Random.IGenerator.NextBytes(System.Byte[])">
            <summary>
              Fills the elements of a specified array of bytes with random numbers.
            </summary>
            <remarks>
              Each element of the array of bytes is set to a random number greater than or equal to
              0, and less than or equal to <see cref="F:System.Byte.MaxValue"/>.
            </remarks>
            <param name="buffer">An array of bytes to contain random numbers.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is null.</exception>
        </member>
        <member name="T:Troschuetz.Random.TMath">
            <summary>
              Simple math utilities used inside the library. They are also public, should you need them
              for custom generators and distributions.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.TMath.Tolerance">
            <summary>
              The delta used when comparing doubles.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.TMath.IsZero(System.Double)">
            <summary>
              Safely checks if given double is zero.
            </summary>
            <param name="d">A double.</param>
            <returns>True if given double is near zero, false otherwise.</returns>
        </member>
        <member name="M:Troschuetz.Random.TMath.AreEqual(System.Double,System.Double)">
            <summary>
              Safely checks if given doubles are equal.
            </summary>
            <param name="d1">A double.</param>
            <param name="d2">A double.</param>
            <returns>True if given doubles are safely equal, false otherwise.</returns>
        </member>
        <member name="M:Troschuetz.Random.TMath.Square(System.Double)">
            <summary>
              Fast square power.
            </summary>
            <param name="d">A double.</param>
            <returns>The square of given double.</returns>
        </member>
        <member name="M:Troschuetz.Random.TMath.Seed">
            <summary>
              Generates a new seed, using all information available, including time.
            </summary>
        </member>
        <member name="T:Troschuetz.Random.TRandom">
            <summary>
              A random generator class similar to the one Python offers, providing functions similar to
              the ones found in <see cref="T:System.Random"/> and functions returning random numbers
              according to a particular kind of distribution.
            </summary>
            <remarks>
              The thread safety of this class depends on the one of the underlying generator.
            </remarks>
        </member>
        <member name="P:Troschuetz.Random.TRandom.Generator">
            <summary>
              The generator used by <see cref="T:Troschuetz.Random.TRandom"/>.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.TRandom.#ctor">
            <summary>
              Constructs a new instance with <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> as underlying generator
              and the default seed (which corresponds to <see cref="M:Troschuetz.Random.TMath.Seed"/>).
            </summary>
        </member>
        <member name="M:Troschuetz.Random.TRandom.#ctor(System.Int32)">
            <summary>
              Constructs a new instance with <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> as underlying generator
              and the specified seed.
            </summary>
            <param name="seed">The seed used to initialize the generator.</param>
        </member>
        <member name="M:Troschuetz.Random.TRandom.#ctor(System.UInt32)">
            <summary>
              Constructs a new instance with <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> as underlying generator
              and the specified seed.
            </summary>
            <param name="seed">The seed used to initialize the generator.</param>
        </member>
        <member name="M:Troschuetz.Random.TRandom.#ctor(Troschuetz.Random.IGenerator)">
            <summary>
              Constructs a new instance with the specified generator.
            </summary>
            <param name="generator">The generator used to produce random numbers.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is null.</exception>
        </member>
        <member name="M:Troschuetz.Random.TRandom.New">
            <summary>
              Constructs a new instance with <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> as underlying generator
              and the default seed (which corresponds to <see cref="M:Troschuetz.Random.TMath.Seed"/>).
            </summary>
        </member>
        <member name="M:Troschuetz.Random.TRandom.New(System.Int32)">
            <summary>
              Constructs a new instance with <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> as underlying generator
              and the specified seed.
            </summary>
            <param name="seed">The seed used to initialize the generator.</param>
        </member>
        <member name="M:Troschuetz.Random.TRandom.New(System.UInt32)">
            <summary>
              Constructs a new instance with <see cref="T:Troschuetz.Random.Generators.XorShift128Generator"/> as underlying generator
              and the specified seed.
            </summary>
            <param name="seed">The seed used to initialize the generator.</param>
        </member>
        <member name="M:Troschuetz.Random.TRandom.New(Troschuetz.Random.IGenerator)">
            <summary>
              Constructs a new instance with the specified generator.
            </summary>
            <param name="generator">The generator used to produce random numbers.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is null.</exception>
        </member>
        <member name="M:Troschuetz.Random.TRandom.Bernoulli(System.Double)">
            <summary>
              Returns a bernoulli distributed 32-bit signed integer.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of bernoulli distributed random numbers.
            </param>
            <returns>A bernoulli distributed 32-bit signed integer.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is less than zero or greater than one.
            </exception>
            <remarks>
              This method simply wraps a call to <see cref="M:Troschuetz.Random.Distributions.Discrete.BernoulliDistribution.Next"/>, with a
              prior check of the distribution parameters.
            </remarks>
            <remarks>
              If you absolutely need the best performance, you may consider using an instance of
              <see cref="T:Troschuetz.Random.Distributions.Discrete.BernoulliDistribution"/> for each group of parameters.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.TRandom.BernoulliSamples(System.Double)">
            <summary>
              Returns an infinite sequence of bernoulli distributed 32-bit signed integers.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of bernoulli distributed random numbers.
            </param>
            <returns>An infinite sequence of bernoulli distributed 32-bit signed integers.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is less than zero or greater than one.
            </exception>
            <remarks>
              This method simply wraps a call to <see cref="M:Troschuetz.Random.Distributions.Discrete.BernoulliDistribution.Next"/>, with a
              prior check of the distribution parameters.
            </remarks>
            <remarks>
              If you absolutely need the best performance, you may consider using an instance of
              <see cref="T:Troschuetz.Random.Distributions.Discrete.BernoulliDistribution"/> for each group of parameters.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.TRandom.Binomial(System.Double,System.Int32)">
            <summary>
              Returns a binomial distributed 32-bit signed integer.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of binomial distributed random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of binomial distributed random numbers.
            </param>
            <returns>A binomial distributed 32-bit signed integer.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is less than zero or greater than one, or
              <paramref name="beta"/> is less than zero.
            </exception>
            <remarks>
              This method simply wraps a call to <see cref="M:Troschuetz.Random.Distributions.Discrete.BinomialDistribution.Next"/>, with a
              prior check of the distribution parameters.
            </remarks>
            <remarks>
              If you absolutely need the best performance, you may consider using an instance of
              <see cref="T:Troschuetz.Random.Distributions.Discrete.BinomialDistribution"/> for each group of parameters.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.TRandom.BinomialSamples(System.Double,System.Int32)">
            <summary>
              Returns an infinite sequence of binomial distributed 32-bit signed integers.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of binomial distributed random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of binomial distributed random numbers.
            </param>
            <returns>An infinite sequence of binomial distributed 32-bit signed integers.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is less than zero or greater than one, or
              <paramref name="beta"/> is less than zero.
            </exception>
            <remarks>
              This method simply wraps a call to <see cref="M:Troschuetz.Random.Distributions.Discrete.BinomialDistribution.Next"/>, with a
              prior check of the distribution parameters.
            </remarks>
            <remarks>
              If you absolutely need the best performance, you may consider using an instance of
              <see cref="T:Troschuetz.Random.Distributions.Discrete.BinomialDistribution"/> for each group of parameters.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.TRandom.Categorical(System.Int32)">
            <summary>
              Returns a categorical distributed 32-bit signed integer.
            </summary>
            <param name="valueCount">
              The parameter valueCount which is used for generation of binomial distributed random
              numbers by setting the number of equi-distributed "weights" the distribution will have.
            </param>
            <returns>A categorical distributed 32-bit signed integer.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="valueCount"/> is less than or equal to zero.
            </exception>
            <remarks>
              This method simply wraps a call to <see cref="M:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution.Next"/>, with a
              prior check of the distribution parameters.
            </remarks>
            <remarks>
              If you absolutely need the best performance, you may consider using an instance of
              <see cref="T:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution"/> for each group of parameters.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.TRandom.CategoricalSamples(System.Int32)">
            <summary>
              Returns an infinite sequence of categorical distributed 32-bit signed integers.
            </summary>
            <param name="valueCount">
              The parameter valueCount which is used for generation of binomial distributed random
              numbers by setting the number of equi-distributed "weights" the distribution will have.
            </param>
            <returns>An infinite sequence of categorical distributed 32-bit signed integers.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="valueCount"/> is less than or equal to zero.
            </exception>
            <remarks>
              This method simply wraps a call to <see cref="M:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution.Next"/>, with a
              prior check of the distribution parameters.
            </remarks>
            <remarks>
              If you absolutely need the best performance, you may consider using an instance of
              <see cref="T:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution"/> for each group of parameters.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.TRandom.Categorical(System.Collections.Generic.ICollection{System.Double})">
            <summary>
              Returns a categorical distributed 32-bit signed integer.
            </summary>
            <param name="weights">
              An enumerable of nonnegative weights: this enumerable does not need to be normalized
              as this is often impossible using floating point arithmetic.
            </param>
            <returns>A categorical distributed 32-bit signed integer.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="weights"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="weights"/> is empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              Any of the weights in <paramref name="weights"/> are negative or they sum to zero.
            </exception>
            <remarks>
              This method simply wraps a call to <see cref="M:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution.Next"/>, with a
              prior check of the distribution parameters.
            </remarks>
            <remarks>
              If you absolutely need the best performance, you may consider using an instance of
              <see cref="T:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution"/> for each group of parameters.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.TRandom.CategoricalSamples(System.Collections.Generic.ICollection{System.Double})">
            <summary>
              Returns an infinite sequence of categorical distributed 32-bit signed integers.
            </summary>
            <param name="weights">
              An enumerable of nonnegative weights: this enumerable does not need to be normalized
              as this is often impossible using floating point arithmetic.
            </param>
            <returns>An infinite sequence of categorical distributed 32-bit signed integers.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="weights"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="weights"/> is empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              Any of the weights in <paramref name="weights"/> are negative or they sum to zero.
            </exception>
            <remarks>
              This method simply wraps a call to <see cref="M:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution.Next"/>, with a
              prior check of the distribution parameters.
            </remarks>
            <remarks>
              If you absolutely need the best performance, you may consider using an instance of
              <see cref="T:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution"/> for each group of parameters.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.TRandom.DiscreteUniform(System.Int32,System.Int32)">
            <summary>
              Returns a discrete uniform distributed 32-bit signed integer.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of discrete uniform distributed
              random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of discrete uniform distributed random numbers.
            </param>
            <returns>A discrete uniform distributed 32-bit signed integer.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is greater than <paramref name="beta"/>, or
              <paramref name="beta"/> is equal to <see cref="F:System.Int32.MaxValue"/>.
            </exception>
            <remarks>
              This method simply wraps a call to <see cref="M:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution.Next"/>,
              with a prior check of the distribution parameters.
            </remarks>
            <remarks>
              If you absolutely need the best performance, you may consider using an instance of
              <see cref="T:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution"/> for each group of parameters.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.TRandom.DiscreteUniformSamples(System.Int32,System.Int32)">
            <summary>
              Returns an infinite sequence of discrete uniform distributed 32-bit signed integers.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of discrete uniform distributed
              random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of discrete uniform distributed random numbers.
            </param>
            <returns>
              An infinite sequence of discrete uniform distributed 32-bit signed integers.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is greater than <paramref name="beta"/>, or
              <paramref name="beta"/> is equal to <see cref="F:System.Int32.MaxValue"/>.
            </exception>
            <remarks>
              This method simply wraps a call to <see cref="M:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution.Next"/>,
              with a prior check of the distribution parameters.
            </remarks>
            <remarks>
              If you absolutely need the best performance, you may consider using an instance of
              <see cref="T:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution"/> for each group of parameters.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.TRandom.Geometric(System.Double)">
            <summary>
              Returns a geometric distributed 32-bit signed integer.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of geometric distributed random numbers.
            </param>
            <returns>A geometric distributed 32-bit signed integer.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is less than or equal to zero or it is greater than one.
            </exception>
            <remarks>
              This method simply wraps a call to <see cref="M:Troschuetz.Random.Distributions.Discrete.GeometricDistribution.Next"/>, with a
              prior check of the distribution parameters.
            </remarks>
            <remarks>
              If you absolutely need the best performance, you may consider using an instance of
              <see cref="T:Troschuetz.Random.Distributions.Discrete.GeometricDistribution"/> for each group of parameters.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.TRandom.GeometricSamples(System.Double)">
            <summary>
              Returns an infinite sequence of geometric distributed 32-bit signed integers.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of geometric distributed random numbers.
            </param>
            <returns>An infinite sequence of geometric distributed 32-bit signed integers.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is less than or equal to zero or it is greater than one.
            </exception>
            <remarks>
              This method simply wraps a call to <see cref="M:Troschuetz.Random.Distributions.Discrete.GeometricDistribution.Next"/>, with a
              prior check of the distribution parameters.
            </remarks>
            <remarks>
              If you absolutely need the best performance, you may consider using an instance of
              <see cref="T:Troschuetz.Random.Distributions.Discrete.GeometricDistribution"/> for each group of parameters.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.TRandom.Poisson(System.Double)">
            <summary>
              Returns a poisson distributed 32-bit signed integer.
            </summary>
            <param name="lambda">
              The parameter lambda which is used for generation of poisson distributed random numbers.
            </param>
            <returns>A poisson distributed 32-bit signed integer.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="lambda"/> is less than or equal to zero.
            </exception>
            <remarks>
              This method simply wraps a call to <see cref="M:Troschuetz.Random.Distributions.Discrete.PoissonDistribution.Next"/>, with a
              prior check of the distribution parameters.
            </remarks>
            <remarks>
              If you absolutely need the best performance, you may consider using an instance of
              <see cref="T:Troschuetz.Random.Distributions.Discrete.PoissonDistribution"/> for each group of parameters.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.TRandom.PoissonSamples(System.Double)">
            <summary>
              Returns an infinite sequence of poisson distributed 32-bit signed integers.
            </summary>
            <param name="lambda">
              The parameter lambda which is used for generation of poisson distributed random numbers.
            </param>
            <returns>An infinite sequence of poisson distributed 32-bit signed integers.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="lambda"/> is less than or equal to zero.
            </exception>
            <remarks>
              This method simply wraps a call to <see cref="M:Troschuetz.Random.Distributions.Discrete.PoissonDistribution.Next"/>, with a
              prior check of the distribution parameters.
            </remarks>
            <remarks>
              If you absolutely need the best performance, you may consider using an instance of
              <see cref="T:Troschuetz.Random.Distributions.Discrete.PoissonDistribution"/> for each group of parameters.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.TRandom.Beta(System.Double,System.Double)">
            <summary>
              Returns a beta distributed floating point random number.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of beta distributed random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of beta distributed random numbers.
            </param>
            <returns>A beta distributed floating point random number.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> or <paramref name="beta"/> are less than or equal to zero.
            </exception>
            <remarks>
              This method simply wraps a call to <see cref="P:Troschuetz.Random.Distributions.Continuous.BetaDistribution.Sample"/>, with a prior
              check of the distribution parameters.
            </remarks>
            <remarks>
              If you absolutely need the best performance, you may consider using an instance of
              <see cref="T:Troschuetz.Random.Distributions.Continuous.BetaDistribution"/> for each group of parameters.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.TRandom.BetaSamples(System.Double,System.Double)">
            <summary>
              Returns an infinite sequence of beta distributed floating point random numbers.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of beta distributed random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of beta distributed random numbers.
            </param>
            <returns>An infinite sequence of beta distributed floating point random numbers.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> or <paramref name="beta"/> are less than or equal to zero.
            </exception>
            <remarks>
              This method simply wraps a call to <see cref="P:Troschuetz.Random.Distributions.Continuous.BetaDistribution.Sample"/>, with a prior
              check of the distribution parameters.
            </remarks>
            <remarks>
              If you absolutely need the best performance, you may consider using an instance of
              <see cref="T:Troschuetz.Random.Distributions.Continuous.BetaDistribution"/> for each group of parameters.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.TRandom.BetaPrime(System.Double,System.Double)">
            <summary>
              Returns a beta prime distributed floating point random number.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of beta prime distributed random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of beta prime distributed random numbers.
            </param>
            <returns>A beta prime distributed floating point random number.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> or <paramref name="beta"/> are less than or equal to one.
            </exception>
            <remarks>
              This method simply wraps a call to <see cref="P:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution.Sample"/>, with a
              prior check of the distribution parameters.
            </remarks>
            <remarks>
              If you absolutely need the best performance, you may consider using an instance of
              <see cref="T:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution"/> for each group of parameters.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.TRandom.BetaPrimeSamples(System.Double,System.Double)">
            <summary>
              Returns an infinite sequence of beta prime distributed floating point random numbers.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of beta prime distributed random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of beta prime distributed random numbers.
            </param>
            <returns>
              An infinite sequence of beta prime distributed floating point random numbers.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> or <paramref name="beta"/> are less than or equal to one.
            </exception>
            <remarks>
              This method simply wraps a call to <see cref="P:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution.Sample"/>, with a
              prior check of the distribution parameters.
            </remarks>
            <remarks>
              If you absolutely need the best performance, you may consider using an instance of
              <see cref="T:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution"/> for each group of parameters.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.TRandom.Cauchy(System.Double,System.Double)">
            <summary>
              Returns a cauchy distributed floating point random number.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of cauchy distributed random numbers.
            </param>
            <param name="gamma">
              The parameter gamma which is used for generation of cauchy distributed random numbers.
            </param>
            <returns>A cauchy distributed floating point random number.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="gamma"/> is less than or equal to zero.
            </exception>
            <remarks>
              This method simply wraps a call to <see cref="P:Troschuetz.Random.Distributions.Continuous.CauchyDistribution.Sample"/>, with a
              prior check of the distribution parameters.
            </remarks>
            <remarks>
              If you absolutely need the best performance, you may consider using an instance of
              <see cref="T:Troschuetz.Random.Distributions.Continuous.CauchyDistribution"/> for each group of parameters.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.TRandom.CauchySamples(System.Double,System.Double)">
            <summary>
              Returns an infinite sequence of cauchy distributed floating point random numbers.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of cauchy distributed random numbers.
            </param>
            <param name="gamma">
              The parameter gamma which is used for generation of cauchy distributed random numbers.
            </param>
            <returns>An infinite sequence of cauchy distributed floating point random numbers.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="gamma"/> is less than or equal to zero.
            </exception>
            <remarks>
              This method simply wraps a call to <see cref="P:Troschuetz.Random.Distributions.Continuous.CauchyDistribution.Sample"/>, with a
              prior check of the distribution parameters.
            </remarks>
            <remarks>
              If you absolutely need the best performance, you may consider using an instance of
              <see cref="T:Troschuetz.Random.Distributions.Continuous.CauchyDistribution"/> for each group of parameters.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.TRandom.Chi(System.Int32)">
            <summary>
              Returns a chi distributed floating point random number.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of chi distributed random numbers.
            </param>
            <returns>A chi distributed floating point random number.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is less than or equal to zero.
            </exception>
            <remarks>
              This method simply wraps a call to <see cref="P:Troschuetz.Random.Distributions.Continuous.ChiDistribution.Sample"/>, with a prior
              check of the distribution parameters.
            </remarks>
            <remarks>
              If you absolutely need the best performance, you may consider using an instance of
              <see cref="T:Troschuetz.Random.Distributions.Continuous.ChiDistribution"/> for each group of parameters.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.TRandom.ChiSamples(System.Int32)">
            <summary>
              Returns an infinite sequence of chi distributed floating point random numbers.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of chi distributed random numbers.
            </param>
            <returns>An infinite sequence of chi distributed floating point random numbers.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is less than or equal to zero.
            </exception>
            <remarks>
              This method simply wraps a call to <see cref="P:Troschuetz.Random.Distributions.Continuous.ChiDistribution.Sample"/>, with a prior
              check of the distribution parameters.
            </remarks>
            <remarks>
              If you absolutely need the best performance, you may consider using an instance of
              <see cref="T:Troschuetz.Random.Distributions.Continuous.ChiDistribution"/> for each group of parameters.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.TRandom.ChiSquare(System.Int32)">
            <summary>
              Returns a chi square distributed floating point random number.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of chi square distributed random numbers.
            </param>
            <returns>A chi square distributed floating point random number.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is less than or equal to zero.
            </exception>
            <remarks>
              This method simply wraps a call to <see cref="P:Troschuetz.Random.Distributions.Continuous.ChiSquareDistribution.Sample"/>, with a
              prior check of the distribution parameters.
            </remarks>
            <remarks>
              If you absolutely need the best performance, you may consider using an instance of
              <see cref="T:Troschuetz.Random.Distributions.Continuous.ChiSquareDistribution"/> for each group of parameters.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.TRandom.ChiSquareSamples(System.Int32)">
            <summary>
              Returns an infinite sequence of chi square distributed floating point random numbers.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of chi square distributed random numbers.
            </param>
            <returns>
              An infinite sequence of chi square distributed floating point random numbers.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is less than or equal to zero.
            </exception>
            <remarks>
              This method simply wraps a call to <see cref="P:Troschuetz.Random.Distributions.Continuous.ChiSquareDistribution.Sample"/>, with a
              prior check of the distribution parameters.
            </remarks>
            <remarks>
              If you absolutely need the best performance, you may consider using an instance of
              <see cref="T:Troschuetz.Random.Distributions.Continuous.ChiSquareDistribution"/> for each group of parameters.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.TRandom.ContinuousUniform(System.Double,System.Double)">
            <summary>
              Returns a continuous uniform distributed floating point random number.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of continuous uniform distributed
              random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of continuous uniform distributed
              random numbers.
            </param>
            <returns>A continuous uniform distributed floating point random number.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is greater than <paramref name="beta"/>.
            </exception>
            <remarks>
              This method simply wraps a call to <see cref="P:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution.Sample"/>,
              with a prior check of the distribution parameters.
            </remarks>
            <remarks>
              If you absolutely need the best performance, you may consider using an instance of
              <see cref="T:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution"/> for each group of parameters.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.TRandom.ContinuousUniformSamples(System.Double,System.Double)">
            <summary>
              Returns an infinite sequence of continuous uniform distributed floating point random numbers.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of continuous uniform distributed
              random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of continuous uniform distributed
              random numbers.
            </param>
            <returns>
              An infinite sequence of continuous uniform distributed floating point random numbers.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is greater than <paramref name="beta"/>.
            </exception>
            <remarks>
              This method simply wraps a call to <see cref="P:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution.Sample"/>,
              with a prior check of the distribution parameters.
            </remarks>
            <remarks>
              If you absolutely need the best performance, you may consider using an instance of
              <see cref="T:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution"/> for each group of parameters.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.TRandom.Erlang(System.Int32,System.Double)">
            <summary>
              Returns an erlang distributed floating point random number.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of erlang distributed random numbers.
            </param>
            <param name="lambda">
              The parameter lambda which is used for generation of erlang distributed random numbers.
            </param>
            <returns>An erlang distributed floating point random number.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> or <paramref name="lambda"/> are less than or equal to zero.
            </exception>
            <remarks>
              This method simply wraps a call to <see cref="P:Troschuetz.Random.Distributions.Continuous.ErlangDistribution.Sample"/>, with a
              prior check of the distribution parameters.
            </remarks>
            <remarks>
              If you absolutely need the best performance, you may consider using an instance of
              <see cref="T:Troschuetz.Random.Distributions.Continuous.ErlangDistribution"/> for each group of parameters.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.TRandom.ErlangSamples(System.Int32,System.Double)">
            <summary>
              Returns an infinite sequence of erlang distributed floating point random numbers.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of erlang distributed random numbers.
            </param>
            <param name="lambda">
              The parameter lambda which is used for generation of erlang distributed random numbers.
            </param>
            <returns>An infinite sequence of erlang distributed floating point random numbers.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> or <paramref name="lambda"/> are less than or equal to zero.
            </exception>
            <remarks>
              This method simply wraps a call to <see cref="P:Troschuetz.Random.Distributions.Continuous.ErlangDistribution.Sample"/>, with a
              prior check of the distribution parameters.
            </remarks>
            <remarks>
              If you absolutely need the best performance, you may consider using an instance of
              <see cref="T:Troschuetz.Random.Distributions.Continuous.ErlangDistribution"/> for each group of parameters.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.TRandom.Exponential(System.Double)">
            <summary>
              Returns an exponential distributed floating point random number.
            </summary>
            <param name="lambda">
              The parameter lambda which is used for generation of exponential distributed random numbers.
            </param>
            <returns>An exponential distributed floating point random number.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="lambda"/> is less than or equal to zero.
            </exception>
            <remarks>
              This method simply wraps a call to <see cref="P:Troschuetz.Random.Distributions.Continuous.ExponentialDistribution.Sample"/>, with
              a prior check of the distribution parameters.
            </remarks>
            <remarks>
              If you absolutely need the best performance, you may consider using an instance of
              <see cref="T:Troschuetz.Random.Distributions.Continuous.ExponentialDistribution"/> for each group of parameters.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.TRandom.ExponentialSamples(System.Double)">
            <summary>
              Returns an infinite sequence of exponential distributed floating point random numbers.
            </summary>
            <param name="lambda">
              The parameter lambda which is used for generation of exponential distributed random numbers.
            </param>
            <returns>
              An infinite sequence of exponential distributed floating point random numbers.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="lambda"/> is less than or equal to zero.
            </exception>
            <remarks>
              This method simply wraps a call to <see cref="P:Troschuetz.Random.Distributions.Continuous.ExponentialDistribution.Sample"/>, with
              a prior check of the distribution parameters.
            </remarks>
            <remarks>
              If you absolutely need the best performance, you may consider using an instance of
              <see cref="T:Troschuetz.Random.Distributions.Continuous.ExponentialDistribution"/> for each group of parameters.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.TRandom.FisherSnedecor(System.Int32,System.Int32)">
            <summary>
              Returns a fisher snedecor distributed floating point random number.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of fisher snedecor distributed random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of fisher snedecor distributed random numbers.
            </param>
            <returns>A fisher snedecor distributed floating point random number.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> or <paramref name="beta"/> are less than or equal to zero.
            </exception>
            <remarks>
              This method simply wraps a call to <see cref="P:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution.Sample"/>,
              with a prior check of the distribution parameters.
            </remarks>
            <remarks>
              If you absolutely need the best performance, you may consider using an instance of
              <see cref="T:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution"/> for each group of parameters.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.TRandom.FisherSnedecorSamples(System.Int32,System.Int32)">
            <summary>
              Returns an infinite sequence of fisher snedecor distributed floating point random numbers.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of fisher snedecor distributed random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of fisher snedecor distributed random numbers.
            </param>
            <returns>
              An infinite sequence of fisher snedecor distributed floating point random numbers.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> or <paramref name="beta"/> are less than or equal to zero.
            </exception>
            <remarks>
              This method simply wraps a call to <see cref="P:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution.Sample"/>,
              with a prior check of the distribution parameters.
            </remarks>
            <remarks>
              If you absolutely need the best performance, you may consider using an instance of
              <see cref="T:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution"/> for each group of parameters.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.TRandom.FisherTippett(System.Double,System.Double)">
            <summary>
              Returns a fisher tippett distributed floating point random number.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of fisher tippett distributed random numbers.
            </param>
            <param name="mu">
              The parameter mu which is used for generation of fisher tippett distributed random numbers.
            </param>
            <returns>A fisher tippett distributed floating point random number.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is less than or equal to zero.
            </exception>
            <remarks>
              This method simply wraps a call to <see cref="P:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution.Sample"/>,
              with a prior check of the distribution parameters.
            </remarks>
            <remarks>
              If you absolutely need the best performance, you may consider using an instance of
              <see cref="T:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution"/> for each group of parameters.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.TRandom.FisherTippettSamples(System.Double,System.Double)">
            <summary>
              Returns an infinite sequence of fisher tippett distributed floating point random numbers.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of fisher tippett distributed random numbers.
            </param>
            <param name="mu">
              The parameter mu which is used for generation of fisher tippett distributed random numbers.
            </param>
            <returns>
              An infinite sequence of fisher tippett distributed floating point random numbers.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is less than or equal to zero.
            </exception>
            <remarks>
              This method simply wraps a call to <see cref="P:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution.Sample"/>,
              with a prior check of the distribution parameters.
            </remarks>
            <remarks>
              If you absolutely need the best performance, you may consider using an instance of
              <see cref="T:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution"/> for each group of parameters.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.TRandom.Gamma(System.Double,System.Double)">
            <summary>
              Returns a gamma distributed floating point random number.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of gamma distributed random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of gamma distributed random numbers.
            </param>
            <returns>A gamma distributed floating point random number.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> or <paramref name="beta"/> are less than or equal to zero.
            </exception>
            <remarks>
              This method simply wraps a call to <see cref="P:Troschuetz.Random.Distributions.Continuous.GammaDistribution.Sample"/>, with a
              prior check of the distribution parameters.
            </remarks>
            <remarks>
              If you absolutely need the best performance, you may consider using an instance of
              <see cref="T:Troschuetz.Random.Distributions.Continuous.GammaDistribution"/> for each group of parameters.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.TRandom.GammaSamples(System.Double,System.Double)">
            <summary>
              Returns an infinite sequence of gamma distributed floating point random numbers.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of gamma distributed random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of gamma distributed random numbers.
            </param>
            <returns>An infinite sequence of gamma distributed floating point random numbers.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> or <paramref name="beta"/> are less than or equal to zero.
            </exception>
            <remarks>
              This method simply wraps a call to <see cref="P:Troschuetz.Random.Distributions.Continuous.GammaDistribution.Sample"/>, with a
              prior check of the distribution parameters.
            </remarks>
            <remarks>
              If you absolutely need the best performance, you may consider using an instance of
              <see cref="T:Troschuetz.Random.Distributions.Continuous.GammaDistribution"/> for each group of parameters.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.TRandom.Laplace(System.Double,System.Double)">
            <summary>
              Returns a laplace distributed floating point random number.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of laplace distributed random numbers.
            </param>
            <param name="mu">
              The parameter mu which is used for generation of laplace distributed random numbers.
            </param>
            <returns>A laplace distributed floating point random number.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is less than or equal to zero.
            </exception>
            <remarks>
              This method simply wraps a call to <see cref="P:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution.Sample"/>, with a
              prior check of the distribution parameters.
            </remarks>
            <remarks>
              If you absolutely need the best performance, you may consider using an instance of
              <see cref="T:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution"/> for each group of parameters.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.TRandom.LaplaceSamples(System.Double,System.Double)">
            <summary>
              Returns an infinite sequence of laplace distributed floating point random numbers.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of laplace distributed random numbers.
            </param>
            <param name="mu">
              The parameter mu which is used for generation of laplace distributed random numbers.
            </param>
            <returns>An infinite sequence of laplace distributed floating point random numbers.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is less than or equal to zero.
            </exception>
            <remarks>
              This method simply wraps a call to <see cref="P:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution.Sample"/>, with a
              prior check of the distribution parameters.
            </remarks>
            <remarks>
              If you absolutely need the best performance, you may consider using an instance of
              <see cref="T:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution"/> for each group of parameters.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.TRandom.Logistic(System.Double,System.Double)">
            <summary>
              Returns a logistic distributed floating point random number.
            </summary>
            <param name="mu">
              The parameter mu which is used for generation of logistic distributed random numbers.
            </param>
            <param name="sigma">
              The parameter sigma which is used for generation of logistic distributed random numbers.
            </param>
            <returns>A logistic distributed floating point random number.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="sigma"/> is less than or equal to zero.
            </exception>
            <remarks>
              This method simply wraps a call to <see cref="P:Troschuetz.Random.Distributions.Continuous.LogisticDistribution.Sample"/>, with a
              prior check of the distribution parameters.
            </remarks>
            <remarks>
              If you absolutely need the best performance, you may consider using an instance of
              <see cref="T:Troschuetz.Random.Distributions.Continuous.LogisticDistribution"/> for each group of parameters.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.TRandom.LogisticSamples(System.Double,System.Double)">
            <summary>
              Returns an infinite sequence of logistic distributed floating point random numbers.
            </summary>
            <param name="mu">
              The parameter mu which is used for generation of logistic distributed random numbers.
            </param>
            <param name="sigma">
              The parameter sigma which is used for generation of logistic distributed random numbers.
            </param>
            <returns>
              An infinite sequence of logistic distributed floating point random numbers.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="sigma"/> is less than or equal to zero.
            </exception>
            <remarks>
              This method simply wraps a call to <see cref="P:Troschuetz.Random.Distributions.Continuous.LogisticDistribution.Sample"/>, with a
              prior check of the distribution parameters.
            </remarks>
            <remarks>
              If you absolutely need the best performance, you may consider using an instance of
              <see cref="T:Troschuetz.Random.Distributions.Continuous.LogisticDistribution"/> for each group of parameters.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.TRandom.Lognormal(System.Double,System.Double)">
            <summary>
              Returns a lognormal distributed floating point random number.
            </summary>
            <param name="mu">
              The parameter mu which is used for generation of lognormal distributed random numbers.
            </param>
            <param name="sigma">
              The parameter sigma which is used for generation of lognormal distributed random numbers.
            </param>
            <returns>A lognormal distributed floating point random number.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="sigma"/> is less than zero.
            </exception>
            <remarks>
              This method simply wraps a call to <see cref="P:Troschuetz.Random.Distributions.Continuous.LognormalDistribution.Sample"/>, with a
              prior check of the distribution parameters.
            </remarks>
            <remarks>
              If you absolutely need the best performance, you may consider using an instance of
              <see cref="T:Troschuetz.Random.Distributions.Continuous.LognormalDistribution"/> for each group of parameters.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.TRandom.LognormalSamples(System.Double,System.Double)">
            <summary>
              Returns an infinite sequence of lognormal distributed floating point random numbers.
            </summary>
            <param name="mu">
              The parameter mu which is used for generation of lognormal distributed random numbers.
            </param>
            <param name="sigma">
              The parameter sigma which is used for generation of lognormal distributed random numbers.
            </param>
            <returns>
              An infinite sequence of lognormal distributed floating point random numbers.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="sigma"/> is less than zero.
            </exception>
            <remarks>
              This method simply wraps a call to <see cref="P:Troschuetz.Random.Distributions.Continuous.LognormalDistribution.Sample"/>, with a
              prior check of the distribution parameters.
            </remarks>
            <remarks>
              If you absolutely need the best performance, you may consider using an instance of
              <see cref="T:Troschuetz.Random.Distributions.Continuous.LognormalDistribution"/> for each group of parameters.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.TRandom.Normal(System.Double,System.Double)">
            <summary>
              Returns a normal distributed floating point random number.
            </summary>
            <param name="mu">
              The parameter mu which is used for generation of normal distributed random numbers.
            </param>
            <param name="sigma">
              The parameter sigma which is used for generation of normal distributed random numbers.
            </param>
            <returns>A normal distributed floating point random number.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="sigma"/> is less than or equal to zero.
            </exception>
            <remarks>
              This method simply wraps a call to <see cref="P:Troschuetz.Random.Distributions.Continuous.NormalDistribution.Sample"/>, with a
              prior check of the distribution parameters.
            </remarks>
            <remarks>
              If you absolutely need the best performance, you may consider using an instance of
              <see cref="T:Troschuetz.Random.Distributions.Continuous.NormalDistribution"/> for each group of parameters.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.TRandom.NormalSamples(System.Double,System.Double)">
            <summary>
              Returns an infinite sequence of normal distributed floating point random numbers.
            </summary>
            <param name="mu">
              The parameter mu which is used for generation of normal distributed random numbers.
            </param>
            <param name="sigma">
              The parameter sigma which is used for generation of normal distributed random numbers.
            </param>
            <returns>An infinite sequence of normal distributed floating point random numbers.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="sigma"/> is less than or equal to zero.
            </exception>
            <remarks>
              This method simply wraps a call to <see cref="P:Troschuetz.Random.Distributions.Continuous.NormalDistribution.Sample"/>, with a
              prior check of the distribution parameters.
            </remarks>
            <remarks>
              If you absolutely need the best performance, you may consider using an instance of
              <see cref="T:Troschuetz.Random.Distributions.Continuous.NormalDistribution"/> for each group of parameters.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.TRandom.Pareto(System.Double,System.Double)">
            <summary>
              Returns a pareto distributed floating point random number.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of pareto distributed random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of pareto distributed random numbers.
            </param>
            <returns>A pareto distributed floating point random number.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> or <paramref name="beta"/> are less than or equal to zero.
            </exception>
            <remarks>
              This method simply wraps a call to <see cref="P:Troschuetz.Random.Distributions.Continuous.ParetoDistribution.Sample"/>, with a
              prior check of the distribution parameters.
            </remarks>
            <remarks>
              If you absolutely need the best performance, you may consider using an instance of
              <see cref="T:Troschuetz.Random.Distributions.Continuous.ParetoDistribution"/> for each group of parameters.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.TRandom.ParetoSamples(System.Double,System.Double)">
            <summary>
              Returns an infinite sequence of pareto distributed floating point random numbers.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of pareto distributed random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of pareto distributed random numbers.
            </param>
            <returns>An infinite sequence of pareto distributed floating point random numbers.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> or <paramref name="beta"/> are less than or equal to zero.
            </exception>
            <remarks>
              This method simply wraps a call to <see cref="P:Troschuetz.Random.Distributions.Continuous.ParetoDistribution.Sample"/>, with a
              prior check of the distribution parameters.
            </remarks>
            <remarks>
              If you absolutely need the best performance, you may consider using an instance of
              <see cref="T:Troschuetz.Random.Distributions.Continuous.ParetoDistribution"/> for each group of parameters.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.TRandom.Power(System.Double,System.Double)">
            <summary>
              Returns a power distributed floating point random number.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of power distributed random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of power distributed random numbers.
            </param>
            <returns>A power distributed floating point random number.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> or <paramref name="beta"/> are less than or equal to zero.
            </exception>
            <remarks>
              This method simply wraps a call to <see cref="P:Troschuetz.Random.Distributions.Continuous.PowerDistribution.Sample"/>, with a
              prior check of the distribution parameters.
            </remarks>
            <remarks>
              If you absolutely need the best performance, you may consider using an instance of
              <see cref="T:Troschuetz.Random.Distributions.Continuous.PowerDistribution"/> for each group of parameters.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.TRandom.PowerSamples(System.Double,System.Double)">
            <summary>
              Returns an infinite sequence of power distributed floating point random numbers.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of power distributed random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of power distributed random numbers.
            </param>
            <returns>An infinite sequence of power distributed floating point random numbers.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> or <paramref name="beta"/> are less than or equal to zero.
            </exception>
            <remarks>
              This method simply wraps a call to <see cref="P:Troschuetz.Random.Distributions.Continuous.PowerDistribution.Sample"/>, with a
              prior check of the distribution parameters.
            </remarks>
            <remarks>
              If you absolutely need the best performance, you may consider using an instance of
              <see cref="T:Troschuetz.Random.Distributions.Continuous.PowerDistribution"/> for each group of parameters.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.TRandom.Rayleigh(System.Double)">
            <summary>
              Returns a rayleigh distributed floating point random number.
            </summary>
            <param name="sigma">
              The parameter sigma which is used for generation of rayleigh distributed random numbers.
            </param>
            <returns>A rayleigh distributed floating point random number.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="sigma"/> is less than or equal to zero.
            </exception>
            <remarks>
              This method simply wraps a call to <see cref="P:Troschuetz.Random.Distributions.Continuous.RayleighDistribution.Sample"/>, with a
              prior check of the distribution parameters.
            </remarks>
            <remarks>
              If you absolutely need the best performance, you may consider using an instance of
              <see cref="T:Troschuetz.Random.Distributions.Continuous.RayleighDistribution"/> for each group of parameters.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.TRandom.RayleighSamples(System.Double)">
            <summary>
              Returns an infinite sequence of rayleigh distributed floating point random numbers.
            </summary>
            <param name="sigma">
              The parameter sigma which is used for generation of rayleigh distributed random numbers.
            </param>
            <returns>
              An infinite sequence of rayleigh distributed floating point random numbers.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="sigma"/> is less than or equal to zero.
            </exception>
            <remarks>
              This method simply wraps a call to <see cref="P:Troschuetz.Random.Distributions.Continuous.RayleighDistribution.Sample"/>, with a
              prior check of the distribution parameters.
            </remarks>
            <remarks>
              If you absolutely need the best performance, you may consider using an instance of
              <see cref="T:Troschuetz.Random.Distributions.Continuous.RayleighDistribution"/> for each group of parameters.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.TRandom.StudentsT(System.Int32)">
            <summary>
              Returns a student's t distributed floating point random number.
            </summary>
            <param name="nu">
              The parameter nu which is used for generation of student's t distributed random numbers.
            </param>
            <returns>A student's t distributed floating point random number.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="nu"/> is less than or equal to zero.
            </exception>
            <remarks>
              This method simply wraps a call to <see cref="P:Troschuetz.Random.Distributions.Continuous.StudentsTDistribution.Sample"/>, with a
              prior check of the distribution parameters.
            </remarks>
            <remarks>
              If you absolutely need the best performance, you may consider using an instance of
              <see cref="T:Troschuetz.Random.Distributions.Continuous.StudentsTDistribution"/> for each group of parameters.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.TRandom.StudentsTSamples(System.Int32)">
            <summary>
              Returns an infinite sequence of student's t distributed floating point random numbers.
            </summary>
            <param name="nu">
              The parameter nu which is used for generation of student's t distributed random numbers.
            </param>
            <returns>
              An infinite sequence of student's t distributed floating point random numbers.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="nu"/> is less than or equal to zero.
            </exception>
            <remarks>
              This method simply wraps a call to <see cref="P:Troschuetz.Random.Distributions.Continuous.StudentsTDistribution.Sample"/>, with a
              prior check of the distribution parameters.
            </remarks>
            <remarks>
              If you absolutely need the best performance, you may consider using an instance of
              <see cref="T:Troschuetz.Random.Distributions.Continuous.StudentsTDistribution"/> for each group of parameters.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.TRandom.Triangular(System.Double,System.Double,System.Double)">
            <summary>
              Returns a triangular distributed floating point random number.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of triangular distributed random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of triangular distributed random numbers.
            </param>
            <param name="gamma">
              The parameter gamma which is used for generation of triangular distributed random numbers.
            </param>
            <returns>A triangular distributed floating point random number.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is greater than or equal to <paramref name="beta"/>, or
              <paramref name="alpha"/> is greater than <paramref name="gamma"/>, or
              <paramref name="beta"/> is less than <paramref name="gamma"/>.
            </exception>
            <remarks>
              This method simply wraps a call to <see cref="P:Troschuetz.Random.Distributions.Continuous.TriangularDistribution.Sample"/>, with a
              prior check of the distribution parameters.
            </remarks>
            <remarks>
              If you absolutely need the best performance, you may consider using an instance of
              <see cref="T:Troschuetz.Random.Distributions.Continuous.TriangularDistribution"/> for each group of parameters.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.TRandom.TriangularSamples(System.Double,System.Double,System.Double)">
            <summary>
              Returns an infinite sequence of triangular distributed floating point random numbers.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of triangular distributed random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of triangular distributed random numbers.
            </param>
            <param name="gamma">
              The parameter gamma which is used for generation of triangular distributed random numbers.
            </param>
            <returns>
              An infinite sequence of triangular distributed floating point random numbers.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is greater than or equal to <paramref name="beta"/>, or
              <paramref name="alpha"/> is greater than <paramref name="gamma"/>, or
              <paramref name="beta"/> is less than <paramref name="gamma"/>.
            </exception>
            <remarks>
              This method simply wraps a call to <see cref="P:Troschuetz.Random.Distributions.Continuous.TriangularDistribution.Sample"/>, with a
              prior check of the distribution parameters.
            </remarks>
            <remarks>
              If you absolutely need the best performance, you may consider using an instance of
              <see cref="T:Troschuetz.Random.Distributions.Continuous.TriangularDistribution"/> for each group of parameters.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.TRandom.Weibull(System.Double,System.Double)">
            <summary>
              Returns a weibull distributed floating point random number.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of weibull distributed random numbers.
            </param>
            <param name="lambda">
              The parameter lambda which is used for generation of weibull distributed random numbers.
            </param>
            <returns>A weibull distributed floating point random number.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> or <paramref name="lambda"/> are less than or equal to zero.
            </exception>
            <remarks>
              This method simply wraps a call to <see cref="P:Troschuetz.Random.Distributions.Continuous.WeibullDistribution.Sample"/>, with a
              prior check of the distribution parameters.
            </remarks>
            <remarks>
              If you absolutely need the best performance, you may consider using an instance of
              <see cref="T:Troschuetz.Random.Distributions.Continuous.WeibullDistribution"/> for each group of parameters.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.TRandom.WeibullSamples(System.Double,System.Double)">
            <summary>
              Returns an infinite sequence of weibull distributed floating point random numbers.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of weibull distributed random numbers.
            </param>
            <param name="lambda">
              The parameter lambda which is used for generation of weibull distributed random numbers.
            </param>
            <returns>An infinite sequence of weibull distributed floating point random numbers.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> or <paramref name="lambda"/> are less than or equal to zero.
            </exception>
            <remarks>
              This method simply wraps a call to <see cref="P:Troschuetz.Random.Distributions.Continuous.WeibullDistribution.Sample"/>, with a
              prior check of the distribution parameters.
            </remarks>
            <remarks>
              If you absolutely need the best performance, you may consider using an instance of
              <see cref="T:Troschuetz.Random.Distributions.Continuous.WeibullDistribution"/> for each group of parameters.
            </remarks>
        </member>
        <member name="P:Troschuetz.Random.TRandom.Seed">
            <summary>
              The seed value used by the generator.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.TRandom.CanReset">
            <summary>
              Gets a value indicating whether the random number generator can be reset, so that it
              produces the same random number sequence again.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.TRandom.Reset">
            <summary>
              Resets the random number generator using the initial seed, so that it produces the
              same random number sequence again. To understand whether this generator can be reset,
              you can query the <see cref="P:Troschuetz.Random.IGenerator.CanReset"/> property.
            </summary>
            <returns>True if the random number generator was reset; otherwise, false.</returns>
        </member>
        <member name="M:Troschuetz.Random.TRandom.Reset(System.UInt32)">
            <summary>
              Resets the random number generator using the specified seed, so that it produces the
              same random number sequence again. To understand whether this generator can be reset,
              you can query the <see cref="P:Troschuetz.Random.IGenerator.CanReset"/> property.
            </summary>
            <param name="seed">The seed value used by the generator.</param>
            <returns>True if the random number generator was reset; otherwise, false.</returns>
        </member>
        <member name="M:Troschuetz.Random.TRandom.Next">
            <summary>
              Returns a nonnegative random number less than <see cref="F:System.Int32.MaxValue"/>.
            </summary>
            <returns>
              A 32-bit signed integer greater than or equal to 0, and less than
              <see cref="F:System.Int32.MaxValue"/>; that is, the range of return values includes 0
              but not <see cref="F:System.Int32.MaxValue"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.TRandom.NextInclusiveMaxValue">
            <summary>
              Returns a nonnegative random number less than or equal to <see cref="F:System.Int32.MaxValue"/>.
            </summary>
            <returns>
              A 32-bit signed integer greater than or equal to 0, and less than or equal to
              <see cref="F:System.Int32.MaxValue"/>; that is, the range of return values includes 0
              and <see cref="F:System.Int32.MaxValue"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.TRandom.Next(System.Int32)">
            <summary>
              Returns a nonnegative random number less than the specified maximum.
            </summary>
            <param name="maxValue">The exclusive upper bound of the random number to be generated.</param>
            <returns>
              A 32-bit signed integer greater than or equal to 0, and less than
              <paramref name="maxValue"/>; that is, the range of return values includes 0 but not <paramref name="maxValue"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="maxValue"/> must be greater than or equal to 0.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.TRandom.Next(System.Int32,System.Int32)">
            <summary>
              Returns a random number within the specified range.
            </summary>
            <param name="minValue">The inclusive lower bound of the random number to be generated.</param>
            <param name="maxValue">
              The exclusive upper bound of the random number to be generated.
              <paramref name="maxValue"/> must be greater than or equal to <paramref name="minValue"/>.
            </param>
            <returns>
              A 32-bit signed integer greater than or equal to <paramref name="minValue"/>, and less
              than <paramref name="maxValue"/>; that is, the range of return values includes
              <paramref name="minValue"/> but not <paramref name="maxValue"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="maxValue"/> must be greater than or equal to <paramref name="minValue"/>.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.TRandom.NextDouble">
            <summary>
              Returns a nonnegative floating point random number less than 1.0.
            </summary>
            <returns>
              A double-precision floating point number greater than or equal to 0.0, and less than
              1.0; that is, the range of return values includes 0.0 but not 1.0.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.TRandom.NextDouble(System.Double)">
            <summary>
              Returns a nonnegative floating point random number less than the specified maximum.
            </summary>
            <param name="maxValue">The exclusive upper bound of the random number to be generated.</param>
            <returns>
              A double-precision floating point number greater than or equal to 0.0, and less than
              <paramref name="maxValue"/>; that is, the range of return values includes 0 but not <paramref name="maxValue"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="maxValue"/> must be greater than or equal to 0.0.
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="maxValue"/> cannot be <see cref="F:System.Double.PositiveInfinity"/>.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.TRandom.NextDouble(System.Double,System.Double)">
            <summary>
              Returns a floating point random number within the specified range.
            </summary>
            <param name="minValue">The inclusive lower bound of the random number to be generated.</param>
            <param name="maxValue">The exclusive upper bound of the random number to be generated.</param>
            <returns>
              A double-precision floating point number greater than or equal to
              <paramref name="minValue"/>, and less than <paramref name="maxValue"/>; that is, the
              range of return values includes <paramref name="minValue"/> but not <paramref name="maxValue"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="maxValue"/> must be greater than or equal to <paramref name="minValue"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              The difference between <paramref name="maxValue"/> and <paramref name="minValue"/>
              cannot be <see cref="F:System.Double.PositiveInfinity"/>.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.TRandom.NextUInt">
            <summary>
              Returns an unsigned random number.
            </summary>
            <returns>
              A 32-bit unsigned integer greater than or equal to
              <see cref="F:System.UInt32.MinValue"/> and less than or equal to <see cref="F:System.UInt32.MaxValue"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.TRandom.NextUInt(System.UInt32)">
            <summary>
              Returns an unsigned random number less than the specified maximum.
            </summary>
            <param name="maxValue">The exclusive upper bound of the random number to be generated.</param>
            <returns>
              A 32-bit unsigned integer greater than or equal to
              <see cref="F:System.UInt32.MinValue"/> and less than <paramref name="maxValue"/>; that
              is, the range of return values includes <see cref="F:System.UInt32.MinValue"/> but not <paramref name="maxValue"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.TRandom.NextUIntExclusiveMaxValue">
            <summary>
              Returns an unsigned random number less than <see cref="F:System.UInt32.MaxValue"/>.
            </summary>
            <returns>
              A 32-bit unsigned integer greater than or equal to
              <see cref="F:System.UInt32.MinValue"/> and less than <see cref="F:System.UInt32.MaxValue"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.TRandom.NextUInt(System.UInt32,System.UInt32)">
            <summary>
              Returns an unsigned random number within the specified range.
            </summary>
            <param name="minValue">The inclusive lower bound of the random number to be generated.</param>
            <param name="maxValue">The exclusive upper bound of the random number to be generated.</param>
            <returns>
              A 32-bit unsigned integer greater than or equal to <paramref name="minValue"/> and
              less than <paramref name="maxValue"/>; that is, the range of return values includes
              <paramref name="minValue"/> but not <paramref name="maxValue"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="maxValue"/> must be greater than or equal to <paramref name="minValue"/>.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.TRandom.NextBoolean">
            <summary>
              Returns a random Boolean value.
            </summary>
            <remarks>
              Buffers 31 random bits for future calls, so the random number generator is only
              invoked once in every 31 calls.
            </remarks>
            <returns>A <see cref="T:System.Boolean"/> value.</returns>
        </member>
        <member name="M:Troschuetz.Random.TRandom.NextBytes(System.Byte[])">
            <summary>
              Fills the elements of a specified array of bytes with random numbers.
            </summary>
            <remarks>
              Each element of the array of bytes is set to a random number greater than or equal to
              0, and less than or equal to <see cref="F:System.Byte.MaxValue"/>.
            </remarks>
            <param name="buffer">An array of bytes to contain random numbers.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="buffer"/> is null.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.TRandom.ToString">
            <summary>
              Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:System.SerializableAttribute">
            <summary>
              Fake, this is used only to allow serialization on portable platforms.
            </summary>
        </member>
    </members>
</doc>
